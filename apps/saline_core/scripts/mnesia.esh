#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable ls-mnesia debug verbose

-include("../include/db/saline_database.hrl").

-record(saline_table_ids, {table_name, last_id}).

main(Args) ->
	case Args of
    	[String] ->
			io:format("Writing database files to ~p~n", [String]),
			application:set_env(mnesia, dir, String);
		[] -> 
			io:format("Writing database files to ~p~n", [?DATABASE_DIR]),
			application:set_env(mnesia, dir, ?DATABASE_DIR)
	end,
    application:stop(mnesia),
    install([node()|nodes()]).

install(Nodes) ->
    case mnesia:create_schema(Nodes) of
        ok -> 
            rpc:multicall(Nodes, application, start, [mnesia]),
			counter_create_table(Nodes),
			account_create_table(Nodes),
			setup_counters([saline_account]),
            rpc:multicall(Nodes, application, stop, [mnesia]);
        Err -> 
            io:format("Couldn't create schema: ~p", [Err]),
            Err
    end.

setup_counters([]) ->
	ok;
setup_counters([H|T]) ->
    Fun = fun() ->
                mnesia:write(saline_table_ids, 
                  #saline_table_ids{table_name=H, last_id=0}, 
                  write
                )
          end,
    {atomic, ok} = mnesia:transaction(Fun),
	setup_counters(T).
	
counter_create_table(Nodes) ->
    {_, ok} = mnesia:create_table(saline_table_ids, [
			   {record_name, saline_table_ids},
			   {attributes, record_info(fields, saline_table_ids)},
				 {disc_copies, Nodes}
    			]).

account_create_table(Nodes) ->
	{_, ok} = mnesia:create_table(saline_account,
				[{attributes, record_info(fields, saline_account)},
				 {disc_copies, Nodes}
				 ]).
