%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(gremlin_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([
    'enum_symbol_by_value_gen_response.status'/1,
    'enum_value_by_symbol_gen_response.status'/1
]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

%% enumerated types
-type 'gen_response.status'() :: 'OK' | 'ERROR'.
-export_type(['gen_response.status'/0]).

%% message types
-type gen_response() ::
    % = 1, enum gen_response.status
    #{
        status := 'OK' | 'ERROR' | integer(),
        % = 2
        msg => iodata()
    }.

-type account_new() ::
    % = 1
    #{
        email := iodata(),
        % = 2
        password := iodata()
    }.

-type account_login() ::
    % = 1
    #{
        email := iodata(),
        % = 2
        password := iodata()
    }.

-type session_log() ::
    % = 1
    #{
        msg := iodata(),
        % = 2
        color := iodata()
    }.

-export_type([
    'gen_response'/0, 'account_new'/0, 'account_login'/0, 'session_log'/0
]).

-spec encode_msg(
    gen_response() | account_new() | account_login() | session_log(), atom()
) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(
    gen_response() | account_new() | account_login() | session_log(),
    atom(),
    list()
) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        gen_response ->
            encode_msg_gen_response(
                id(Msg, TrUserData),
                TrUserData
            );
        account_new ->
            encode_msg_account_new(id(Msg, TrUserData), TrUserData);
        account_login ->
            encode_msg_account_login(
                id(Msg, TrUserData),
                TrUserData
            );
        session_log ->
            encode_msg_session_log(id(Msg, TrUserData), TrUserData)
    end.

encode_msg_gen_response(Msg, TrUserData) ->
    encode_msg_gen_response(Msg, <<>>, TrUserData).

encode_msg_gen_response(
    #{status := F1} = M,
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        'e_enum_gen_response.status'(
            TrF1,
            <<Bin/binary, 8>>,
            TrUserData
        )
    end,
    case M of
        #{msg := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
            end;
        _ ->
            B1
    end.

encode_msg_account_new(Msg, TrUserData) ->
    encode_msg_account_new(Msg, <<>>, TrUserData).

encode_msg_account_new(
    #{email := F1, password := F2},
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_account_login(Msg, TrUserData) ->
    encode_msg_account_login(Msg, <<>>, TrUserData).

encode_msg_account_login(
    #{email := F1, password := F2},
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_session_log(Msg, TrUserData) ->
    encode_msg_session_log(Msg, <<>>, TrUserData).

encode_msg_session_log(
    #{msg := F1, color := F2},
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_gen_response.status'('OK', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_gen_response.status'(
    'ERROR',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_gen_response.status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when
    0 =< Value, Value =< 127
->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when
    0 =< Value, Value =< 127
->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when
    is_binary(Bytes)
->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when
    is_list(Bytes)
->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error(
                {gpb_error,
                    {decoding_failure,
                        {Bin, MsgName, {Class, Reason, StackTrace}}}}
            )
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error(
                {gpb_error,
                    {decoding_failure,
                        {Bin, MsgName, {Class, Reason, StackTrace}}}}
            )
    end.
-endif.

decode_msg_2_doit(gen_response, Bin, TrUserData) ->
    id(
        decode_msg_gen_response(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(account_new, Bin, TrUserData) ->
    id(decode_msg_account_new(Bin, TrUserData), TrUserData);
decode_msg_2_doit(account_login, Bin, TrUserData) ->
    id(
        decode_msg_account_login(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(session_log, Bin, TrUserData) ->
    id(decode_msg_session_log(Bin, TrUserData), TrUserData).

decode_msg_gen_response(Bin, TrUserData) ->
    dfp_read_field_def_gen_response(
        Bin,
        0,
        0,
        id('$undef', TrUserData),
        id('$undef', TrUserData),
        TrUserData
    ).

dfp_read_field_def_gen_response(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_gen_response_status(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_gen_response(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_gen_response_msg(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_gen_response(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    S1 = #{status => F@_1},
    if
        F@_2 == '$undef' -> S1;
        true -> S1#{msg => F@_2}
    end;
dfp_read_field_def_gen_response(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_gen_response(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_gen_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 32 - 7
->
    dg_read_field_def_gen_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_gen_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_gen_response_status(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_gen_response_msg(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gen_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_gen_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_gen_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_gen_response(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_gen_response(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_gen_response(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    S1 = #{status => F@_1},
    if
        F@_2 == '$undef' -> S1;
        true -> S1#{msg => F@_2}
    end.

d_field_gen_response_status(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_gen_response_status(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_gen_response_status(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {
            id(
                'd_enum_gen_response.status'(begin
                    <<Res:32/signed-native>> = <<
                        (X bsl
                            N +
                            Acc):32/unsigned-native
                    >>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest
        },
    dfp_read_field_def_gen_response(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_gen_response_msg(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_gen_response_msg(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_gen_response_msg(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {
            id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2
        }
    end,
    dfp_read_field_def_gen_response(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_gen_response(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_gen_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_gen_response(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_gen_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_gen_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    skip_length_delimited_gen_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_gen_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gen_response(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_gen_response(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gen_response(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_gen_response(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_gen_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_gen_response(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_gen_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_account_new(Bin, TrUserData) ->
    dfp_read_field_def_account_new(
        Bin,
        0,
        0,
        id('$undef', TrUserData),
        id('$undef', TrUserData),
        TrUserData
    ).

dfp_read_field_def_account_new(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_account_new_email(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_account_new(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_account_new_password(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_account_new(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #{email => F@_1, password => F@_2};
dfp_read_field_def_account_new(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_account_new(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_account_new(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 32 - 7
->
    dg_read_field_def_account_new(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_account_new(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_account_new_email(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_account_new_password(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_account_new(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_account_new(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_account_new(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_account_new(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_account_new(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_account_new(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #{email => F@_1, password => F@_2}.

d_field_account_new_email(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_account_new_email(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_account_new_email(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {
            id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2
        }
    end,
    dfp_read_field_def_account_new(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_account_new_password(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_account_new_password(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_account_new_password(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {
            id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2
        }
    end,
    dfp_read_field_def_account_new(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_account_new(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_account_new(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_account_new(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_account_new(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_account_new(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    skip_length_delimited_account_new(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_account_new(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_account_new(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_account_new(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_account_new(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_account_new(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_account_new(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_account_new(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_account_new(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_account_login(Bin, TrUserData) ->
    dfp_read_field_def_account_login(
        Bin,
        0,
        0,
        id('$undef', TrUserData),
        id('$undef', TrUserData),
        TrUserData
    ).

dfp_read_field_def_account_login(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_account_login_email(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_account_login(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_account_login_password(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_account_login(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #{email => F@_1, password => F@_2};
dfp_read_field_def_account_login(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_account_login(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_account_login(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 32 - 7
->
    dg_read_field_def_account_login(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_account_login(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_account_login_email(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_account_login_password(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_account_login(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_account_login(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_account_login(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_account_login(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_account_login(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_account_login(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #{email => F@_1, password => F@_2}.

d_field_account_login_email(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_account_login_email(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_account_login_email(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {
            id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2
        }
    end,
    dfp_read_field_def_account_login(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_account_login_password(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_account_login_password(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_account_login_password(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {
            id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2
        }
    end,
    dfp_read_field_def_account_login(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_account_login(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_account_login(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_account_login(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_account_login(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_account_login(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    skip_length_delimited_account_login(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_account_login(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_account_login(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_account_login(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_account_login(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_account_login(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_account_login(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_account_login(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_account_login(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_session_log(Bin, TrUserData) ->
    dfp_read_field_def_session_log(
        Bin,
        0,
        0,
        id('$undef', TrUserData),
        id('$undef', TrUserData),
        TrUserData
    ).

dfp_read_field_def_session_log(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_session_log_msg(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_session_log(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_session_log_color(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_session_log(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #{msg => F@_1, color => F@_2};
dfp_read_field_def_session_log(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_session_log(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_session_log(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 32 - 7
->
    dg_read_field_def_session_log(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_session_log(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_log_msg(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_session_log_color(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_log(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_session_log(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_session_log(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_session_log(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_session_log(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_session_log(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #{msg => F@_1, color => F@_2}.

d_field_session_log_msg(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_session_log_msg(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_session_log_msg(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {
            id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2
        }
    end,
    dfp_read_field_def_session_log(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_session_log_color(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    d_field_session_log_color(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_session_log_color(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_session_log(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_session_log(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_session_log(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_session_log(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_session_log(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_session_log(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when
    N < 57
->
    skip_length_delimited_session_log(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_session_log(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_log(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_session_log(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_log(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_session_log(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_session_log(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_session_log(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_session_log(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

'd_enum_gen_response.status'(0) -> 'OK';
'd_enum_gen_response.status'(1) -> 'ERROR';
'd_enum_gen_response.status'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when
    N < (32 - 7)
->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when
    N < (64 - 7)
->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when
    N < (64 - 7)
->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        gen_response ->
            merge_msg_gen_response(Prev, New, TrUserData);
        account_new ->
            merge_msg_account_new(Prev, New, TrUserData);
        account_login ->
            merge_msg_account_login(Prev, New, TrUserData);
        session_log ->
            merge_msg_session_log(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, merge_msg_gen_response/3}).
merge_msg_gen_response(
    #{} = PMsg,
    #{status := NFstatus} = NMsg,
    _
) ->
    S1 = #{status => NFstatus},
    case {PMsg, NMsg} of
        {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
        {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
        _ -> S1
    end.

-compile({nowarn_unused_function, merge_msg_account_new/3}).
merge_msg_account_new(
    #{},
    #{email := NFemail, password := NFpassword},
    _
) ->
    #{email => NFemail, password => NFpassword}.

-compile({nowarn_unused_function, merge_msg_account_login/3}).
merge_msg_account_login(
    #{},
    #{email := NFemail, password := NFpassword},
    _
) ->
    #{email => NFemail, password => NFpassword}.

-compile({nowarn_unused_function, merge_msg_session_log/3}).
merge_msg_session_log(
    #{},
    #{msg := NFmsg, color := NFcolor},
    _
) ->
    #{msg => NFmsg, color => NFcolor}.

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        gen_response ->
            v_msg_gen_response(Msg, [MsgName], TrUserData);
        account_new ->
            v_msg_account_new(Msg, [MsgName], TrUserData);
        account_login ->
            v_msg_account_login(Msg, [MsgName], TrUserData);
        session_log ->
            v_msg_session_log(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, v_msg_gen_response/3}).
-dialyzer({nowarn_function, v_msg_gen_response/3}).
v_msg_gen_response(
    #{status := F1} = M,
    Path,
    TrUserData
) ->
    'v_enum_gen_response.status'(
        F1,
        [status | Path],
        TrUserData
    ),
    case M of
        #{msg := F2} ->
            v_type_string(F2, [msg | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (status) -> ok;
            (msg) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_gen_response(M, Path, _TrUserData) when
    is_map(M)
->
    mk_type_error(
        {missing_fields, [status] -- maps:keys(M), gen_response},
        M,
        Path
    );
v_msg_gen_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gen_response}, X, Path).

-compile({nowarn_unused_function, v_msg_account_new/3}).
-dialyzer({nowarn_function, v_msg_account_new/3}).
v_msg_account_new(
    #{email := F1, password := F2} = M,
    Path,
    TrUserData
) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    lists:foreach(
        fun
            (email) -> ok;
            (password) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_account_new(M, Path, _TrUserData) when
    is_map(M)
->
    mk_type_error(
        {missing_fields, [email, password] -- maps:keys(M), account_new},
        M,
        Path
    );
v_msg_account_new(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, account_new}, X, Path).

-compile({nowarn_unused_function, v_msg_account_login/3}).
-dialyzer({nowarn_function, v_msg_account_login/3}).
v_msg_account_login(
    #{email := F1, password := F2} = M,
    Path,
    TrUserData
) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    lists:foreach(
        fun
            (email) -> ok;
            (password) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_account_login(M, Path, _TrUserData) when
    is_map(M)
->
    mk_type_error(
        {missing_fields, [email, password] -- maps:keys(M), account_login},
        M,
        Path
    );
v_msg_account_login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, account_login}, X, Path).

-compile({nowarn_unused_function, v_msg_session_log/3}).
-dialyzer({nowarn_function, v_msg_session_log/3}).
v_msg_session_log(
    #{msg := F1, color := F2} = M,
    Path,
    TrUserData
) ->
    v_type_string(F1, [msg | Path], TrUserData),
    v_type_bytes(F2, [color | Path], TrUserData),
    lists:foreach(
        fun
            (msg) -> ok;
            (color) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_session_log(M, Path, _TrUserData) when
    is_map(M)
->
    mk_type_error(
        {missing_fields, [msg, color] -- maps:keys(M), session_log},
        M,
        Path
    );
v_msg_session_log(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, session_log}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gen_response.status'/3}).
-dialyzer({nowarn_function, 'v_enum_gen_response.status'/3}).
'v_enum_gen_response.status'(
    'OK',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_gen_response.status'(
    'ERROR',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_gen_response.status'(V, Path, TrUserData) when
    is_integer(V)
->
    v_type_sint32(V, Path, TrUserData);
'v_enum_gen_response.status'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'gen_response.status'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_sint32/3}).
-dialyzer({nowarn_function, v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when
    -2147483648 =< N, N =< 2147483647
->
    ok;
v_type_sint32(N, Path, _TrUserData) when
    is_integer(N)
->
    mk_type_error(
        {value_out_of_range, sint32, signed, 32},
        N,
        Path
    );
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, sint32, signed, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when
    is_list(S); is_binary(S)
->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error(
        {gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}
    ).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    list_to_atom(
        lists:append(
            lists:join(
                ".",
                lists:map(
                    fun atom_to_list/1,
                    lists:reverse(PathR)
                )
            )
        )
    ).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{enum, 'gen_response.status'}, [{'OK', 0}, {'ERROR', 1}]},
        {{msg, gen_response}, [
            #{
                name => status,
                fnum => 1,
                rnum => 2,
                type => {enum, 'gen_response.status'},
                occurrence => required,
                opts => []
            },
            #{
                name => msg,
                fnum => 2,
                rnum => 3,
                type => string,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, account_new}, [
            #{
                name => email,
                fnum => 1,
                rnum => 2,
                type => string,
                occurrence => required,
                opts => []
            },
            #{
                name => password,
                fnum => 2,
                rnum => 3,
                type => string,
                occurrence => required,
                opts => []
            }
        ]},
        {{msg, account_login}, [
            #{
                name => email,
                fnum => 1,
                rnum => 2,
                type => string,
                occurrence => required,
                opts => []
            },
            #{
                name => password,
                fnum => 2,
                rnum => 3,
                type => string,
                occurrence => required,
                opts => []
            }
        ]},
        {{msg, session_log}, [
            #{
                name => msg,
                fnum => 1,
                rnum => 2,
                type => string,
                occurrence => required,
                opts => []
            },
            #{
                name => color,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => required,
                opts => []
            }
        ]}
    ].

get_msg_names() ->
    [gen_response, account_new, account_login, session_log].

get_group_names() -> [].

get_msg_or_group_names() ->
    [gen_response, account_new, account_login, session_log].

get_enum_names() -> ['gen_response.status'].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def(gen_response) ->
    [
        #{
            name => status,
            fnum => 1,
            rnum => 2,
            type => {enum, 'gen_response.status'},
            occurrence => required,
            opts => []
        },
        #{
            name => msg,
            fnum => 2,
            rnum => 3,
            type => string,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(account_new) ->
    [
        #{
            name => email,
            fnum => 1,
            rnum => 2,
            type => string,
            occurrence => required,
            opts => []
        },
        #{
            name => password,
            fnum => 2,
            rnum => 3,
            type => string,
            occurrence => required,
            opts => []
        }
    ];
find_msg_def(account_login) ->
    [
        #{
            name => email,
            fnum => 1,
            rnum => 2,
            type => string,
            occurrence => required,
            opts => []
        },
        #{
            name => password,
            fnum => 2,
            rnum => 3,
            type => string,
            occurrence => required,
            opts => []
        }
    ];
find_msg_def(session_log) ->
    [
        #{
            name => msg,
            fnum => 1,
            rnum => 2,
            type => string,
            occurrence => required,
            opts => []
        },
        #{
            name => color,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => required,
            opts => []
        }
    ];
find_msg_def(_) ->
    error.

find_enum_def('gen_response.status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def(_) ->
    error.

enum_symbol_by_value('gen_response.status', Value) ->
    'enum_symbol_by_value_gen_response.status'(Value).

enum_value_by_symbol('gen_response.status', Sym) ->
    'enum_value_by_symbol_gen_response.status'(Sym).

'enum_symbol_by_value_gen_response.status'(0) -> 'OK';
'enum_symbol_by_value_gen_response.status'(1) -> 'ERROR'.

'enum_value_by_symbol_gen_response.status'('OK') -> 0;
'enum_value_by_symbol_gen_response.status'('ERROR') -> 1.

get_service_names() -> [].

get_service_def(_) -> error.

get_rpc_names(_) -> error.

find_rpc_def(_, _) -> error.

-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"gremlin.gen_response">>) -> gen_response;
fqbin_to_msg_name(<<"gremlin.account_new">>) -> account_new;
fqbin_to_msg_name(<<"gremlin.account_login">>) -> account_login;
fqbin_to_msg_name(<<"gremlin.session_log">>) -> session_log;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin(gen_response) -> <<"gremlin.gen_response">>;
msg_name_to_fqbin(account_new) -> <<"gremlin.account_new">>;
msg_name_to_fqbin(account_login) -> <<"gremlin.account_login">>;
msg_name_to_fqbin(session_log) -> <<"gremlin.session_log">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"gremlin.gen_response.status">>) ->
    'gen_response.status';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('gen_response.status') ->
    <<"gremlin.gen_response.status">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_package_name() -> gremlin.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.

source_basename() -> "gremlin.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["gremlin.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["gremlin"].

get_msg_containment("gremlin") ->
    [account_login, account_new, gen_response, session_log];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("gremlin") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("gremlin") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("gremlin") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).

get_enum_containment("gremlin") ->
    ['gen_response.status'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"gremlin.gen_response">>) -> "gremlin";
get_proto_by_msg_name_as_fqbin(<<"gremlin.session_log">>) -> "gremlin";
get_proto_by_msg_name_as_fqbin(<<"gremlin.account_new">>) -> "gremlin";
get_proto_by_msg_name_as_fqbin(<<"gremlin.account_login">>) -> "gremlin";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"gremlin.gen_response.status">>) ->
    "gremlin";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4, 11, 2].
