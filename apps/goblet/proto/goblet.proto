syntax = "proto2";

package goblet;

/////////////////////////////////////////////////////////
// Goblet Objects                                      //
/////////////////////////////////////////////////////////

// Match bits
enum MatchState {
    CREATING  = 0;
    PLAYING   = 1;
    FINISHING = 2;
}
enum MatchMode {
    DEFAULT   = 0;
    BLITZ     = 1;
    STRATEGIC = 2;
}

enum MatchStateMachine {
    PREPARE = 0;
    DECIDE = 1;
    EXECUTE = 2;
    FINISH = 3;
}

enum PlayerRole {
    DESTROYER   = 0;
    INTERCEPTOR = 1;
    CARRIER     = 2;
    COMMAND     = 3;
}

enum ItemAction {
    SELF   = 0;
    DIRECT = 1; // affects 1 tile
    LINEAR = 2; // affects a line of tiles 
    AREA   = 3; // affects tile + all adjacent
}

// General response message
message ResponseObject {
	enum Status {
		OK = 0;
		ERROR = 1;
	}
	required Status status = 1;
	optional string error = 2;
}

// Match info
message MatchInfo {
    message Player {
        required string name = 1;
    }
    required uint32 id = 1;
    required MatchState state = 2;
    repeated Player players = 3;
    required uint32 players_max = 4;
    required uint64 start_time = 5;
    required MatchMode mode = 6;
    required uint32 duration = 7;
    optional bytes extra = 8;
}

/////////////////////////////////////////////////////////

message AccountNewReq {
	required string email = 1;
	required string password = 2;
}

message AccountNewResp {
	enum Status {
		OK = 0;
		ERROR = 1;
	}
	required Status status = 1;
	optional string error = 2;
}

message AccountLoginReq {
	required string email = 1;
	required string password = 2;
}

message AccountLoginResp {
	enum Status {
		OK = 0;
		ERROR = 1;
	}
	required Status status = 1;
	message Player {
		required string name = 1;
	}
	repeated Player players = 2;
	optional string error = 3;
}

// opcode 0x1050
message PlayerNewReq {
	required string name = 1;
	required uint32 appearance = 2;
	required PlayerRole role = 3;
}

// opcode 0x1060 
message PlayerNewResp {
	enum Status {
		OK = 0;
		ERROR = 1;
	}
	required Status status = 1;
	optional string error = 3;
}

message PlayerAuthenticate {
	required bytes id = 1;
}

message PlayerLog {
	required string msg = 2;
}

message LobbyInfo {
    required ResponseObject resp = 1;
    repeated MatchInfo matches = 2;
}

message MatchCreateReq {
    required MatchMode mode = 1;
    required uint32 players_max = 2;
    optional bytes extra = 3;
}

message MatchCreateResp {
    required ResponseObject resp = 1;
    optional MatchInfo match = 2;
}

message MatchJoinReq {
    required string player = 1;
    required uint32 matchid = 2;
}

message MatchJoinResp {
    required ResponseObject resp = 1;
    optional MatchInfo match = 2;
}

message MatchLeaveReq {
    required string player = 1;
    required uint32 matchid = 2;
}

message MatchLeaveResp {
    required ResponseObject resp = 1;
}

message MatchStartReq {
    required string player = 1;
    required uint32 matchid = 2;
}

message MatchStartResp {
    required ResponseObject resp = 1;
}

message MatchInfoReq {
    required string player = 1;
    required uint32 matchid = 2;
} 

message MatchInfoResp {
    required ResponseObject resp = 1;
    optional MatchInfo match = 2;
} 

message MatchStateResp {
    message Tile {
        required int32 x = 1;
        required int32 y = 2;
        required string type = 3;
        repeated string occupant = 4;
        repeated string flags = 5;
    }
    message Action {
        required int32 phase = 1;
        required string name = 2;
        required ItemAction type = 3;
        required int32 x_from = 4;
        required int32 y_from = 5;
        required int32 x_to = 6;
        required int32 y_to = 7;
    }
    required MatchStateMachine state = 1;
    repeated Tile tile = 2;    
    repeated string playerlist = 3;
    repeated string readyplayers = 4;
    repeated Action actions = 5;
}

message MatchPrepReq {
    required string player = 1;
    required uint32 matchid = 2;
} 
message MatchPrepResp {
    required ResponseObject resp = 1;
} 

message MatchDecideReq {
    required string player = 1;
    required string actions = 2;
    required uint32 matchid = 3;
} 

message MatchDecideResp {
    required ResponseObject resp = 1;
} 
