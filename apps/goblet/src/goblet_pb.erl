%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(goblet_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([
    'enum_symbol_by_value_ResponseObject.Status'/1,
    'enum_value_by_symbol_ResponseObject.Status'/1
]).
-export([
    'enum_symbol_by_value_AccountNewResp.Status'/1,
    'enum_value_by_symbol_AccountNewResp.Status'/1
]).
-export([
    'enum_symbol_by_value_AccountLoginResp.Status'/1,
    'enum_value_by_symbol_AccountLoginResp.Status'/1
]).
-export([
    'enum_symbol_by_value_PlayerNewResp.Status'/1,
    'enum_value_by_symbol_PlayerNewResp.Status'/1
]).
-export([enum_symbol_by_value_GameObject/1, enum_value_by_symbol_GameObject/1]).
-export([
    'enum_symbol_by_value_ObjectGet.GameObject'/1,
    'enum_value_by_symbol_ObjectGet.GameObject'/1
]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("goblet_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ResponseObject.Status'() :: 'OK' | 'ERROR'.
-type 'AccountNewResp.Status'() :: 'OK' | 'ERROR'.
-type 'AccountLoginResp.Status'() :: 'OK' | 'ERROR'.
-type 'PlayerNewResp.Status'() :: 'OK' | 'ERROR'.
-type 'GameObject'() :: 'ROOM' | 'ENTITY' | 'SCRIPT'.
-type 'ObjectGet.GameObject'() :: 'ROOM' | 'ENTITY' | 'SCRIPT'.
-export_type([
    'ResponseObject.Status'/0,
    'AccountNewResp.Status'/0,
    'AccountLoginResp.Status'/0,
    'PlayerNewResp.Status'/0,
    'GameObject'/0,
    'ObjectGet.GameObject'/0
]).

%% message types
-type 'ResponseObject'() :: #'ResponseObject'{}.

-type 'Match'() :: #'Match'{}.

-type 'AccountNewReq'() :: #'AccountNewReq'{}.

-type 'AccountNewResp'() :: #'AccountNewResp'{}.

-type 'AccountLoginReq'() :: #'AccountLoginReq'{}.

-type 'AccountLoginResp.Player'() :: #'AccountLoginResp.Player'{}.

-type 'AccountLoginResp'() :: #'AccountLoginResp'{}.

-type 'PlayerNewReq'() :: #'PlayerNewReq'{}.

-type 'PlayerNewResp'() :: #'PlayerNewResp'{}.

-type 'PlayerAuthenticate'() :: #'PlayerAuthenticate'{}.

-type 'PlayerLog'() :: #'PlayerLog'{}.

-type 'LobbyInfo'() :: #'LobbyInfo'{}.

-type 'ObjectGet'() :: #'ObjectGet'{}.

-type 'ShellCommand'() :: #'ShellCommand'{}.

-type 'Room'() :: #'Room'{}.

-type 'Entity'() :: #'Entity'{}.

-type 'LuaScript'() :: #'LuaScript'{}.

-export_type([
    'ResponseObject'/0,
    'Match'/0,
    'AccountNewReq'/0,
    'AccountNewResp'/0,
    'AccountLoginReq'/0,
    'AccountLoginResp.Player'/0,
    'AccountLoginResp'/0,
    'PlayerNewReq'/0,
    'PlayerNewResp'/0,
    'PlayerAuthenticate'/0,
    'PlayerLog'/0,
    'LobbyInfo'/0,
    'ObjectGet'/0,
    'ShellCommand'/0,
    'Room'/0,
    'Entity'/0,
    'LuaScript'/0
]).

-spec encode_msg(
    #'ResponseObject'{}
    | #'Match'{}
    | #'AccountNewReq'{}
    | #'AccountNewResp'{}
    | #'AccountLoginReq'{}
    | #'AccountLoginResp.Player'{}
    | #'AccountLoginResp'{}
    | #'PlayerNewReq'{}
    | #'PlayerNewResp'{}
    | #'PlayerAuthenticate'{}
    | #'PlayerLog'{}
    | #'LobbyInfo'{}
    | #'ObjectGet'{}
    | #'ShellCommand'{}
    | #'Room'{}
    | #'Entity'{}
    | #'LuaScript'{}
) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(
    #'ResponseObject'{}
    | #'Match'{}
    | #'AccountNewReq'{}
    | #'AccountNewResp'{}
    | #'AccountLoginReq'{}
    | #'AccountLoginResp.Player'{}
    | #'AccountLoginResp'{}
    | #'PlayerNewReq'{}
    | #'PlayerNewResp'{}
    | #'PlayerAuthenticate'{}
    | #'PlayerLog'{}
    | #'LobbyInfo'{}
    | #'ObjectGet'{}
    | #'ShellCommand'{}
    | #'Room'{}
    | #'Entity'{}
    | #'LuaScript'{},
    atom() | list()
) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(
    #'ResponseObject'{}
    | #'Match'{}
    | #'AccountNewReq'{}
    | #'AccountNewResp'{}
    | #'AccountLoginReq'{}
    | #'AccountLoginResp.Player'{}
    | #'AccountLoginResp'{}
    | #'PlayerNewReq'{}
    | #'PlayerNewResp'{}
    | #'PlayerAuthenticate'{}
    | #'PlayerLog'{}
    | #'LobbyInfo'{}
    | #'ObjectGet'{}
    | #'ShellCommand'{}
    | #'Room'{}
    | #'Entity'{}
    | #'LuaScript'{},
    atom(),
    list()
) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ResponseObject' ->
            encode_msg_ResponseObject(
                id(Msg, TrUserData),
                TrUserData
            );
        'Match' ->
            encode_msg_Match(id(Msg, TrUserData), TrUserData);
        'AccountNewReq' ->
            encode_msg_AccountNewReq(
                id(Msg, TrUserData),
                TrUserData
            );
        'AccountNewResp' ->
            encode_msg_AccountNewResp(
                id(Msg, TrUserData),
                TrUserData
            );
        'AccountLoginReq' ->
            encode_msg_AccountLoginReq(
                id(Msg, TrUserData),
                TrUserData
            );
        'AccountLoginResp.Player' ->
            'encode_msg_AccountLoginResp.Player'(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        'AccountLoginResp' ->
            encode_msg_AccountLoginResp(
                id(Msg, TrUserData),
                TrUserData
            );
        'PlayerNewReq' ->
            encode_msg_PlayerNewReq(
                id(Msg, TrUserData),
                TrUserData
            );
        'PlayerNewResp' ->
            encode_msg_PlayerNewResp(
                id(Msg, TrUserData),
                TrUserData
            );
        'PlayerAuthenticate' ->
            encode_msg_PlayerAuthenticate(
                id(Msg, TrUserData),
                TrUserData
            );
        'PlayerLog' ->
            encode_msg_PlayerLog(id(Msg, TrUserData), TrUserData);
        'LobbyInfo' ->
            encode_msg_LobbyInfo(id(Msg, TrUserData), TrUserData);
        'ObjectGet' ->
            encode_msg_ObjectGet(id(Msg, TrUserData), TrUserData);
        'ShellCommand' ->
            encode_msg_ShellCommand(
                id(Msg, TrUserData),
                TrUserData
            );
        'Room' ->
            encode_msg_Room(id(Msg, TrUserData), TrUserData);
        'Entity' ->
            encode_msg_Entity(id(Msg, TrUserData), TrUserData);
        'LuaScript' ->
            encode_msg_LuaScript(id(Msg, TrUserData), TrUserData)
    end.

encode_msg_ResponseObject(Msg, TrUserData) ->
    encode_msg_ResponseObject(Msg, <<>>, TrUserData).

encode_msg_ResponseObject(
    #'ResponseObject'{
        status = F1,
        error = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        'e_enum_ResponseObject.Status'(
            TrF1,
            <<Bin/binary, 8>>,
            TrUserData
        )
    end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
            end
    end.

encode_msg_Match(Msg, TrUserData) ->
    encode_msg_Match(Msg, <<>>, TrUserData).

encode_msg_Match(
    #'Match'{
        id = F1,
        state = F2,
        players = F3,
        players_max = F4,
        start_time = F5,
        mode = F6,
        extra = F7
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
    end,
    B4 = begin
        TrF4 = id(F4, TrUserData),
        e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
    end,
    B5 = begin
        TrF5 = id(F5, TrUserData),
        e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
    end,
    B6 = begin
        TrF6 = id(F6, TrUserData),
        e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
    end,
    if
        F7 == undefined ->
            B6;
        true ->
            begin
                TrF7 = id(F7, TrUserData),
                e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
            end
    end.

encode_msg_AccountNewReq(Msg, TrUserData) ->
    encode_msg_AccountNewReq(Msg, <<>>, TrUserData).

encode_msg_AccountNewReq(
    #'AccountNewReq'{
        email = F1,
        password = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_AccountNewResp(Msg, TrUserData) ->
    encode_msg_AccountNewResp(Msg, <<>>, TrUserData).

encode_msg_AccountNewResp(
    #'AccountNewResp'{
        status = F1,
        error = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        'e_enum_AccountNewResp.Status'(
            TrF1,
            <<Bin/binary, 8>>,
            TrUserData
        )
    end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
            end
    end.

encode_msg_AccountLoginReq(Msg, TrUserData) ->
    encode_msg_AccountLoginReq(Msg, <<>>, TrUserData).

encode_msg_AccountLoginReq(
    #'AccountLoginReq'{
        email =
            F1,
        password = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_AccountLoginResp.Player'(Msg, TrUserData) ->
    'encode_msg_AccountLoginResp.Player'(
        Msg,
        <<>>,
        TrUserData
    ).

'encode_msg_AccountLoginResp.Player'(
    #'AccountLoginResp.Player'{
        name =
            F1
    },
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_AccountLoginResp(Msg, TrUserData) ->
    encode_msg_AccountLoginResp(Msg, <<>>, TrUserData).

encode_msg_AccountLoginResp(
    #'AccountLoginResp'{
        status =
            F1,
        players = F2,
        error = F3
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        'e_enum_AccountLoginResp.Status'(
            TrF1,
            <<Bin/binary, 8>>,
            TrUserData
        )
    end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] -> B1;
            true -> e_field_AccountLoginResp_players(TrF2, B1, TrUserData)
        end
    end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
            end
    end.

encode_msg_PlayerNewReq(Msg, TrUserData) ->
    encode_msg_PlayerNewReq(Msg, <<>>, TrUserData).

encode_msg_PlayerNewReq(
    #'PlayerNewReq'{
        name = F1,
        title = F2,
        appearance = F3,
        role = F4
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
    end,
    begin
        TrF4 = id(F4, TrUserData),
        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_PlayerNewResp(Msg, TrUserData) ->
    encode_msg_PlayerNewResp(Msg, <<>>, TrUserData).

encode_msg_PlayerNewResp(
    #'PlayerNewResp'{
        status = F1,
        error = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        'e_enum_PlayerNewResp.Status'(
            TrF1,
            <<Bin/binary, 8>>,
            TrUserData
        )
    end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
            end
    end.

encode_msg_PlayerAuthenticate(Msg, TrUserData) ->
    encode_msg_PlayerAuthenticate(Msg, <<>>, TrUserData).

encode_msg_PlayerAuthenticate(
    #'PlayerAuthenticate'{
        id =
            F1
    },
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_PlayerLog(Msg, TrUserData) ->
    encode_msg_PlayerLog(Msg, <<>>, TrUserData).

encode_msg_PlayerLog(
    #'PlayerLog'{msg = F1},
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
    end.

encode_msg_LobbyInfo(Msg, TrUserData) ->
    encode_msg_LobbyInfo(Msg, <<>>, TrUserData).

encode_msg_LobbyInfo(
    #'LobbyInfo'{
        resp = F1,
        matches = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_mfield_LobbyInfo_resp(
            TrF1,
            <<Bin/binary, 10>>,
            TrUserData
        )
    end,
    begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] -> B1;
            true -> e_field_LobbyInfo_matches(TrF2, B1, TrUserData)
        end
    end.

encode_msg_ObjectGet(Msg, TrUserData) ->
    encode_msg_ObjectGet(Msg, <<>>, TrUserData).

encode_msg_ObjectGet(
    #'ObjectGet'{
        id = F1,
        object = F2,
        oid = F3,
        name = F4
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        'e_enum_ObjectGet.GameObject'(
            TrF2,
            <<B1/binary, 16>>,
            TrUserData
        )
    end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
        end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
            end
    end.

encode_msg_ShellCommand(Msg, TrUserData) ->
    encode_msg_ShellCommand(Msg, <<>>, TrUserData).

encode_msg_ShellCommand(
    #'ShellCommand'{
        id = F1,
        command = F2
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_Room(Msg, TrUserData) ->
    encode_msg_Room(Msg, <<>>, TrUserData).

encode_msg_Room(
    #'Room'{
        name = F1,
        ownerid = F2,
        description = F3,
        backlink = F4,
        link = F5,
        entity = F6,
        script = F7
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
    end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end,
    B4 = begin
        TrF4 = id(F4, TrUserData),
        e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
    end,
    B5 = begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> e_field_Room_link(TrF5, B4, TrUserData)
        end
    end,
    B6 = begin
        TrF6 = id(F6, TrUserData),
        if
            TrF6 == [] -> B5;
            true -> e_field_Room_entity(TrF6, B5, TrUserData)
        end
    end,
    begin
        TrF7 = id(F7, TrUserData),
        if
            TrF7 == [] -> B6;
            true -> e_field_Room_script(TrF7, B6, TrUserData)
        end
    end.

encode_msg_Entity(Msg, TrUserData) ->
    encode_msg_Entity(Msg, <<>>, TrUserData).

encode_msg_Entity(
    #'Entity'{
        id = F1,
        name = F2,
        room = F3
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end,
    begin
        TrF3 = id(F3, TrUserData),
        e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_LuaScript(Msg, TrUserData) ->
    encode_msg_LuaScript(Msg, <<>>, TrUserData).

encode_msg_LuaScript(
    #'LuaScript'{
        id = F1,
        name = F2,
        content = F3
    },
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
        end,
    begin
        TrF3 = id(F3, TrUserData),
        e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

e_mfield_AccountLoginResp_players(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = 'encode_msg_AccountLoginResp.Player'(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AccountLoginResp_players(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_AccountLoginResp_players(
        id(
            Elem,
            TrUserData
        ),
        Bin2,
        TrUserData
    ),
    e_field_AccountLoginResp_players(
        Rest,
        Bin3,
        TrUserData
    );
e_field_AccountLoginResp_players(
    [],
    Bin,
    _TrUserData
) ->
    Bin.

e_mfield_LobbyInfo_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LobbyInfo_matches(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Match(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LobbyInfo_matches(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_LobbyInfo_matches(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_LobbyInfo_matches(Rest, Bin3, TrUserData);
e_field_LobbyInfo_matches([], Bin, _TrUserData) ->
    Bin.

e_field_Room_link([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_Room_link(Rest, Bin3, TrUserData);
e_field_Room_link([], Bin, _TrUserData) ->
    Bin.

e_mfield_Room_entity(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Entity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Room_entity([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_Room_entity(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_Room_entity(Rest, Bin3, TrUserData);
e_field_Room_entity([], Bin, _TrUserData) ->
    Bin.

e_mfield_Room_script(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LuaScript(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Room_script([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_Room_script(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_Room_script(Rest, Bin3, TrUserData);
e_field_Room_script([], Bin, _TrUserData) ->
    Bin.

'e_enum_ResponseObject.Status'(
    'OK',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_ResponseObject.Status'(
    'ERROR',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_ResponseObject.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_AccountNewResp.Status'(
    'OK',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_AccountNewResp.Status'(
    'ERROR',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_AccountNewResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_AccountLoginResp.Status'(
    'OK',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_AccountLoginResp.Status'(
    'ERROR',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_AccountLoginResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_PlayerNewResp.Status'('OK', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_PlayerNewResp.Status'(
    'ERROR',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_PlayerNewResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ObjectGet.GameObject'(
    'ROOM',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_ObjectGet.GameObject'(
    'ENTITY',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_ObjectGet.GameObject'(
    'SCRIPT',
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 2>>;
'e_enum_ObjectGet.GameObject'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ResponseObject', Bin, TrUserData) ->
    id(
        decode_msg_ResponseObject(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('Match', Bin, TrUserData) ->
    id(decode_msg_Match(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AccountNewReq', Bin, TrUserData) ->
    id(
        decode_msg_AccountNewReq(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('AccountNewResp', Bin, TrUserData) ->
    id(
        decode_msg_AccountNewResp(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('AccountLoginReq', Bin, TrUserData) ->
    id(
        decode_msg_AccountLoginReq(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(
    'AccountLoginResp.Player',
    Bin,
    TrUserData
) ->
    id(
        'decode_msg_AccountLoginResp.Player'(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    'AccountLoginResp',
    Bin,
    TrUserData
) ->
    id(
        decode_msg_AccountLoginResp(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('PlayerNewReq', Bin, TrUserData) ->
    id(
        decode_msg_PlayerNewReq(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('PlayerNewResp', Bin, TrUserData) ->
    id(
        decode_msg_PlayerNewResp(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(
    'PlayerAuthenticate',
    Bin,
    TrUserData
) ->
    id(
        decode_msg_PlayerAuthenticate(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('PlayerLog', Bin, TrUserData) ->
    id(decode_msg_PlayerLog(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LobbyInfo', Bin, TrUserData) ->
    id(decode_msg_LobbyInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ObjectGet', Bin, TrUserData) ->
    id(decode_msg_ObjectGet(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ShellCommand', Bin, TrUserData) ->
    id(
        decode_msg_ShellCommand(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('Room', Bin, TrUserData) ->
    id(decode_msg_Room(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Entity', Bin, TrUserData) ->
    id(decode_msg_Entity(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LuaScript', Bin, TrUserData) ->
    id(decode_msg_LuaScript(Bin, TrUserData), TrUserData).

decode_msg_ResponseObject(Bin, TrUserData) ->
    dfp_read_field_def_ResponseObject(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_ResponseObject(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_ResponseObject_status(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_ResponseObject(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_ResponseObject_error(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_ResponseObject(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'ResponseObject'{status = F@_1, error = F@_2};
dfp_read_field_def_ResponseObject(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_ResponseObject(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_ResponseObject(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_ResponseObject(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_ResponseObject(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_ResponseObject_status(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_ResponseObject_error(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ResponseObject(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_ResponseObject(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_ResponseObject(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_ResponseObject(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_ResponseObject(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_ResponseObject(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'ResponseObject'{status = F@_1, error = F@_2}.

d_field_ResponseObject_status(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_ResponseObject_status(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_ResponseObject_status(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_ResponseObject.Status'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl
                                N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_ResponseObject(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_ResponseObject_error(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_ResponseObject_error(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_ResponseObject_error(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_ResponseObject(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_ResponseObject(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_ResponseObject(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_ResponseObject(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_ResponseObject(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_ResponseObject(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_ResponseObject(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_ResponseObject(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseObject(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_ResponseObject(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseObject(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_ResponseObject(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_ResponseObject(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_ResponseObject(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_ResponseObject(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_Match(Bin, TrUserData) ->
    dfp_read_field_def_Match(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_Match(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_state(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_players(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_players_max(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_start_time(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_mode(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Match_extra(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Match(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _
) ->
    #'Match'{
        id = F@_1,
        state = F@_2,
        players = F@_3,
        players_max = F@_4,
        start_time = F@_5,
        mode = F@_6,
        extra = F@_7
    };
dfp_read_field_def_Match(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dg_read_field_def_Match(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

dg_read_field_def_Match(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_Match(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dg_read_field_def_Match(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_Match_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        18 ->
            d_field_Match_state(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        24 ->
            d_field_Match_players(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        32 ->
            d_field_Match_players_max(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        40 ->
            d_field_Match_start_time(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        50 ->
            d_field_Match_mode(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        58 ->
            d_field_Match_extra(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_Match(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                1 ->
                    skip_64_Match(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_Match(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                3 ->
                    skip_group_Match(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                5 ->
                    skip_32_Match(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_Match(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _
) ->
    #'Match'{
        id = F@_1,
        state = F@_2,
        players = F@_3,
        players_max = F@_4,
        start_time = F@_5,
        mode = F@_6,
        extra = F@_7
    }.

d_field_Match_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Match_state(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_state(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_state(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Match_players(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_players(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_players(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Match_players_max(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_players_max(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_players_max(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Match_start_time(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_start_time(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_start_time(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Match_mode(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_mode(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_mode(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        TrUserData
    ).

d_field_Match_extra(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Match_extra(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Match_extra(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Match(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        TrUserData
    ).

skip_varint_Match(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    skip_varint_Match(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
skip_varint_Match(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_Match(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_length_delimited_Match(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    skip_length_delimited_Match(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
skip_length_delimited_Match(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Match(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_group_Match(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Match(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_32_Match(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_Match(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_64_Match(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_Match(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

decode_msg_AccountNewReq(Bin, TrUserData) ->
    dfp_read_field_def_AccountNewReq(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_AccountNewReq(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_AccountNewReq_email(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_AccountNewReq(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_AccountNewReq_password(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_AccountNewReq(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'AccountNewReq'{email = F@_1, password = F@_2};
dfp_read_field_def_AccountNewReq(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_AccountNewReq(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_AccountNewReq(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_AccountNewReq(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_AccountNewReq(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_AccountNewReq_email(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_AccountNewReq_password(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_AccountNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_AccountNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_AccountNewReq(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_AccountNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_AccountNewReq(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'AccountNewReq'{email = F@_1, password = F@_2}.

d_field_AccountNewReq_email(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_AccountNewReq_email(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_AccountNewReq_email(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_AccountNewReq(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_AccountNewReq_password(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_AccountNewReq_password(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_AccountNewReq_password(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_AccountNewReq(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_AccountNewReq(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_AccountNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_AccountNewReq(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_AccountNewReq(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_AccountNewReq(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_AccountNewReq(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountNewReq(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_AccountNewReq(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountNewReq(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_AccountNewReq(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_AccountNewReq(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_AccountNewResp(Bin, TrUserData) ->
    dfp_read_field_def_AccountNewResp(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_AccountNewResp(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_AccountNewResp_status(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_AccountNewResp(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_AccountNewResp_error(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_AccountNewResp(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'AccountNewResp'{status = F@_1, error = F@_2};
dfp_read_field_def_AccountNewResp(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_AccountNewResp(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_AccountNewResp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_AccountNewResp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_AccountNewResp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_AccountNewResp_status(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_AccountNewResp_error(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_AccountNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_AccountNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_AccountNewResp(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_AccountNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_AccountNewResp(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'AccountNewResp'{status = F@_1, error = F@_2}.

d_field_AccountNewResp_status(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_AccountNewResp_status(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_AccountNewResp_status(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_AccountNewResp.Status'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl
                                N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_AccountNewResp(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_AccountNewResp_error(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_AccountNewResp_error(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_AccountNewResp_error(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_AccountNewResp(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_AccountNewResp(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_AccountNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_AccountNewResp(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_AccountNewResp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_AccountNewResp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_AccountNewResp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountNewResp(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_AccountNewResp(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountNewResp(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_AccountNewResp(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_AccountNewResp(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_AccountLoginReq(Bin, TrUserData) ->
    dfp_read_field_def_AccountLoginReq(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_AccountLoginReq(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_AccountLoginReq_email(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_AccountLoginReq(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_AccountLoginReq_password(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_AccountLoginReq(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'AccountLoginReq'{email = F@_1, password = F@_2};
dfp_read_field_def_AccountLoginReq(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_AccountLoginReq(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_AccountLoginReq(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_AccountLoginReq(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_AccountLoginReq(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_AccountLoginReq_email(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_AccountLoginReq_password(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountLoginReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_AccountLoginReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_AccountLoginReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_AccountLoginReq(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_AccountLoginReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_AccountLoginReq(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'AccountLoginReq'{email = F@_1, password = F@_2}.

d_field_AccountLoginReq_email(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_AccountLoginReq_email(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_AccountLoginReq_email(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_AccountLoginReq(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_AccountLoginReq_password(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_AccountLoginReq_password(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_AccountLoginReq_password(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_AccountLoginReq(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_AccountLoginReq(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_AccountLoginReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_AccountLoginReq(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountLoginReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_AccountLoginReq(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_AccountLoginReq(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_AccountLoginReq(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountLoginReq(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_AccountLoginReq(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountLoginReq(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_AccountLoginReq(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountLoginReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_AccountLoginReq(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_AccountLoginReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

'decode_msg_AccountLoginResp.Player'(Bin, TrUserData) ->
    'dfp_read_field_def_AccountLoginResp.Player'(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_AccountLoginResp.Player'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    'd_field_AccountLoginResp.Player_name'(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_AccountLoginResp.Player'(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #'AccountLoginResp.Player'{name = F@_1};
'dfp_read_field_def_AccountLoginResp.Player'(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    'dg_read_field_def_AccountLoginResp.Player'(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

'dg_read_field_def_AccountLoginResp.Player'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_AccountLoginResp.Player'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
'dg_read_field_def_AccountLoginResp.Player'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_AccountLoginResp.Player_name'(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_AccountLoginResp.Player'(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_AccountLoginResp.Player'(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_AccountLoginResp.Player'(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_AccountLoginResp.Player'(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_AccountLoginResp.Player'(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_AccountLoginResp.Player'(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #'AccountLoginResp.Player'{name = F@_1}.

'd_field_AccountLoginResp.Player_name'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_AccountLoginResp.Player_name'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
'd_field_AccountLoginResp.Player_name'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    'dfp_read_field_def_AccountLoginResp.Player'(
        RestF,
        0,
        0,
        NewFValue,
        TrUserData
    ).

'skip_varint_AccountLoginResp.Player'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    'skip_varint_AccountLoginResp.Player'(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
'skip_varint_AccountLoginResp.Player'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_AccountLoginResp.Player'(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

'skip_length_delimited_AccountLoginResp.Player'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_AccountLoginResp.Player'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
'skip_length_delimited_AccountLoginResp.Player'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AccountLoginResp.Player'(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

'skip_group_AccountLoginResp.Player'(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AccountLoginResp.Player'(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

'skip_32_AccountLoginResp.Player'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_AccountLoginResp.Player'(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

'skip_64_AccountLoginResp.Player'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_AccountLoginResp.Player'(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_AccountLoginResp(Bin, TrUserData) ->
    dfp_read_field_def_AccountLoginResp(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id([], TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_AccountLoginResp(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_AccountLoginResp_status(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_AccountLoginResp(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_AccountLoginResp_players(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_AccountLoginResp(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_AccountLoginResp_error(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_AccountLoginResp(
    <<>>,
    0,
    0,
    F@_1,
    R1,
    F@_3,
    TrUserData
) ->
    #'AccountLoginResp'{
        status = F@_1,
        players = lists_reverse(R1, TrUserData),
        error = F@_3
    };
dfp_read_field_def_AccountLoginResp(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_AccountLoginResp(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_AccountLoginResp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_AccountLoginResp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_AccountLoginResp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_AccountLoginResp_status(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            d_field_AccountLoginResp_players(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            d_field_AccountLoginResp_error(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountLoginResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_AccountLoginResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_AccountLoginResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_AccountLoginResp(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_AccountLoginResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_AccountLoginResp(
    <<>>,
    0,
    0,
    F@_1,
    R1,
    F@_3,
    TrUserData
) ->
    #'AccountLoginResp'{
        status = F@_1,
        players = lists_reverse(R1, TrUserData),
        error = F@_3
    }.

d_field_AccountLoginResp_status(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_AccountLoginResp_status(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_AccountLoginResp_status(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_AccountLoginResp.Status'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl
                                N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_AccountLoginResp(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_AccountLoginResp_players(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_AccountLoginResp_players(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_AccountLoginResp_players(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                'decode_msg_AccountLoginResp.Player'(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_AccountLoginResp(
        RestF,
        0,
        0,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        F@_3,
        TrUserData
    ).

d_field_AccountLoginResp_error(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_AccountLoginResp_error(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_AccountLoginResp_error(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_AccountLoginResp(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_AccountLoginResp(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_AccountLoginResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_AccountLoginResp(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_AccountLoginResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_AccountLoginResp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_AccountLoginResp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_AccountLoginResp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountLoginResp(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_AccountLoginResp(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountLoginResp(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_AccountLoginResp(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_AccountLoginResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_AccountLoginResp(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_AccountLoginResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_PlayerNewReq(Bin, TrUserData) ->
    dfp_read_field_def_PlayerNewReq(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_PlayerNewReq(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_PlayerNewReq_name(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_PlayerNewReq(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_PlayerNewReq_title(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_PlayerNewReq(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_PlayerNewReq_appearance(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_PlayerNewReq(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_PlayerNewReq_role(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_PlayerNewReq(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    #'PlayerNewReq'{
        name = F@_1,
        title = F@_2,
        appearance = F@_3,
        role = F@_4
    };
dfp_read_field_def_PlayerNewReq(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dg_read_field_def_PlayerNewReq(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

dg_read_field_def_PlayerNewReq(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_PlayerNewReq(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dg_read_field_def_PlayerNewReq(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_PlayerNewReq_name(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        18 ->
            d_field_PlayerNewReq_title(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        24 ->
            d_field_PlayerNewReq_appearance(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            d_field_PlayerNewReq_role(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    skip_64_PlayerNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_PlayerNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    skip_group_PlayerNewReq(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    skip_32_PlayerNewReq(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_PlayerNewReq(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    #'PlayerNewReq'{
        name = F@_1,
        title = F@_2,
        appearance = F@_3,
        role = F@_4
    }.

d_field_PlayerNewReq_name(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_PlayerNewReq_name(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_PlayerNewReq_name(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_PlayerNewReq(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_PlayerNewReq_title(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_PlayerNewReq_title(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_PlayerNewReq_title(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_PlayerNewReq(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_PlayerNewReq_appearance(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_PlayerNewReq_appearance(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_PlayerNewReq_appearance(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_PlayerNewReq(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

d_field_PlayerNewReq_role(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_PlayerNewReq_role(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_PlayerNewReq_role(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_PlayerNewReq(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

skip_varint_PlayerNewReq(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    skip_varint_PlayerNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_varint_PlayerNewReq(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_PlayerNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_length_delimited_PlayerNewReq(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    skip_length_delimited_PlayerNewReq(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_length_delimited_PlayerNewReq(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerNewReq(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_group_PlayerNewReq(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerNewReq(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_32_PlayerNewReq(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_PlayerNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_64_PlayerNewReq(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_PlayerNewReq(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

decode_msg_PlayerNewResp(Bin, TrUserData) ->
    dfp_read_field_def_PlayerNewResp(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_PlayerNewResp(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_PlayerNewResp_status(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_PlayerNewResp(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_PlayerNewResp_error(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_PlayerNewResp(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'PlayerNewResp'{status = F@_1, error = F@_2};
dfp_read_field_def_PlayerNewResp(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_PlayerNewResp(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_PlayerNewResp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_PlayerNewResp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_PlayerNewResp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_PlayerNewResp_status(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        26 ->
            d_field_PlayerNewResp_error(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_PlayerNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_PlayerNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_PlayerNewResp(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_PlayerNewResp(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_PlayerNewResp(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'PlayerNewResp'{status = F@_1, error = F@_2}.

d_field_PlayerNewResp_status(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_PlayerNewResp_status(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_PlayerNewResp_status(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_PlayerNewResp.Status'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl
                                N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_PlayerNewResp(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_PlayerNewResp_error(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_PlayerNewResp_error(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_PlayerNewResp_error(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_PlayerNewResp(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_PlayerNewResp(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_PlayerNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_PlayerNewResp(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_PlayerNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_PlayerNewResp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_PlayerNewResp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_PlayerNewResp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerNewResp(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_PlayerNewResp(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerNewResp(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_PlayerNewResp(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_PlayerNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_PlayerNewResp(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_PlayerNewResp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_PlayerAuthenticate(Bin, TrUserData) ->
    dfp_read_field_def_PlayerAuthenticate(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_PlayerAuthenticate(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_PlayerAuthenticate_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_PlayerAuthenticate(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #'PlayerAuthenticate'{id = F@_1};
dfp_read_field_def_PlayerAuthenticate(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_PlayerAuthenticate(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_PlayerAuthenticate(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_PlayerAuthenticate(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_PlayerAuthenticate(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_PlayerAuthenticate_id(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerAuthenticate(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_PlayerAuthenticate(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_PlayerAuthenticate(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_PlayerAuthenticate(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_PlayerAuthenticate(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PlayerAuthenticate(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #'PlayerAuthenticate'{id = F@_1}.

d_field_PlayerAuthenticate_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_PlayerAuthenticate_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_PlayerAuthenticate_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_PlayerAuthenticate(
        RestF,
        0,
        0,
        NewFValue,
        TrUserData
    ).

skip_varint_PlayerAuthenticate(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_PlayerAuthenticate(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_PlayerAuthenticate(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_PlayerAuthenticate(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_PlayerAuthenticate(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_PlayerAuthenticate(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_PlayerAuthenticate(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerAuthenticate(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_PlayerAuthenticate(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerAuthenticate(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_PlayerAuthenticate(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_PlayerAuthenticate(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_PlayerAuthenticate(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_PlayerAuthenticate(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_PlayerLog(Bin, TrUserData) ->
    dfp_read_field_def_PlayerLog(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_PlayerLog(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_PlayerLog_msg(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PlayerLog(<<>>, 0, 0, F@_1, _) ->
    #'PlayerLog'{msg = F@_1};
dfp_read_field_def_PlayerLog(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_PlayerLog(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_PlayerLog(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_PlayerLog(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_PlayerLog(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        18 ->
            d_field_PlayerLog_msg(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerLog(Rest, 0, 0, F@_1, TrUserData);
                1 ->
                    skip_64_PlayerLog(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_PlayerLog(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_PlayerLog(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_PlayerLog(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PlayerLog(<<>>, 0, 0, F@_1, _) ->
    #'PlayerLog'{msg = F@_1}.

d_field_PlayerLog_msg(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_PlayerLog_msg(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_PlayerLog_msg(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_PlayerLog(
        RestF,
        0,
        0,
        NewFValue,
        TrUserData
    ).

skip_varint_PlayerLog(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_PlayerLog(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PlayerLog(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_PlayerLog(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_PlayerLog(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_PlayerLog(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_PlayerLog(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerLog(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_PlayerLog(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerLog(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_PlayerLog(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_PlayerLog(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_PlayerLog(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_PlayerLog(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_LobbyInfo(Bin, TrUserData) ->
    dfp_read_field_def_LobbyInfo(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

dfp_read_field_def_LobbyInfo(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_LobbyInfo_resp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_LobbyInfo(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_LobbyInfo_matches(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_LobbyInfo(
    <<>>,
    0,
    0,
    F@_1,
    R1,
    TrUserData
) ->
    #'LobbyInfo'{
        resp = F@_1,
        matches = lists_reverse(R1, TrUserData)
    };
dfp_read_field_def_LobbyInfo(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_LobbyInfo(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_LobbyInfo(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_LobbyInfo(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_LobbyInfo(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_LobbyInfo_resp(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_LobbyInfo_matches(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_LobbyInfo(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_LobbyInfo(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_LobbyInfo(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_LobbyInfo(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_LobbyInfo(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_LobbyInfo(
    <<>>,
    0,
    0,
    F@_1,
    R1,
    TrUserData
) ->
    #'LobbyInfo'{
        resp = F@_1,
        matches = lists_reverse(R1, TrUserData)
    }.

d_field_LobbyInfo_resp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_LobbyInfo_resp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_LobbyInfo_resp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_ResponseObject(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_LobbyInfo(
        RestF,
        0,
        0,
        if
            Prev == undefined ->
                NewFValue;
            true ->
                merge_msg_ResponseObject(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        TrUserData
    ).

d_field_LobbyInfo_matches(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_LobbyInfo_matches(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_LobbyInfo_matches(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_Match(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_LobbyInfo(
        RestF,
        0,
        0,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

skip_varint_LobbyInfo(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_LobbyInfo(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_LobbyInfo(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_LobbyInfo(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_LobbyInfo(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_LobbyInfo(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_LobbyInfo(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LobbyInfo(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_LobbyInfo(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LobbyInfo(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_LobbyInfo(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_LobbyInfo(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_LobbyInfo(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_LobbyInfo(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_ObjectGet(Bin, TrUserData) ->
    dfp_read_field_def_ObjectGet(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_ObjectGet(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_ObjectGet_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_ObjectGet(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_ObjectGet_object(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_ObjectGet(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_ObjectGet_oid(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_ObjectGet(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_ObjectGet_name(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_ObjectGet(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    #'ObjectGet'{
        id = F@_1,
        object = F@_2,
        oid = F@_3,
        name = F@_4
    };
dfp_read_field_def_ObjectGet(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dg_read_field_def_ObjectGet(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

dg_read_field_def_ObjectGet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_ObjectGet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dg_read_field_def_ObjectGet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_ObjectGet_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            d_field_ObjectGet_object(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            d_field_ObjectGet_oid(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            d_field_ObjectGet_name(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ObjectGet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    skip_64_ObjectGet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_ObjectGet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    skip_group_ObjectGet(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    skip_32_ObjectGet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_ObjectGet(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    #'ObjectGet'{
        id = F@_1,
        object = F@_2,
        oid = F@_3,
        name = F@_4
    }.

d_field_ObjectGet_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_ObjectGet_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_ObjectGet_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_ObjectGet(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_ObjectGet_object(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_ObjectGet_object(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_ObjectGet_object(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_ObjectGet.GameObject'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl
                                N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_ObjectGet(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_ObjectGet_oid(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_ObjectGet_oid(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_ObjectGet_oid(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_ObjectGet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

d_field_ObjectGet_name(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_ObjectGet_name(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_ObjectGet_name(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_ObjectGet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

skip_varint_ObjectGet(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    skip_varint_ObjectGet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_varint_ObjectGet(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_ObjectGet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_length_delimited_ObjectGet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    skip_length_delimited_ObjectGet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_length_delimited_ObjectGet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ObjectGet(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_group_ObjectGet(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ObjectGet(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_32_ObjectGet(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_ObjectGet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_64_ObjectGet(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_ObjectGet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

decode_msg_ShellCommand(Bin, TrUserData) ->
    dfp_read_field_def_ShellCommand(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_ShellCommand(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_ShellCommand_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_ShellCommand(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_ShellCommand_command(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_ShellCommand(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'ShellCommand'{id = F@_1, command = F@_2};
dfp_read_field_def_ShellCommand(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_ShellCommand(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_ShellCommand(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_ShellCommand(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_ShellCommand(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_ShellCommand_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_ShellCommand_command(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ShellCommand(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_ShellCommand(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_ShellCommand(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_ShellCommand(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_ShellCommand(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_ShellCommand(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #'ShellCommand'{id = F@_1, command = F@_2}.

d_field_ShellCommand_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_ShellCommand_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_ShellCommand_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_ShellCommand(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_ShellCommand_command(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_ShellCommand_command(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_ShellCommand_command(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_ShellCommand(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_ShellCommand(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_ShellCommand(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_ShellCommand(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_ShellCommand(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_ShellCommand(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_ShellCommand(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_ShellCommand(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShellCommand(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_ShellCommand(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShellCommand(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_ShellCommand(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_ShellCommand(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_ShellCommand(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_ShellCommand(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_Room(Bin, TrUserData) ->
    dfp_read_field_def_Room(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

dfp_read_field_def_Room(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_name(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_ownerid(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_description(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_backlink(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_link(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_entity(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_Room_script(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_Room(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    R2,
    R3,
    TrUserData
) ->
    #'Room'{
        name = F@_1,
        ownerid = F@_2,
        description = F@_3,
        backlink = F@_4,
        link = lists_reverse(R1, TrUserData),
        entity = lists_reverse(R2, TrUserData),
        script = lists_reverse(R3, TrUserData)
    };
dfp_read_field_def_Room(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dg_read_field_def_Room(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

dg_read_field_def_Room(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_Room(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dg_read_field_def_Room(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_Room_name(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        18 ->
            d_field_Room_ownerid(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        26 ->
            d_field_Room_description(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        32 ->
            d_field_Room_backlink(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        42 ->
            d_field_Room_link(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        50 ->
            d_field_Room_entity(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        58 ->
            d_field_Room_script(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_Room(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                1 ->
                    skip_64_Room(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_Room(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                3 ->
                    skip_group_Room(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                5 ->
                    skip_32_Room(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_Room(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    R2,
    R3,
    TrUserData
) ->
    #'Room'{
        name = F@_1,
        ownerid = F@_2,
        description = F@_3,
        backlink = F@_4,
        link = lists_reverse(R1, TrUserData),
        entity = lists_reverse(R2, TrUserData),
        script = lists_reverse(R3, TrUserData)
    }.

d_field_Room_name(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_name(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_name(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Room_ownerid(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_ownerid(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_ownerid(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Room_description(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_description(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_description(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Room_backlink(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_backlink(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_backlink(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                X bsl N + Acc =/= 0,
                TrUserData
            ),
            Rest},
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Room_link(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_link(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_link(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_Room_entity(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_entity(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_entity(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    Prev,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_Entity(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        cons(NewFValue, Prev, TrUserData),
        F@_7,
        TrUserData
    ).

d_field_Room_script(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_Room_script(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_Room_script(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_LuaScript(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_Room(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

skip_varint_Room(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    skip_varint_Room(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
skip_varint_Room(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_Room(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_length_delimited_Room(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    skip_length_delimited_Room(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
skip_length_delimited_Room(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Room(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_group_Room(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Room(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_32_Room(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_Room(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_64_Room(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_Room(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

decode_msg_Entity(Bin, TrUserData) ->
    dfp_read_field_def_Entity(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_Entity(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_Entity_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_Entity(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_Entity_name(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_Entity(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_Entity_room(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_Entity(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #'Entity'{id = F@_1, name = F@_2, room = F@_3};
dfp_read_field_def_Entity(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_Entity(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_Entity(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_Entity(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_Entity(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_Entity_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            d_field_Entity_name(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            d_field_Entity_room(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_Entity(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_Entity(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_Entity(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_Entity(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_Entity(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Entity(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #'Entity'{id = F@_1, name = F@_2, room = F@_3}.

d_field_Entity_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_Entity_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_Entity_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Entity(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_Entity_name(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_Entity_name(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_Entity_name(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Entity(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_Entity_room(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_Entity_room(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_Entity_room(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_Entity(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_Entity(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_Entity(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_Entity(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_Entity(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_Entity(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_Entity(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_Entity(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Entity(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_Entity(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Entity(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_Entity(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_Entity(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_Entity(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_Entity(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_LuaScript(Bin, TrUserData) ->
    dfp_read_field_def_LuaScript(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_LuaScript(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_LuaScript_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_LuaScript(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_LuaScript_name(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_LuaScript(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_LuaScript_content(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_LuaScript(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #'LuaScript'{id = F@_1, name = F@_2, content = F@_3};
dfp_read_field_def_LuaScript(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_LuaScript(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_LuaScript(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_LuaScript(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_LuaScript(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_LuaScript_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            d_field_LuaScript_name(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            d_field_LuaScript_content(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_LuaScript(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_LuaScript(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_LuaScript(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_LuaScript(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_LuaScript(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_LuaScript(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #'LuaScript'{id = F@_1, name = F@_2, content = F@_3}.

d_field_LuaScript_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_LuaScript_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_LuaScript_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_LuaScript(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_LuaScript_name(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_LuaScript_name(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_LuaScript_name(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_LuaScript(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_LuaScript_content(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_LuaScript_content(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_LuaScript_content(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_LuaScript(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_LuaScript(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_LuaScript(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_LuaScript(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_LuaScript(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_LuaScript(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_LuaScript(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_LuaScript(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LuaScript(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_LuaScript(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LuaScript(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_LuaScript(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_LuaScript(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_LuaScript(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_LuaScript(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_enum_ResponseObject.Status'(0) -> 'OK';
'd_enum_ResponseObject.Status'(1) -> 'ERROR';
'd_enum_ResponseObject.Status'(V) -> V.

'd_enum_AccountNewResp.Status'(0) -> 'OK';
'd_enum_AccountNewResp.Status'(1) -> 'ERROR';
'd_enum_AccountNewResp.Status'(V) -> V.

'd_enum_AccountLoginResp.Status'(0) -> 'OK';
'd_enum_AccountLoginResp.Status'(1) -> 'ERROR';
'd_enum_AccountLoginResp.Status'(V) -> V.

'd_enum_PlayerNewResp.Status'(0) -> 'OK';
'd_enum_PlayerNewResp.Status'(1) -> 'ERROR';
'd_enum_PlayerNewResp.Status'(V) -> V.

'd_enum_ObjectGet.GameObject'(0) -> 'ROOM';
'd_enum_ObjectGet.GameObject'(1) -> 'ENTITY';
'd_enum_ObjectGet.GameObject'(2) -> 'SCRIPT';
'd_enum_ObjectGet.GameObject'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when
    element(1, Prev) =:= element(1, New),
    is_list(Opts)
->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ResponseObject' ->
            merge_msg_ResponseObject(Prev, New, TrUserData);
        'Match' ->
            merge_msg_Match(Prev, New, TrUserData);
        'AccountNewReq' ->
            merge_msg_AccountNewReq(Prev, New, TrUserData);
        'AccountNewResp' ->
            merge_msg_AccountNewResp(Prev, New, TrUserData);
        'AccountLoginReq' ->
            merge_msg_AccountLoginReq(Prev, New, TrUserData);
        'AccountLoginResp.Player' ->
            'merge_msg_AccountLoginResp.Player'(
                Prev,
                New,
                TrUserData
            );
        'AccountLoginResp' ->
            merge_msg_AccountLoginResp(Prev, New, TrUserData);
        'PlayerNewReq' ->
            merge_msg_PlayerNewReq(Prev, New, TrUserData);
        'PlayerNewResp' ->
            merge_msg_PlayerNewResp(Prev, New, TrUserData);
        'PlayerAuthenticate' ->
            merge_msg_PlayerAuthenticate(Prev, New, TrUserData);
        'PlayerLog' ->
            merge_msg_PlayerLog(Prev, New, TrUserData);
        'LobbyInfo' ->
            merge_msg_LobbyInfo(Prev, New, TrUserData);
        'ObjectGet' ->
            merge_msg_ObjectGet(Prev, New, TrUserData);
        'ShellCommand' ->
            merge_msg_ShellCommand(Prev, New, TrUserData);
        'Room' ->
            merge_msg_Room(Prev, New, TrUserData);
        'Entity' ->
            merge_msg_Entity(Prev, New, TrUserData);
        'LuaScript' ->
            merge_msg_LuaScript(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, merge_msg_ResponseObject/3}).
merge_msg_ResponseObject(
    #'ResponseObject'{
        error =
            PFerror
    },
    #'ResponseObject'{status = NFstatus, error = NFerror},
    _
) ->
    #'ResponseObject'{
        status = NFstatus,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end
    }.

-compile({nowarn_unused_function, merge_msg_Match/3}).
merge_msg_Match(
    #'Match'{extra = PFextra},
    #'Match'{
        id = NFid,
        state = NFstate,
        players = NFplayers,
        players_max = NFplayers_max,
        start_time = NFstart_time,
        mode = NFmode,
        extra = NFextra
    },
    _
) ->
    #'Match'{
        id = NFid,
        state = NFstate,
        players = NFplayers,
        players_max = NFplayers_max,
        start_time = NFstart_time,
        mode = NFmode,
        extra =
            if
                NFextra =:= undefined -> PFextra;
                true -> NFextra
            end
    }.

-compile({nowarn_unused_function, merge_msg_AccountNewReq/3}).
merge_msg_AccountNewReq(
    #'AccountNewReq'{},
    #'AccountNewReq'{
        email = NFemail,
        password = NFpassword
    },
    _
) ->
    #'AccountNewReq'{
        email = NFemail,
        password = NFpassword
    }.

-compile({nowarn_unused_function, merge_msg_AccountNewResp/3}).
merge_msg_AccountNewResp(
    #'AccountNewResp'{
        error =
            PFerror
    },
    #'AccountNewResp'{status = NFstatus, error = NFerror},
    _
) ->
    #'AccountNewResp'{
        status = NFstatus,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end
    }.

-compile({nowarn_unused_function, merge_msg_AccountLoginReq/3}).
merge_msg_AccountLoginReq(
    #'AccountLoginReq'{},
    #'AccountLoginReq'{
        email = NFemail,
        password = NFpassword
    },
    _
) ->
    #'AccountLoginReq'{
        email = NFemail,
        password = NFpassword
    }.

-compile({nowarn_unused_function, 'merge_msg_AccountLoginResp.Player'/3}).
'merge_msg_AccountLoginResp.Player'(
    #'AccountLoginResp.Player'{},
    #'AccountLoginResp.Player'{name = NFname},
    _
) ->
    #'AccountLoginResp.Player'{name = NFname}.

-compile({nowarn_unused_function, merge_msg_AccountLoginResp/3}).
merge_msg_AccountLoginResp(
    #'AccountLoginResp'{
        players =
            PFplayers,
        error = PFerror
    },
    #'AccountLoginResp'{
        status = NFstatus,
        players = NFplayers,
        error = NFerror
    },
    TrUserData
) ->
    #'AccountLoginResp'{
        status = NFstatus,
        players =
            if
                PFplayers /= undefined, NFplayers /= undefined ->
                    'erlang_++'(
                        PFplayers,
                        NFplayers,
                        TrUserData
                    );
                PFplayers == undefined ->
                    NFplayers;
                NFplayers == undefined ->
                    PFplayers
            end,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end
    }.

-compile({nowarn_unused_function, merge_msg_PlayerNewReq/3}).
merge_msg_PlayerNewReq(
    #'PlayerNewReq'{},
    #'PlayerNewReq'{
        name = NFname,
        title = NFtitle,
        appearance = NFappearance,
        role = NFrole
    },
    _
) ->
    #'PlayerNewReq'{
        name = NFname,
        title = NFtitle,
        appearance = NFappearance,
        role = NFrole
    }.

-compile({nowarn_unused_function, merge_msg_PlayerNewResp/3}).
merge_msg_PlayerNewResp(
    #'PlayerNewResp'{
        error =
            PFerror
    },
    #'PlayerNewResp'{status = NFstatus, error = NFerror},
    _
) ->
    #'PlayerNewResp'{
        status = NFstatus,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end
    }.

-compile({nowarn_unused_function, merge_msg_PlayerAuthenticate/3}).
merge_msg_PlayerAuthenticate(
    #'PlayerAuthenticate'{},
    #'PlayerAuthenticate'{id = NFid},
    _
) ->
    #'PlayerAuthenticate'{id = NFid}.

-compile({nowarn_unused_function, merge_msg_PlayerLog/3}).
merge_msg_PlayerLog(
    #'PlayerLog'{},
    #'PlayerLog'{msg = NFmsg},
    _
) ->
    #'PlayerLog'{msg = NFmsg}.

-compile({nowarn_unused_function, merge_msg_LobbyInfo/3}).
merge_msg_LobbyInfo(
    #'LobbyInfo'{
        resp = PFresp,
        matches = PFmatches
    },
    #'LobbyInfo'{resp = NFresp, matches = NFmatches},
    TrUserData
) ->
    #'LobbyInfo'{
        resp =
            merge_msg_ResponseObject(PFresp, NFresp, TrUserData),
        matches =
            if
                PFmatches /= undefined, NFmatches /= undefined ->
                    'erlang_++'(PFmatches, NFmatches, TrUserData);
                PFmatches == undefined ->
                    NFmatches;
                NFmatches == undefined ->
                    PFmatches
            end
    }.

-compile({nowarn_unused_function, merge_msg_ObjectGet/3}).
merge_msg_ObjectGet(
    #'ObjectGet'{
        oid = PFoid,
        name = PFname
    },
    #'ObjectGet'{
        id = NFid,
        object = NFobject,
        oid = NFoid,
        name = NFname
    },
    _
) ->
    #'ObjectGet'{
        id = NFid,
        object = NFobject,
        oid =
            if
                NFoid =:= undefined -> PFoid;
                true -> NFoid
            end,
        name =
            if
                NFname =:= undefined -> PFname;
                true -> NFname
            end
    }.

-compile({nowarn_unused_function, merge_msg_ShellCommand/3}).
merge_msg_ShellCommand(
    #'ShellCommand'{},
    #'ShellCommand'{id = NFid, command = NFcommand},
    _
) ->
    #'ShellCommand'{id = NFid, command = NFcommand}.

-compile({nowarn_unused_function, merge_msg_Room/3}).
merge_msg_Room(
    #'Room'{
        link = PFlink,
        entity = PFentity,
        script = PFscript
    },
    #'Room'{
        name = NFname,
        ownerid = NFownerid,
        description = NFdescription,
        backlink = NFbacklink,
        link = NFlink,
        entity = NFentity,
        script = NFscript
    },
    TrUserData
) ->
    #'Room'{
        name = NFname,
        ownerid = NFownerid,
        description = NFdescription,
        backlink = NFbacklink,
        link =
            if
                PFlink /= undefined, NFlink /= undefined ->
                    'erlang_++'(PFlink, NFlink, TrUserData);
                PFlink == undefined ->
                    NFlink;
                NFlink == undefined ->
                    PFlink
            end,
        entity =
            if
                PFentity /= undefined, NFentity /= undefined ->
                    'erlang_++'(PFentity, NFentity, TrUserData);
                PFentity == undefined ->
                    NFentity;
                NFentity == undefined ->
                    PFentity
            end,
        script =
            if
                PFscript /= undefined, NFscript /= undefined ->
                    'erlang_++'(PFscript, NFscript, TrUserData);
                PFscript == undefined ->
                    NFscript;
                NFscript == undefined ->
                    PFscript
            end
    }.

-compile({nowarn_unused_function, merge_msg_Entity/3}).
merge_msg_Entity(
    #'Entity'{},
    #'Entity'{id = NFid, name = NFname, room = NFroom},
    _
) ->
    #'Entity'{id = NFid, name = NFname, room = NFroom}.

-compile({nowarn_unused_function, merge_msg_LuaScript/3}).
merge_msg_LuaScript(
    #'LuaScript'{name = PFname},
    #'LuaScript'{
        id = NFid,
        name = NFname,
        content = NFcontent
    },
    _
) ->
    #'LuaScript'{
        id = NFid,
        name =
            if
                NFname =:= undefined -> PFname;
                true -> NFname
            end,
        content = NFcontent
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ResponseObject' ->
            v_msg_ResponseObject(Msg, [MsgName], TrUserData);
        'Match' ->
            v_msg_Match(Msg, [MsgName], TrUserData);
        'AccountNewReq' ->
            v_msg_AccountNewReq(Msg, [MsgName], TrUserData);
        'AccountNewResp' ->
            v_msg_AccountNewResp(Msg, [MsgName], TrUserData);
        'AccountLoginReq' ->
            v_msg_AccountLoginReq(Msg, [MsgName], TrUserData);
        'AccountLoginResp.Player' ->
            'v_msg_AccountLoginResp.Player'(
                Msg,
                [MsgName],
                TrUserData
            );
        'AccountLoginResp' ->
            v_msg_AccountLoginResp(Msg, [MsgName], TrUserData);
        'PlayerNewReq' ->
            v_msg_PlayerNewReq(Msg, [MsgName], TrUserData);
        'PlayerNewResp' ->
            v_msg_PlayerNewResp(Msg, [MsgName], TrUserData);
        'PlayerAuthenticate' ->
            v_msg_PlayerAuthenticate(Msg, [MsgName], TrUserData);
        'PlayerLog' ->
            v_msg_PlayerLog(Msg, [MsgName], TrUserData);
        'LobbyInfo' ->
            v_msg_LobbyInfo(Msg, [MsgName], TrUserData);
        'ObjectGet' ->
            v_msg_ObjectGet(Msg, [MsgName], TrUserData);
        'ShellCommand' ->
            v_msg_ShellCommand(Msg, [MsgName], TrUserData);
        'Room' ->
            v_msg_Room(Msg, [MsgName], TrUserData);
        'Entity' ->
            v_msg_Entity(Msg, [MsgName], TrUserData);
        'LuaScript' ->
            v_msg_LuaScript(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, v_msg_ResponseObject/3}).
-dialyzer({nowarn_function, v_msg_ResponseObject/3}).
v_msg_ResponseObject(
    #'ResponseObject'{
        status = F1,
        error = F2
    },
    Path,
    TrUserData
) ->
    'v_enum_ResponseObject.Status'(
        F1,
        [status | Path],
        TrUserData
    ),
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
v_msg_ResponseObject(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, 'ResponseObject'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_Match/3}).
-dialyzer({nowarn_function, v_msg_Match/3}).
v_msg_Match(
    #'Match'{
        id = F1,
        state = F2,
        players = F3,
        players_max = F4,
        start_time = F5,
        mode = F6,
        extra = F7
    },
    Path,
    TrUserData
) ->
    v_type_uint32(F1, [id | Path], TrUserData),
    v_type_string(F2, [state | Path], TrUserData),
    v_type_uint32(F3, [players | Path], TrUserData),
    v_type_uint32(F4, [players_max | Path], TrUserData),
    v_type_uint32(F5, [start_time | Path], TrUserData),
    v_type_string(F6, [mode | Path], TrUserData),
    if
        F7 == undefined -> ok;
        true -> v_type_bytes(F7, [extra | Path], TrUserData)
    end,
    ok;
v_msg_Match(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Match'}, X, Path).

-compile({nowarn_unused_function, v_msg_AccountNewReq/3}).
-dialyzer({nowarn_function, v_msg_AccountNewReq/3}).
v_msg_AccountNewReq(
    #'AccountNewReq'{
        email = F1,
        password = F2
    },
    Path,
    TrUserData
) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_AccountNewReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AccountNewReq'}, X, Path).

-compile({nowarn_unused_function, v_msg_AccountNewResp/3}).
-dialyzer({nowarn_function, v_msg_AccountNewResp/3}).
v_msg_AccountNewResp(
    #'AccountNewResp'{
        status = F1,
        error = F2
    },
    Path,
    TrUserData
) ->
    'v_enum_AccountNewResp.Status'(
        F1,
        [status | Path],
        TrUserData
    ),
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
v_msg_AccountNewResp(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, 'AccountNewResp'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_AccountLoginReq/3}).
-dialyzer({nowarn_function, v_msg_AccountLoginReq/3}).
v_msg_AccountLoginReq(
    #'AccountLoginReq'{
        email = F1,
        password = F2
    },
    Path,
    TrUserData
) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_AccountLoginReq(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, 'AccountLoginReq'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_msg_AccountLoginResp.Player'/3}).
-dialyzer({nowarn_function, 'v_msg_AccountLoginResp.Player'/3}).
'v_msg_AccountLoginResp.Player'(
    #'AccountLoginResp.Player'{
        name =
            F1
    },
    Path,
    TrUserData
) ->
    v_type_string(F1, [name | Path], TrUserData),
    ok;
'v_msg_AccountLoginResp.Player'(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, 'AccountLoginResp.Player'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_AccountLoginResp/3}).
-dialyzer({nowarn_function, v_msg_AccountLoginResp/3}).
v_msg_AccountLoginResp(
    #'AccountLoginResp'{
        status = F1,
        players = F2,
        error = F3
    },
    Path,
    TrUserData
) ->
    'v_enum_AccountLoginResp.Status'(
        F1,
        [status | Path],
        TrUserData
    ),
    if
        is_list(F2) ->
            _ = [
                'v_msg_AccountLoginResp.Player'(
                    Elem,
                    [players | Path],
                    TrUserData
                )
             || Elem <- F2
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, {msg, 'AccountLoginResp.Player'}},
                F2,
                [players | Path]
            )
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [error | Path], TrUserData)
    end,
    ok;
v_msg_AccountLoginResp(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, 'AccountLoginResp'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_PlayerNewReq/3}).
-dialyzer({nowarn_function, v_msg_PlayerNewReq/3}).
v_msg_PlayerNewReq(
    #'PlayerNewReq'{
        name = F1,
        title = F2,
        appearance = F3,
        role = F4
    },
    Path,
    TrUserData
) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_string(F2, [title | Path], TrUserData),
    v_type_uint32(F3, [appearance | Path], TrUserData),
    v_type_string(F4, [role | Path], TrUserData),
    ok;
v_msg_PlayerNewReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerNewReq'}, X, Path).

-compile({nowarn_unused_function, v_msg_PlayerNewResp/3}).
-dialyzer({nowarn_function, v_msg_PlayerNewResp/3}).
v_msg_PlayerNewResp(
    #'PlayerNewResp'{
        status = F1,
        error = F2
    },
    Path,
    TrUserData
) ->
    'v_enum_PlayerNewResp.Status'(
        F1,
        [status | Path],
        TrUserData
    ),
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
v_msg_PlayerNewResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerNewResp'}, X, Path).

-compile({nowarn_unused_function, v_msg_PlayerAuthenticate/3}).
-dialyzer({nowarn_function, v_msg_PlayerAuthenticate/3}).
v_msg_PlayerAuthenticate(
    #'PlayerAuthenticate'{id = F1},
    Path,
    TrUserData
) ->
    v_type_bytes(F1, [id | Path], TrUserData),
    ok;
v_msg_PlayerAuthenticate(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, 'PlayerAuthenticate'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_PlayerLog/3}).
-dialyzer({nowarn_function, v_msg_PlayerLog/3}).
v_msg_PlayerLog(
    #'PlayerLog'{msg = F1},
    Path,
    TrUserData
) ->
    v_type_string(F1, [msg | Path], TrUserData),
    ok;
v_msg_PlayerLog(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerLog'}, X, Path).

-compile({nowarn_unused_function, v_msg_LobbyInfo/3}).
-dialyzer({nowarn_function, v_msg_LobbyInfo/3}).
v_msg_LobbyInfo(
    #'LobbyInfo'{resp = F1, matches = F2},
    Path,
    TrUserData
) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    if
        is_list(F2) ->
            _ = [
                v_msg_Match(Elem, [matches | Path], TrUserData)
             || Elem <- F2
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, {msg, 'Match'}},
                F2,
                [matches | Path]
            )
    end,
    ok;
v_msg_LobbyInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LobbyInfo'}, X, Path).

-compile({nowarn_unused_function, v_msg_ObjectGet/3}).
-dialyzer({nowarn_function, v_msg_ObjectGet/3}).
v_msg_ObjectGet(
    #'ObjectGet'{
        id = F1,
        object = F2,
        oid = F3,
        name = F4
    },
    Path,
    TrUserData
) ->
    v_type_bytes(F1, [id | Path], TrUserData),
    'v_enum_ObjectGet.GameObject'(
        F2,
        [object | Path],
        TrUserData
    ),
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [oid | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_string(F4, [name | Path], TrUserData)
    end,
    ok;
v_msg_ObjectGet(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ObjectGet'}, X, Path).

-compile({nowarn_unused_function, v_msg_ShellCommand/3}).
-dialyzer({nowarn_function, v_msg_ShellCommand/3}).
v_msg_ShellCommand(
    #'ShellCommand'{
        id = F1,
        command = F2
    },
    Path,
    TrUserData
) ->
    v_type_bytes(F1, [id | Path], TrUserData),
    v_type_string(F2, [command | Path], TrUserData),
    ok;
v_msg_ShellCommand(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShellCommand'}, X, Path).

-compile({nowarn_unused_function, v_msg_Room/3}).
-dialyzer({nowarn_function, v_msg_Room/3}).
v_msg_Room(
    #'Room'{
        name = F1,
        ownerid = F2,
        description = F3,
        backlink = F4,
        link = F5,
        entity = F6,
        script = F7
    },
    Path,
    TrUserData
) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_bytes(F2, [ownerid | Path], TrUserData),
    v_type_string(F3, [description | Path], TrUserData),
    v_type_bool(F4, [backlink | Path], TrUserData),
    if
        is_list(F5) ->
            _ = [
                v_type_string(Elem, [link | Path], TrUserData)
             || Elem <- F5
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, string},
                F5,
                [link | Path]
            )
    end,
    if
        is_list(F6) ->
            _ = [
                v_msg_Entity(Elem, [entity | Path], TrUserData)
             || Elem <- F6
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, {msg, 'Entity'}},
                F6,
                [entity | Path]
            )
    end,
    if
        is_list(F7) ->
            _ = [
                v_msg_LuaScript(Elem, [script | Path], TrUserData)
             || Elem <- F7
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, {msg, 'LuaScript'}},
                F7,
                [script | Path]
            )
    end,
    ok;
v_msg_Room(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Room'}, X, Path).

-compile({nowarn_unused_function, v_msg_Entity/3}).
-dialyzer({nowarn_function, v_msg_Entity/3}).
v_msg_Entity(
    #'Entity'{id = F1, name = F2, room = F3},
    Path,
    TrUserData
) ->
    v_type_bytes(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_string(F3, [room | Path], TrUserData),
    ok;
v_msg_Entity(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Entity'}, X, Path).

-compile({nowarn_unused_function, v_msg_LuaScript/3}).
-dialyzer({nowarn_function, v_msg_LuaScript/3}).
v_msg_LuaScript(
    #'LuaScript'{
        id = F1,
        name = F2,
        content = F3
    },
    Path,
    TrUserData
) ->
    v_type_bytes(F1, [id | Path], TrUserData),
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [name | Path], TrUserData)
    end,
    v_type_string(F3, [content | Path], TrUserData),
    ok;
v_msg_LuaScript(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LuaScript'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_ResponseObject.Status'/3}).
-dialyzer({nowarn_function, 'v_enum_ResponseObject.Status'/3}).
'v_enum_ResponseObject.Status'(
    'OK',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_ResponseObject.Status'(
    'ERROR',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_ResponseObject.Status'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ResponseObject.Status'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'ResponseObject.Status'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_AccountNewResp.Status'/3}).
-dialyzer({nowarn_function, 'v_enum_AccountNewResp.Status'/3}).
'v_enum_AccountNewResp.Status'(
    'OK',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_AccountNewResp.Status'(
    'ERROR',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_AccountNewResp.Status'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_AccountNewResp.Status'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'AccountNewResp.Status'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_AccountLoginResp.Status'/3}).
-dialyzer({nowarn_function, 'v_enum_AccountLoginResp.Status'/3}).
'v_enum_AccountLoginResp.Status'(
    'OK',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_AccountLoginResp.Status'(
    'ERROR',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_AccountLoginResp.Status'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_AccountLoginResp.Status'(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {invalid_enum, 'AccountLoginResp.Status'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_PlayerNewResp.Status'/3}).
-dialyzer({nowarn_function, 'v_enum_PlayerNewResp.Status'/3}).
'v_enum_PlayerNewResp.Status'(
    'OK',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_PlayerNewResp.Status'(
    'ERROR',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_PlayerNewResp.Status'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_PlayerNewResp.Status'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'PlayerNewResp.Status'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_ObjectGet.GameObject'/3}).
-dialyzer({nowarn_function, 'v_enum_ObjectGet.GameObject'/3}).
'v_enum_ObjectGet.GameObject'(
    'ROOM',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_ObjectGet.GameObject'(
    'ENTITY',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_ObjectGet.GameObject'(
    'SCRIPT',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_ObjectGet.GameObject'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ObjectGet.GameObject'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'ObjectGet.GameObject'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_sint32/3}).
-dialyzer({nowarn_function, v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, sint32, signed, 32},
        N,
        Path
    );
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, sint32, signed, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_uint32/3}).
-dialyzer({nowarn_function, v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint32, unsigned, 32},
        N,
        Path
    );
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint32, unsigned, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_bool/3}).
-dialyzer({nowarn_function, v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    list_to_atom(
        lists:append(
            lists:join(
                ".",
                lists:map(
                    fun atom_to_list/1,
                    lists:reverse(PathR)
                )
            )
        )
    ).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{enum, 'ResponseObject.Status'}, [{'OK', 0}, {'ERROR', 1}]},
        {{enum, 'AccountNewResp.Status'}, [{'OK', 0}, {'ERROR', 1}]},
        {{enum, 'AccountLoginResp.Status'}, [{'OK', 0}, {'ERROR', 1}]},
        {{enum, 'PlayerNewResp.Status'}, [{'OK', 0}, {'ERROR', 1}]},
        {{enum, 'GameObject'}, [{'ROOM', 0}, {'ENTITY', 1}, {'SCRIPT', 2}]},
        {{enum, 'ObjectGet.GameObject'}, [{'ROOM', 0}, {'ENTITY', 1}, {'SCRIPT', 2}]},
        {{msg, 'ResponseObject'}, [
            #field{
                name = status,
                fnum = 1,
                rnum = 2,
                type = {enum, 'ResponseObject.Status'},
                occurrence = required,
                opts = []
            },
            #field{
                name = error,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'Match'}, [
            #field{
                name = id,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = required,
                opts = []
            },
            #field{
                name = state,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = players,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = required,
                opts = []
            },
            #field{
                name = players_max,
                fnum = 4,
                rnum = 5,
                type = uint32,
                occurrence = required,
                opts = []
            },
            #field{
                name = start_time,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = required,
                opts = []
            },
            #field{
                name = mode,
                fnum = 6,
                rnum = 7,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = extra,
                fnum = 7,
                rnum = 8,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'AccountNewReq'}, [
            #field{
                name = email,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = password,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'AccountNewResp'}, [
            #field{
                name = status,
                fnum = 1,
                rnum = 2,
                type = {enum, 'AccountNewResp.Status'},
                occurrence = required,
                opts = []
            },
            #field{
                name = error,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'AccountLoginReq'}, [
            #field{
                name = email,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = password,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'AccountLoginResp.Player'}, [
            #field{
                name = name,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'AccountLoginResp'}, [
            #field{
                name = status,
                fnum = 1,
                rnum = 2,
                type = {enum, 'AccountLoginResp.Status'},
                occurrence = required,
                opts = []
            },
            #field{
                name = players,
                fnum = 2,
                rnum = 3,
                type = {msg, 'AccountLoginResp.Player'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = error,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'PlayerNewReq'}, [
            #field{
                name = name,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = title,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = appearance,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = required,
                opts = []
            },
            #field{
                name = role,
                fnum = 4,
                rnum = 5,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'PlayerNewResp'}, [
            #field{
                name = status,
                fnum = 1,
                rnum = 2,
                type = {enum, 'PlayerNewResp.Status'},
                occurrence = required,
                opts = []
            },
            #field{
                name = error,
                fnum = 3,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'PlayerAuthenticate'}, [
            #field{
                name = id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'PlayerLog'}, [
            #field{
                name = msg,
                fnum = 2,
                rnum = 2,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'LobbyInfo'}, [
            #field{
                name = resp,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ResponseObject'},
                occurrence = required,
                opts = []
            },
            #field{
                name = matches,
                fnum = 2,
                rnum = 3,
                type = {msg, 'Match'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'ObjectGet'}, [
            #field{
                name = id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = required,
                opts = []
            },
            #field{
                name = object,
                fnum = 2,
                rnum = 3,
                type = {enum, 'ObjectGet.GameObject'},
                occurrence = required,
                opts = []
            },
            #field{
                name = oid,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = name,
                fnum = 4,
                rnum = 5,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ShellCommand'}, [
            #field{
                name = id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = required,
                opts = []
            },
            #field{
                name = command,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'Room'}, [
            #field{
                name = name,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = ownerid,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = required,
                opts = []
            },
            #field{
                name = description,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = backlink,
                fnum = 4,
                rnum = 5,
                type = bool,
                occurrence = required,
                opts = []
            },
            #field{
                name = link,
                fnum = 5,
                rnum = 6,
                type = string,
                occurrence = repeated,
                opts = []
            },
            #field{
                name = entity,
                fnum = 6,
                rnum = 7,
                type = {msg, 'Entity'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = script,
                fnum = 7,
                rnum = 8,
                type = {msg, 'LuaScript'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'Entity'}, [
            #field{
                name = id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = required,
                opts = []
            },
            #field{
                name = name,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = required,
                opts = []
            },
            #field{
                name = room,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = required,
                opts = []
            }
        ]},
        {{msg, 'LuaScript'}, [
            #field{
                name = id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = required,
                opts = []
            },
            #field{
                name = name,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = content,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = required,
                opts = []
            }
        ]}
    ].

get_msg_names() ->
    [
        'ResponseObject',
        'Match',
        'AccountNewReq',
        'AccountNewResp',
        'AccountLoginReq',
        'AccountLoginResp.Player',
        'AccountLoginResp',
        'PlayerNewReq',
        'PlayerNewResp',
        'PlayerAuthenticate',
        'PlayerLog',
        'LobbyInfo',
        'ObjectGet',
        'ShellCommand',
        'Room',
        'Entity',
        'LuaScript'
    ].

get_group_names() -> [].

get_msg_or_group_names() ->
    [
        'ResponseObject',
        'Match',
        'AccountNewReq',
        'AccountNewResp',
        'AccountLoginReq',
        'AccountLoginResp.Player',
        'AccountLoginResp',
        'PlayerNewReq',
        'PlayerNewResp',
        'PlayerAuthenticate',
        'PlayerLog',
        'LobbyInfo',
        'ObjectGet',
        'ShellCommand',
        'Room',
        'Entity',
        'LuaScript'
    ].

get_enum_names() ->
    [
        'ResponseObject.Status',
        'AccountNewResp.Status',
        'AccountLoginResp.Status',
        'PlayerNewResp.Status',
        'GameObject',
        'ObjectGet.GameObject'
    ].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def('ResponseObject') ->
    [
        #field{
            name = status,
            fnum = 1,
            rnum = 2,
            type = {enum, 'ResponseObject.Status'},
            occurrence = required,
            opts = []
        },
        #field{
            name = error,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('Match') ->
    [
        #field{
            name = id,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = required,
            opts = []
        },
        #field{
            name = state,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = players,
            fnum = 3,
            rnum = 4,
            type = uint32,
            occurrence = required,
            opts = []
        },
        #field{
            name = players_max,
            fnum = 4,
            rnum = 5,
            type = uint32,
            occurrence = required,
            opts = []
        },
        #field{
            name = start_time,
            fnum = 5,
            rnum = 6,
            type = uint32,
            occurrence = required,
            opts = []
        },
        #field{
            name = mode,
            fnum = 6,
            rnum = 7,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = extra,
            fnum = 7,
            rnum = 8,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('AccountNewReq') ->
    [
        #field{
            name = email,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = password,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('AccountNewResp') ->
    [
        #field{
            name = status,
            fnum = 1,
            rnum = 2,
            type = {enum, 'AccountNewResp.Status'},
            occurrence = required,
            opts = []
        },
        #field{
            name = error,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('AccountLoginReq') ->
    [
        #field{
            name = email,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = password,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('AccountLoginResp.Player') ->
    [
        #field{
            name = name,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('AccountLoginResp') ->
    [
        #field{
            name = status,
            fnum = 1,
            rnum = 2,
            type = {enum, 'AccountLoginResp.Status'},
            occurrence = required,
            opts = []
        },
        #field{
            name = players,
            fnum = 2,
            rnum = 3,
            type = {msg, 'AccountLoginResp.Player'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = error,
            fnum = 3,
            rnum = 4,
            type = string,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('PlayerNewReq') ->
    [
        #field{
            name = name,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = title,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = appearance,
            fnum = 3,
            rnum = 4,
            type = uint32,
            occurrence = required,
            opts = []
        },
        #field{
            name = role,
            fnum = 4,
            rnum = 5,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('PlayerNewResp') ->
    [
        #field{
            name = status,
            fnum = 1,
            rnum = 2,
            type = {enum, 'PlayerNewResp.Status'},
            occurrence = required,
            opts = []
        },
        #field{
            name = error,
            fnum = 3,
            rnum = 3,
            type = string,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('PlayerAuthenticate') ->
    [
        #field{
            name = id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('PlayerLog') ->
    [
        #field{
            name = msg,
            fnum = 2,
            rnum = 2,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('LobbyInfo') ->
    [
        #field{
            name = resp,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ResponseObject'},
            occurrence = required,
            opts = []
        },
        #field{
            name = matches,
            fnum = 2,
            rnum = 3,
            type = {msg, 'Match'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('ObjectGet') ->
    [
        #field{
            name = id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = required,
            opts = []
        },
        #field{
            name = object,
            fnum = 2,
            rnum = 3,
            type = {enum, 'ObjectGet.GameObject'},
            occurrence = required,
            opts = []
        },
        #field{
            name = oid,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = name,
            fnum = 4,
            rnum = 5,
            type = string,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ShellCommand') ->
    [
        #field{
            name = id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = required,
            opts = []
        },
        #field{
            name = command,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('Room') ->
    [
        #field{
            name = name,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = ownerid,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = required,
            opts = []
        },
        #field{
            name = description,
            fnum = 3,
            rnum = 4,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = backlink,
            fnum = 4,
            rnum = 5,
            type = bool,
            occurrence = required,
            opts = []
        },
        #field{
            name = link,
            fnum = 5,
            rnum = 6,
            type = string,
            occurrence = repeated,
            opts = []
        },
        #field{
            name = entity,
            fnum = 6,
            rnum = 7,
            type = {msg, 'Entity'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = script,
            fnum = 7,
            rnum = 8,
            type = {msg, 'LuaScript'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('Entity') ->
    [
        #field{
            name = id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = required,
            opts = []
        },
        #field{
            name = name,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = required,
            opts = []
        },
        #field{
            name = room,
            fnum = 3,
            rnum = 4,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def('LuaScript') ->
    [
        #field{
            name = id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = required,
            opts = []
        },
        #field{
            name = name,
            fnum = 2,
            rnum = 3,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = content,
            fnum = 3,
            rnum = 4,
            type = string,
            occurrence = required,
            opts = []
        }
    ];
find_msg_def(_) ->
    error.

find_enum_def('ResponseObject.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('AccountNewResp.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('AccountLoginResp.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('PlayerNewResp.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('GameObject') ->
    [{'ROOM', 0}, {'ENTITY', 1}, {'SCRIPT', 2}];
find_enum_def('ObjectGet.GameObject') ->
    [{'ROOM', 0}, {'ENTITY', 1}, {'SCRIPT', 2}];
find_enum_def(_) ->
    error.

enum_symbol_by_value('ResponseObject.Status', Value) ->
    'enum_symbol_by_value_ResponseObject.Status'(Value);
enum_symbol_by_value('AccountNewResp.Status', Value) ->
    'enum_symbol_by_value_AccountNewResp.Status'(Value);
enum_symbol_by_value(
    'AccountLoginResp.Status',
    Value
) ->
    'enum_symbol_by_value_AccountLoginResp.Status'(Value);
enum_symbol_by_value('PlayerNewResp.Status', Value) ->
    'enum_symbol_by_value_PlayerNewResp.Status'(Value);
enum_symbol_by_value('GameObject', Value) ->
    enum_symbol_by_value_GameObject(Value);
enum_symbol_by_value('ObjectGet.GameObject', Value) ->
    'enum_symbol_by_value_ObjectGet.GameObject'(Value).

enum_value_by_symbol('ResponseObject.Status', Sym) ->
    'enum_value_by_symbol_ResponseObject.Status'(Sym);
enum_value_by_symbol('AccountNewResp.Status', Sym) ->
    'enum_value_by_symbol_AccountNewResp.Status'(Sym);
enum_value_by_symbol('AccountLoginResp.Status', Sym) ->
    'enum_value_by_symbol_AccountLoginResp.Status'(Sym);
enum_value_by_symbol('PlayerNewResp.Status', Sym) ->
    'enum_value_by_symbol_PlayerNewResp.Status'(Sym);
enum_value_by_symbol('GameObject', Sym) ->
    enum_value_by_symbol_GameObject(Sym);
enum_value_by_symbol('ObjectGet.GameObject', Sym) ->
    'enum_value_by_symbol_ObjectGet.GameObject'(Sym).

'enum_symbol_by_value_ResponseObject.Status'(0) -> 'OK';
'enum_symbol_by_value_ResponseObject.Status'(1) -> 'ERROR'.

'enum_value_by_symbol_ResponseObject.Status'('OK') -> 0;
'enum_value_by_symbol_ResponseObject.Status'('ERROR') -> 1.

'enum_symbol_by_value_AccountNewResp.Status'(0) -> 'OK';
'enum_symbol_by_value_AccountNewResp.Status'(1) -> 'ERROR'.

'enum_value_by_symbol_AccountNewResp.Status'('OK') -> 0;
'enum_value_by_symbol_AccountNewResp.Status'('ERROR') -> 1.

'enum_symbol_by_value_AccountLoginResp.Status'(0) ->
    'OK';
'enum_symbol_by_value_AccountLoginResp.Status'(1) ->
    'ERROR'.

'enum_value_by_symbol_AccountLoginResp.Status'('OK') ->
    0;
'enum_value_by_symbol_AccountLoginResp.Status'('ERROR') ->
    1.

'enum_symbol_by_value_PlayerNewResp.Status'(0) -> 'OK';
'enum_symbol_by_value_PlayerNewResp.Status'(1) -> 'ERROR'.

'enum_value_by_symbol_PlayerNewResp.Status'('OK') -> 0;
'enum_value_by_symbol_PlayerNewResp.Status'('ERROR') -> 1.

enum_symbol_by_value_GameObject(0) -> 'ROOM';
enum_symbol_by_value_GameObject(1) -> 'ENTITY';
enum_symbol_by_value_GameObject(2) -> 'SCRIPT'.

enum_value_by_symbol_GameObject('ROOM') -> 0;
enum_value_by_symbol_GameObject('ENTITY') -> 1;
enum_value_by_symbol_GameObject('SCRIPT') -> 2.

'enum_symbol_by_value_ObjectGet.GameObject'(0) ->
    'ROOM';
'enum_symbol_by_value_ObjectGet.GameObject'(1) ->
    'ENTITY';
'enum_symbol_by_value_ObjectGet.GameObject'(2) ->
    'SCRIPT'.

'enum_value_by_symbol_ObjectGet.GameObject'('ROOM') ->
    0;
'enum_value_by_symbol_ObjectGet.GameObject'('ENTITY') ->
    1;
'enum_value_by_symbol_ObjectGet.GameObject'('SCRIPT') ->
    2.

get_service_names() -> [].

get_service_def(_) -> error.

get_rpc_names(_) -> error.

find_rpc_def(_, _) -> error.

-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"goblet.ResponseObject">>) -> 'ResponseObject';
fqbin_to_msg_name(<<"goblet.Match">>) -> 'Match';
fqbin_to_msg_name(<<"goblet.AccountNewReq">>) -> 'AccountNewReq';
fqbin_to_msg_name(<<"goblet.AccountNewResp">>) -> 'AccountNewResp';
fqbin_to_msg_name(<<"goblet.AccountLoginReq">>) -> 'AccountLoginReq';
fqbin_to_msg_name(<<"goblet.AccountLoginResp.Player">>) -> 'AccountLoginResp.Player';
fqbin_to_msg_name(<<"goblet.AccountLoginResp">>) -> 'AccountLoginResp';
fqbin_to_msg_name(<<"goblet.PlayerNewReq">>) -> 'PlayerNewReq';
fqbin_to_msg_name(<<"goblet.PlayerNewResp">>) -> 'PlayerNewResp';
fqbin_to_msg_name(<<"goblet.PlayerAuthenticate">>) -> 'PlayerAuthenticate';
fqbin_to_msg_name(<<"goblet.PlayerLog">>) -> 'PlayerLog';
fqbin_to_msg_name(<<"goblet.LobbyInfo">>) -> 'LobbyInfo';
fqbin_to_msg_name(<<"goblet.ObjectGet">>) -> 'ObjectGet';
fqbin_to_msg_name(<<"goblet.ShellCommand">>) -> 'ShellCommand';
fqbin_to_msg_name(<<"goblet.Room">>) -> 'Room';
fqbin_to_msg_name(<<"goblet.Entity">>) -> 'Entity';
fqbin_to_msg_name(<<"goblet.LuaScript">>) -> 'LuaScript';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('ResponseObject') -> <<"goblet.ResponseObject">>;
msg_name_to_fqbin('Match') -> <<"goblet.Match">>;
msg_name_to_fqbin('AccountNewReq') -> <<"goblet.AccountNewReq">>;
msg_name_to_fqbin('AccountNewResp') -> <<"goblet.AccountNewResp">>;
msg_name_to_fqbin('AccountLoginReq') -> <<"goblet.AccountLoginReq">>;
msg_name_to_fqbin('AccountLoginResp.Player') -> <<"goblet.AccountLoginResp.Player">>;
msg_name_to_fqbin('AccountLoginResp') -> <<"goblet.AccountLoginResp">>;
msg_name_to_fqbin('PlayerNewReq') -> <<"goblet.PlayerNewReq">>;
msg_name_to_fqbin('PlayerNewResp') -> <<"goblet.PlayerNewResp">>;
msg_name_to_fqbin('PlayerAuthenticate') -> <<"goblet.PlayerAuthenticate">>;
msg_name_to_fqbin('PlayerLog') -> <<"goblet.PlayerLog">>;
msg_name_to_fqbin('LobbyInfo') -> <<"goblet.LobbyInfo">>;
msg_name_to_fqbin('ObjectGet') -> <<"goblet.ObjectGet">>;
msg_name_to_fqbin('ShellCommand') -> <<"goblet.ShellCommand">>;
msg_name_to_fqbin('Room') -> <<"goblet.Room">>;
msg_name_to_fqbin('Entity') -> <<"goblet.Entity">>;
msg_name_to_fqbin('LuaScript') -> <<"goblet.LuaScript">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"goblet.ResponseObject.Status">>) -> 'ResponseObject.Status';
fqbin_to_enum_name(<<"goblet.AccountNewResp.Status">>) -> 'AccountNewResp.Status';
fqbin_to_enum_name(<<"goblet.AccountLoginResp.Status">>) -> 'AccountLoginResp.Status';
fqbin_to_enum_name(<<"goblet.PlayerNewResp.Status">>) -> 'PlayerNewResp.Status';
fqbin_to_enum_name(<<"goblet.GameObject">>) -> 'GameObject';
fqbin_to_enum_name(<<"goblet.ObjectGet.GameObject">>) -> 'ObjectGet.GameObject';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('ResponseObject.Status') -> <<"goblet.ResponseObject.Status">>;
enum_name_to_fqbin('AccountNewResp.Status') -> <<"goblet.AccountNewResp.Status">>;
enum_name_to_fqbin('AccountLoginResp.Status') -> <<"goblet.AccountLoginResp.Status">>;
enum_name_to_fqbin('PlayerNewResp.Status') -> <<"goblet.PlayerNewResp.Status">>;
enum_name_to_fqbin('GameObject') -> <<"goblet.GameObject">>;
enum_name_to_fqbin('ObjectGet.GameObject') -> <<"goblet.ObjectGet.GameObject">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> goblet.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.

source_basename() -> "goblet.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["goblet.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["goblet"].

get_msg_containment("goblet") ->
    [
        'AccountLoginReq',
        'AccountLoginResp',
        'AccountLoginResp.Player',
        'AccountNewReq',
        'AccountNewResp',
        'Entity',
        'LobbyInfo',
        'LuaScript',
        'Match',
        'ObjectGet',
        'PlayerAuthenticate',
        'PlayerLog',
        'PlayerNewReq',
        'PlayerNewResp',
        'ResponseObject',
        'Room',
        'ShellCommand'
    ];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("goblet") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("goblet") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("goblet") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).

get_enum_containment("goblet") ->
    [
        'AccountLoginResp.Status',
        'AccountNewResp.Status',
        'GameObject',
        'ObjectGet.GameObject',
        'PlayerNewResp.Status',
        'ResponseObject.Status'
    ];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerNewResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountNewResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountLoginResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerNewReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountNewReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountLoginReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountLoginResp.Player">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.ShellCommand">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.ResponseObject">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.ObjectGet">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.LuaScript">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerAuthenticate">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerLog">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.Match">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.Entity">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.Room">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.LobbyInfo">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"goblet.ResponseObject.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.PlayerNewResp.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.AccountNewResp.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.AccountLoginResp.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.ObjectGet.GameObject">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.GameObject">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4, 11, 2].
