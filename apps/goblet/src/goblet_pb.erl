%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(goblet_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_MatchState/1, enum_value_by_symbol_MatchState/1]).
-export([enum_symbol_by_value_MatchMode/1, enum_value_by_symbol_MatchMode/1]).
-export([enum_symbol_by_value_MatchStateMachine/1, enum_value_by_symbol_MatchStateMachine/1]).
-export([enum_symbol_by_value_PlayerRole/1, enum_value_by_symbol_PlayerRole/1]).
-export([enum_symbol_by_value_ItemAction/1, enum_value_by_symbol_ItemAction/1]).
-export(['enum_symbol_by_value_ResponseObject.Status'/1, 'enum_value_by_symbol_ResponseObject.Status'/1]).
-export(['enum_symbol_by_value_AccountNewResp.Status'/1, 'enum_value_by_symbol_AccountNewResp.Status'/1]).
-export(['enum_symbol_by_value_AccountLoginResp.Status'/1, 'enum_value_by_symbol_AccountLoginResp.Status'/1]).
-export(['enum_symbol_by_value_PlayerNewResp.Status'/1, 'enum_value_by_symbol_PlayerNewResp.Status'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("goblet_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'MatchState'() :: 'CREATING' | 'PLAYING' | 'FINISHING'.
-type 'MatchMode'() :: 'DEFAULT' | 'BLITZ' | 'STRATEGIC'.
-type 'MatchStateMachine'() :: 'PREPARE' | 'DECIDE' | 'EXECUTE' | 'FINISH'.
-type 'PlayerRole'() :: 'DESTROYER' | 'INTERCEPTOR' | 'CARRIER' | 'COMMAND'.
-type 'ItemAction'() :: 'SELF' | 'DIRECT' | 'LINEAR' | 'AREA'.
-type 'ResponseObject.Status'() :: 'OK' | 'ERROR'.
-type 'AccountNewResp.Status'() :: 'OK' | 'ERROR'.
-type 'AccountLoginResp.Status'() :: 'OK' | 'ERROR'.
-type 'PlayerNewResp.Status'() :: 'OK' | 'ERROR'.
-export_type(['MatchState'/0, 'MatchMode'/0, 'MatchStateMachine'/0, 'PlayerRole'/0, 'ItemAction'/0, 'ResponseObject.Status'/0, 'AccountNewResp.Status'/0, 'AccountLoginResp.Status'/0, 'PlayerNewResp.Status'/0]).

%% message types
-type 'ResponseObject'() :: #'ResponseObject'{}.

-type 'MatchInfo.Player'() :: #'MatchInfo.Player'{}.

-type 'MatchInfo'() :: #'MatchInfo'{}.

-type 'AccountNewReq'() :: #'AccountNewReq'{}.

-type 'AccountNewResp'() :: #'AccountNewResp'{}.

-type 'AccountLoginReq'() :: #'AccountLoginReq'{}.

-type 'AccountLoginResp.Player'() :: #'AccountLoginResp.Player'{}.

-type 'AccountLoginResp'() :: #'AccountLoginResp'{}.

-type 'PlayerNewReq'() :: #'PlayerNewReq'{}.

-type 'PlayerNewResp'() :: #'PlayerNewResp'{}.

-type 'PlayerAuthenticate'() :: #'PlayerAuthenticate'{}.

-type 'PlayerLog'() :: #'PlayerLog'{}.

-type 'LobbyInfo'() :: #'LobbyInfo'{}.

-type 'MatchCreateReq'() :: #'MatchCreateReq'{}.

-type 'MatchCreateResp'() :: #'MatchCreateResp'{}.

-type 'MatchJoinReq'() :: #'MatchJoinReq'{}.

-type 'MatchJoinResp'() :: #'MatchJoinResp'{}.

-type 'MatchLeaveReq'() :: #'MatchLeaveReq'{}.

-type 'MatchLeaveResp'() :: #'MatchLeaveResp'{}.

-type 'MatchStartReq'() :: #'MatchStartReq'{}.

-type 'MatchStartResp'() :: #'MatchStartResp'{}.

-type 'MatchInfoReq'() :: #'MatchInfoReq'{}.

-type 'MatchInfoResp'() :: #'MatchInfoResp'{}.

-type 'MatchStateResp.Tile'() :: #'MatchStateResp.Tile'{}.

-type 'MatchStateResp.Action'() :: #'MatchStateResp.Action'{}.

-type 'MatchStateResp'() :: #'MatchStateResp'{}.

-type 'MatchPrepReq'() :: #'MatchPrepReq'{}.

-type 'MatchPrepResp'() :: #'MatchPrepResp'{}.

-type 'MatchDecideReq'() :: #'MatchDecideReq'{}.

-type 'MatchDecideResp'() :: #'MatchDecideResp'{}.

-export_type(['ResponseObject'/0, 'MatchInfo.Player'/0, 'MatchInfo'/0, 'AccountNewReq'/0, 'AccountNewResp'/0, 'AccountLoginReq'/0, 'AccountLoginResp.Player'/0, 'AccountLoginResp'/0, 'PlayerNewReq'/0, 'PlayerNewResp'/0, 'PlayerAuthenticate'/0, 'PlayerLog'/0, 'LobbyInfo'/0, 'MatchCreateReq'/0, 'MatchCreateResp'/0, 'MatchJoinReq'/0, 'MatchJoinResp'/0, 'MatchLeaveReq'/0, 'MatchLeaveResp'/0, 'MatchStartReq'/0, 'MatchStartResp'/0, 'MatchInfoReq'/0, 'MatchInfoResp'/0, 'MatchStateResp.Tile'/0, 'MatchStateResp.Action'/0, 'MatchStateResp'/0, 'MatchPrepReq'/0, 'MatchPrepResp'/0, 'MatchDecideReq'/0, 'MatchDecideResp'/0]).

-spec encode_msg(#'ResponseObject'{} | #'MatchInfo.Player'{} | #'MatchInfo'{} | #'AccountNewReq'{} | #'AccountNewResp'{} | #'AccountLoginReq'{} | #'AccountLoginResp.Player'{} | #'AccountLoginResp'{} | #'PlayerNewReq'{} | #'PlayerNewResp'{} | #'PlayerAuthenticate'{} | #'PlayerLog'{} | #'LobbyInfo'{} | #'MatchCreateReq'{} | #'MatchCreateResp'{} | #'MatchJoinReq'{} | #'MatchJoinResp'{} | #'MatchLeaveReq'{} | #'MatchLeaveResp'{} | #'MatchStartReq'{} | #'MatchStartResp'{} | #'MatchInfoReq'{} | #'MatchInfoResp'{} | #'MatchStateResp.Tile'{} | #'MatchStateResp.Action'{} | #'MatchStateResp'{} | #'MatchPrepReq'{} | #'MatchPrepResp'{} | #'MatchDecideReq'{} | #'MatchDecideResp'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ResponseObject'{} | #'MatchInfo.Player'{} | #'MatchInfo'{} | #'AccountNewReq'{} | #'AccountNewResp'{} | #'AccountLoginReq'{} | #'AccountLoginResp.Player'{} | #'AccountLoginResp'{} | #'PlayerNewReq'{} | #'PlayerNewResp'{} | #'PlayerAuthenticate'{} | #'PlayerLog'{} | #'LobbyInfo'{} | #'MatchCreateReq'{} | #'MatchCreateResp'{} | #'MatchJoinReq'{} | #'MatchJoinResp'{} | #'MatchLeaveReq'{} | #'MatchLeaveResp'{} | #'MatchStartReq'{} | #'MatchStartResp'{} | #'MatchInfoReq'{} | #'MatchInfoResp'{} | #'MatchStateResp.Tile'{} | #'MatchStateResp.Action'{} | #'MatchStateResp'{} | #'MatchPrepReq'{} | #'MatchPrepResp'{} | #'MatchDecideReq'{} | #'MatchDecideResp'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ResponseObject'{} | #'MatchInfo.Player'{} | #'MatchInfo'{} | #'AccountNewReq'{} | #'AccountNewResp'{} | #'AccountLoginReq'{} | #'AccountLoginResp.Player'{} | #'AccountLoginResp'{} | #'PlayerNewReq'{} | #'PlayerNewResp'{} | #'PlayerAuthenticate'{} | #'PlayerLog'{} | #'LobbyInfo'{} | #'MatchCreateReq'{} | #'MatchCreateResp'{} | #'MatchJoinReq'{} | #'MatchJoinResp'{} | #'MatchLeaveReq'{} | #'MatchLeaveResp'{} | #'MatchStartReq'{} | #'MatchStartResp'{} | #'MatchInfoReq'{} | #'MatchInfoResp'{} | #'MatchStateResp.Tile'{} | #'MatchStateResp.Action'{} | #'MatchStateResp'{} | #'MatchPrepReq'{} | #'MatchPrepResp'{} | #'MatchDecideReq'{} | #'MatchDecideResp'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ResponseObject' ->
            encode_msg_ResponseObject(id(Msg, TrUserData),
                                      TrUserData);
        'MatchInfo.Player' ->
            'encode_msg_MatchInfo.Player'(id(Msg, TrUserData),
                                          TrUserData);
        'MatchInfo' ->
            encode_msg_MatchInfo(id(Msg, TrUserData), TrUserData);
        'AccountNewReq' ->
            encode_msg_AccountNewReq(id(Msg, TrUserData),
                                     TrUserData);
        'AccountNewResp' ->
            encode_msg_AccountNewResp(id(Msg, TrUserData),
                                      TrUserData);
        'AccountLoginReq' ->
            encode_msg_AccountLoginReq(id(Msg, TrUserData),
                                       TrUserData);
        'AccountLoginResp.Player' ->
            'encode_msg_AccountLoginResp.Player'(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        'AccountLoginResp' ->
            encode_msg_AccountLoginResp(id(Msg, TrUserData),
                                        TrUserData);
        'PlayerNewReq' ->
            encode_msg_PlayerNewReq(id(Msg, TrUserData),
                                    TrUserData);
        'PlayerNewResp' ->
            encode_msg_PlayerNewResp(id(Msg, TrUserData),
                                     TrUserData);
        'PlayerAuthenticate' ->
            encode_msg_PlayerAuthenticate(id(Msg, TrUserData),
                                          TrUserData);
        'PlayerLog' ->
            encode_msg_PlayerLog(id(Msg, TrUserData), TrUserData);
        'LobbyInfo' ->
            encode_msg_LobbyInfo(id(Msg, TrUserData), TrUserData);
        'MatchCreateReq' ->
            encode_msg_MatchCreateReq(id(Msg, TrUserData),
                                      TrUserData);
        'MatchCreateResp' ->
            encode_msg_MatchCreateResp(id(Msg, TrUserData),
                                       TrUserData);
        'MatchJoinReq' ->
            encode_msg_MatchJoinReq(id(Msg, TrUserData),
                                    TrUserData);
        'MatchJoinResp' ->
            encode_msg_MatchJoinResp(id(Msg, TrUserData),
                                     TrUserData);
        'MatchLeaveReq' ->
            encode_msg_MatchLeaveReq(id(Msg, TrUserData),
                                     TrUserData);
        'MatchLeaveResp' ->
            encode_msg_MatchLeaveResp(id(Msg, TrUserData),
                                      TrUserData);
        'MatchStartReq' ->
            encode_msg_MatchStartReq(id(Msg, TrUserData),
                                     TrUserData);
        'MatchStartResp' ->
            encode_msg_MatchStartResp(id(Msg, TrUserData),
                                      TrUserData);
        'MatchInfoReq' ->
            encode_msg_MatchInfoReq(id(Msg, TrUserData),
                                    TrUserData);
        'MatchInfoResp' ->
            encode_msg_MatchInfoResp(id(Msg, TrUserData),
                                     TrUserData);
        'MatchStateResp.Tile' ->
            'encode_msg_MatchStateResp.Tile'(id(Msg, TrUserData),
                                             TrUserData);
        'MatchStateResp.Action' ->
            'encode_msg_MatchStateResp.Action'(id(Msg, TrUserData),
                                               TrUserData);
        'MatchStateResp' ->
            encode_msg_MatchStateResp(id(Msg, TrUserData),
                                      TrUserData);
        'MatchPrepReq' ->
            encode_msg_MatchPrepReq(id(Msg, TrUserData),
                                    TrUserData);
        'MatchPrepResp' ->
            encode_msg_MatchPrepResp(id(Msg, TrUserData),
                                     TrUserData);
        'MatchDecideReq' ->
            encode_msg_MatchDecideReq(id(Msg, TrUserData),
                                      TrUserData);
        'MatchDecideResp' ->
            encode_msg_MatchDecideResp(id(Msg, TrUserData),
                                       TrUserData)
    end.


encode_msg_ResponseObject(Msg, TrUserData) ->
    encode_msg_ResponseObject(Msg, <<>>, TrUserData).


encode_msg_ResponseObject(#'ResponseObject'{status = F1,
                                            error = F2},
                          Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             'e_enum_ResponseObject.Status'(TrF1,
                                            <<Bin/binary, 8>>,
                                            TrUserData)
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
           end
    end.

'encode_msg_MatchInfo.Player'(Msg, TrUserData) ->
    'encode_msg_MatchInfo.Player'(Msg, <<>>, TrUserData).


'encode_msg_MatchInfo.Player'(#'MatchInfo.Player'{name =
                                                      F1},
                              Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_MatchInfo(Msg, TrUserData) ->
    encode_msg_MatchInfo(Msg, <<>>, TrUserData).


encode_msg_MatchInfo(#'MatchInfo'{id = F1, state = F2,
                                  players = F3, players_max = F4,
                                  start_time = F5, mode = F6, duration = F7,
                                  extra = F8},
                     Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             e_enum_MatchState(TrF2, <<B1/binary, 16>>, TrUserData)
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_MatchInfo_players(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             e_enum_MatchMode(TrF6, <<B5/binary, 48>>, TrUserData)
         end,
    B7 = begin
             TrF7 = id(F7, TrUserData),
             e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
         end,
    if F8 == undefined -> B7;
       true ->
           begin
               TrF8 = id(F8, TrUserData),
               e_type_bytes(TrF8, <<B7/binary, 66>>, TrUserData)
           end
    end.

encode_msg_AccountNewReq(Msg, TrUserData) ->
    encode_msg_AccountNewReq(Msg, <<>>, TrUserData).


encode_msg_AccountNewReq(#'AccountNewReq'{email = F1,
                                          password = F2},
                         Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_AccountNewResp(Msg, TrUserData) ->
    encode_msg_AccountNewResp(Msg, <<>>, TrUserData).


encode_msg_AccountNewResp(#'AccountNewResp'{status = F1,
                                            error = F2},
                          Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             'e_enum_AccountNewResp.Status'(TrF1,
                                            <<Bin/binary, 8>>,
                                            TrUserData)
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
           end
    end.

encode_msg_AccountLoginReq(Msg, TrUserData) ->
    encode_msg_AccountLoginReq(Msg, <<>>, TrUserData).


encode_msg_AccountLoginReq(#'AccountLoginReq'{email =
                                                  F1,
                                              password = F2},
                           Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_AccountLoginResp.Player'(Msg, TrUserData) ->
    'encode_msg_AccountLoginResp.Player'(Msg,
                                         <<>>,
                                         TrUserData).


'encode_msg_AccountLoginResp.Player'(#'AccountLoginResp.Player'{name
                                                                    = F1},
                                     Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_AccountLoginResp(Msg, TrUserData) ->
    encode_msg_AccountLoginResp(Msg, <<>>, TrUserData).


encode_msg_AccountLoginResp(#'AccountLoginResp'{status =
                                                    F1,
                                                players = F2, error = F3},
                            Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             'e_enum_AccountLoginResp.Status'(TrF1,
                                              <<Bin/binary, 8>>,
                                              TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true ->
                    e_field_AccountLoginResp_players(TrF2, B1, TrUserData)
             end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
           end
    end.

encode_msg_PlayerNewReq(Msg, TrUserData) ->
    encode_msg_PlayerNewReq(Msg, <<>>, TrUserData).


encode_msg_PlayerNewReq(#'PlayerNewReq'{name = F1,
                                        appearance = F2, role = F3},
                        Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
         end,
    begin
        TrF3 = id(F3, TrUserData),
        e_enum_PlayerRole(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_PlayerNewResp(Msg, TrUserData) ->
    encode_msg_PlayerNewResp(Msg, <<>>, TrUserData).


encode_msg_PlayerNewResp(#'PlayerNewResp'{status = F1,
                                          error = F2},
                         Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             'e_enum_PlayerNewResp.Status'(TrF1,
                                           <<Bin/binary, 8>>,
                                           TrUserData)
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
           end
    end.

encode_msg_PlayerAuthenticate(Msg, TrUserData) ->
    encode_msg_PlayerAuthenticate(Msg, <<>>, TrUserData).


encode_msg_PlayerAuthenticate(#'PlayerAuthenticate'{id =
                                                        F1},
                              Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_PlayerLog(Msg, TrUserData) ->
    encode_msg_PlayerLog(Msg, <<>>, TrUserData).


encode_msg_PlayerLog(#'PlayerLog'{msg = F1}, Bin,
                     TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
    end.

encode_msg_LobbyInfo(Msg, TrUserData) ->
    encode_msg_LobbyInfo(Msg, <<>>, TrUserData).


encode_msg_LobbyInfo(#'LobbyInfo'{resp = F1,
                                  matches = F2},
                     Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_mfield_LobbyInfo_resp(TrF1,
                                     <<Bin/binary, 10>>,
                                     TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_LobbyInfo_matches(TrF2, B1, TrUserData)
        end
    end.

encode_msg_MatchCreateReq(Msg, TrUserData) ->
    encode_msg_MatchCreateReq(Msg, <<>>, TrUserData).


encode_msg_MatchCreateReq(#'MatchCreateReq'{mode = F1,
                                            players_max = F2, extra = F3},
                          Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_enum_MatchMode(TrF1, <<Bin/binary, 8>>, TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
           end
    end.

encode_msg_MatchCreateResp(Msg, TrUserData) ->
    encode_msg_MatchCreateResp(Msg, <<>>, TrUserData).


encode_msg_MatchCreateResp(#'MatchCreateResp'{resp = F1,
                                              match = F2},
                           Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_mfield_MatchCreateResp_resp(TrF1,
                                           <<Bin/binary, 10>>,
                                           TrUserData)
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               e_mfield_MatchCreateResp_match(TrF2,
                                              <<B1/binary, 18>>,
                                              TrUserData)
           end
    end.

encode_msg_MatchJoinReq(Msg, TrUserData) ->
    encode_msg_MatchJoinReq(Msg, <<>>, TrUserData).


encode_msg_MatchJoinReq(#'MatchJoinReq'{player = F1,
                                        matchid = F2},
                        Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_MatchJoinResp(Msg, TrUserData) ->
    encode_msg_MatchJoinResp(Msg, <<>>, TrUserData).


encode_msg_MatchJoinResp(#'MatchJoinResp'{resp = F1,
                                          match = F2},
                         Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_mfield_MatchJoinResp_resp(TrF1,
                                         <<Bin/binary, 10>>,
                                         TrUserData)
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               e_mfield_MatchJoinResp_match(TrF2,
                                            <<B1/binary, 18>>,
                                            TrUserData)
           end
    end.

encode_msg_MatchLeaveReq(Msg, TrUserData) ->
    encode_msg_MatchLeaveReq(Msg, <<>>, TrUserData).


encode_msg_MatchLeaveReq(#'MatchLeaveReq'{player = F1,
                                          matchid = F2},
                         Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_MatchLeaveResp(Msg, TrUserData) ->
    encode_msg_MatchLeaveResp(Msg, <<>>, TrUserData).


encode_msg_MatchLeaveResp(#'MatchLeaveResp'{resp = F1},
                          Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_mfield_MatchLeaveResp_resp(TrF1,
                                     <<Bin/binary, 10>>,
                                     TrUserData)
    end.

encode_msg_MatchStartReq(Msg, TrUserData) ->
    encode_msg_MatchStartReq(Msg, <<>>, TrUserData).


encode_msg_MatchStartReq(#'MatchStartReq'{player = F1,
                                          matchid = F2},
                         Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_MatchStartResp(Msg, TrUserData) ->
    encode_msg_MatchStartResp(Msg, <<>>, TrUserData).


encode_msg_MatchStartResp(#'MatchStartResp'{resp = F1},
                          Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_mfield_MatchStartResp_resp(TrF1,
                                     <<Bin/binary, 10>>,
                                     TrUserData)
    end.

encode_msg_MatchInfoReq(Msg, TrUserData) ->
    encode_msg_MatchInfoReq(Msg, <<>>, TrUserData).


encode_msg_MatchInfoReq(#'MatchInfoReq'{player = F1,
                                        matchid = F2},
                        Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_MatchInfoResp(Msg, TrUserData) ->
    encode_msg_MatchInfoResp(Msg, <<>>, TrUserData).


encode_msg_MatchInfoResp(#'MatchInfoResp'{resp = F1,
                                          match = F2},
                         Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_mfield_MatchInfoResp_resp(TrF1,
                                         <<Bin/binary, 10>>,
                                         TrUserData)
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               e_mfield_MatchInfoResp_match(TrF2,
                                            <<B1/binary, 18>>,
                                            TrUserData)
           end
    end.

'encode_msg_MatchStateResp.Tile'(Msg, TrUserData) ->
    'encode_msg_MatchStateResp.Tile'(Msg, <<>>, TrUserData).


'encode_msg_MatchStateResp.Tile'(#'MatchStateResp.Tile'{x
                                                            = F1,
                                                        y = F2, type = F3,
                                                        occupant = F4,
                                                        flags = F5},
                                 Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true ->
                    'e_field_MatchStateResp.Tile_occupant'(TrF4,
                                                           B3,
                                                           TrUserData)
             end
         end,
    begin
        TrF5 = id(F5, TrUserData),
        if TrF5 == [] -> B4;
           true ->
               'e_field_MatchStateResp.Tile_flags'(TrF5,
                                                   B4,
                                                   TrUserData)
        end
    end.

'encode_msg_MatchStateResp.Action'(Msg, TrUserData) ->
    'encode_msg_MatchStateResp.Action'(Msg,
                                       <<>>,
                                       TrUserData).


'encode_msg_MatchStateResp.Action'(#'MatchStateResp.Action'{phase
                                                                = F1,
                                                            name = F2,
                                                            type = F3,
                                                            x_from = F4,
                                                            y_from = F5,
                                                            x_to = F6,
                                                            y_to = F7},
                                   Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             e_enum_ItemAction(TrF3, <<B2/binary, 24>>, TrUserData)
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
         end,
    begin
        TrF7 = id(F7, TrUserData),
        e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
    end.

encode_msg_MatchStateResp(Msg, TrUserData) ->
    encode_msg_MatchStateResp(Msg, <<>>, TrUserData).


encode_msg_MatchStateResp(#'MatchStateResp'{state = F1,
                                            tile = F2, playerlist = F3,
                                            readyplayers = F4, actions = F5},
                          Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_enum_MatchStateMachine(TrF1,
                                      <<Bin/binary, 8>>,
                                      TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true ->
                    e_field_MatchStateResp_tile(TrF2, B1, TrUserData)
             end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true ->
                    e_field_MatchStateResp_playerlist(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true ->
                    e_field_MatchStateResp_readyplayers(TrF4,
                                                        B3,
                                                        TrUserData)
             end
         end,
    begin
        TrF5 = id(F5, TrUserData),
        if TrF5 == [] -> B4;
           true ->
               e_field_MatchStateResp_actions(TrF5, B4, TrUserData)
        end
    end.

encode_msg_MatchPrepReq(Msg, TrUserData) ->
    encode_msg_MatchPrepReq(Msg, <<>>, TrUserData).


encode_msg_MatchPrepReq(#'MatchPrepReq'{player = F1,
                                        matchid = F2},
                        Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_MatchPrepResp(Msg, TrUserData) ->
    encode_msg_MatchPrepResp(Msg, <<>>, TrUserData).


encode_msg_MatchPrepResp(#'MatchPrepResp'{resp = F1},
                         Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_mfield_MatchPrepResp_resp(TrF1,
                                    <<Bin/binary, 10>>,
                                    TrUserData)
    end.

encode_msg_MatchDecideReq(Msg, TrUserData) ->
    encode_msg_MatchDecideReq(Msg, <<>>, TrUserData).


encode_msg_MatchDecideReq(#'MatchDecideReq'{player = F1,
                                            actions = F2, matchid = F3},
                          Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
         end,
    begin
        TrF3 = id(F3, TrUserData),
        e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_MatchDecideResp(Msg, TrUserData) ->
    encode_msg_MatchDecideResp(Msg, <<>>, TrUserData).


encode_msg_MatchDecideResp(#'MatchDecideResp'{resp =
                                                  F1},
                           Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        e_mfield_MatchDecideResp_resp(TrF1,
                                      <<Bin/binary, 10>>,
                                      TrUserData)
    end.

e_mfield_MatchInfo_players(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_MatchInfo.Player'(Msg,
                                           <<>>,
                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MatchInfo_players([Elem | Rest], Bin,
                          TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_MatchInfo_players(id(Elem, TrUserData),
                                      Bin2,
                                      TrUserData),
    e_field_MatchInfo_players(Rest, Bin3, TrUserData);
e_field_MatchInfo_players([], Bin, _TrUserData) -> Bin.

e_mfield_AccountLoginResp_players(Msg, Bin,
                                  TrUserData) ->
    SubBin = 'encode_msg_AccountLoginResp.Player'(Msg,
                                                  <<>>,
                                                  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AccountLoginResp_players([Elem | Rest], Bin,
                                 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_AccountLoginResp_players(id(Elem,
                                                TrUserData),
                                             Bin2,
                                             TrUserData),
    e_field_AccountLoginResp_players(Rest,
                                     Bin3,
                                     TrUserData);
e_field_AccountLoginResp_players([], Bin,
                                 _TrUserData) ->
    Bin.

e_mfield_LobbyInfo_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LobbyInfo_matches(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MatchInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LobbyInfo_matches([Elem | Rest], Bin,
                          TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_LobbyInfo_matches(id(Elem, TrUserData),
                                      Bin2,
                                      TrUserData),
    e_field_LobbyInfo_matches(Rest, Bin3, TrUserData);
e_field_LobbyInfo_matches([], Bin, _TrUserData) -> Bin.

e_mfield_MatchCreateResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchCreateResp_match(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MatchInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchJoinResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchJoinResp_match(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MatchInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchLeaveResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchStartResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchInfoResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchInfoResp_match(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MatchInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_MatchStateResp.Tile_occupant'([Elem | Rest],
                                       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    'e_field_MatchStateResp.Tile_occupant'(Rest,
                                           Bin3,
                                           TrUserData);
'e_field_MatchStateResp.Tile_occupant'([], Bin,
                                       _TrUserData) ->
    Bin.

'e_field_MatchStateResp.Tile_flags'([Elem | Rest], Bin,
                                    TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    'e_field_MatchStateResp.Tile_flags'(Rest,
                                        Bin3,
                                        TrUserData);
'e_field_MatchStateResp.Tile_flags'([], Bin,
                                    _TrUserData) ->
    Bin.

e_mfield_MatchStateResp_tile(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_MatchStateResp.Tile'(Msg,
                                              <<>>,
                                              TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MatchStateResp_tile([Elem | Rest], Bin,
                            TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MatchStateResp_tile(id(Elem,
                                           TrUserData),
                                        Bin2,
                                        TrUserData),
    e_field_MatchStateResp_tile(Rest, Bin3, TrUserData);
e_field_MatchStateResp_tile([], Bin, _TrUserData) ->
    Bin.

e_field_MatchStateResp_playerlist([Elem | Rest], Bin,
                                  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_MatchStateResp_playerlist(Rest,
                                      Bin3,
                                      TrUserData);
e_field_MatchStateResp_playerlist([], Bin,
                                  _TrUserData) ->
    Bin.

e_field_MatchStateResp_readyplayers([Elem | Rest], Bin,
                                    TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_MatchStateResp_readyplayers(Rest,
                                        Bin3,
                                        TrUserData);
e_field_MatchStateResp_readyplayers([], Bin,
                                    _TrUserData) ->
    Bin.

e_mfield_MatchStateResp_actions(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_MatchStateResp.Action'(Msg,
                                                <<>>,
                                                TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MatchStateResp_actions([Elem | Rest], Bin,
                               TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_MatchStateResp_actions(id(Elem,
                                              TrUserData),
                                           Bin2,
                                           TrUserData),
    e_field_MatchStateResp_actions(Rest, Bin3, TrUserData);
e_field_MatchStateResp_actions([], Bin, _TrUserData) ->
    Bin.

e_mfield_MatchPrepResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchDecideResp_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResponseObject(Msg,
                                       <<>>,
                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_MatchState('CREATING', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_MatchState('PLAYING', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_MatchState('FINISHING', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_MatchState(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_MatchMode('DEFAULT', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_MatchMode('BLITZ', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_MatchMode('STRATEGIC', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_MatchMode(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_MatchStateMachine('PREPARE', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_MatchStateMachine('DECIDE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_MatchStateMachine('EXECUTE', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_MatchStateMachine('FINISH', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_MatchStateMachine(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_PlayerRole('DESTROYER', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_PlayerRole('INTERCEPTOR', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_PlayerRole('CARRIER', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_PlayerRole('COMMAND', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_PlayerRole(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_ItemAction('SELF', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_ItemAction('DIRECT', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_ItemAction('LINEAR', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_ItemAction('AREA', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_ItemAction(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ResponseObject.Status'('OK', Bin,
                               _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ResponseObject.Status'('ERROR', Bin,
                               _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ResponseObject.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_AccountNewResp.Status'('OK', Bin,
                               _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_AccountNewResp.Status'('ERROR', Bin,
                               _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_AccountNewResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_AccountLoginResp.Status'('OK', Bin,
                                 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_AccountLoginResp.Status'('ERROR', Bin,
                                 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_AccountLoginResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_PlayerNewResp.Status'('OK', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_PlayerNewResp.Status'('ERROR', Bin,
                              _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_PlayerNewResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ResponseObject', Bin, TrUserData) ->
    id(decode_msg_ResponseObject(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchInfo.Player', Bin,
                  TrUserData) ->
    id('decode_msg_MatchInfo.Player'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchInfo', Bin, TrUserData) ->
    id(decode_msg_MatchInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AccountNewReq', Bin, TrUserData) ->
    id(decode_msg_AccountNewReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AccountNewResp', Bin, TrUserData) ->
    id(decode_msg_AccountNewResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AccountLoginReq', Bin, TrUserData) ->
    id(decode_msg_AccountLoginReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AccountLoginResp.Player', Bin,
                  TrUserData) ->
    id('decode_msg_AccountLoginResp.Player'(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit('AccountLoginResp', Bin,
                  TrUserData) ->
    id(decode_msg_AccountLoginResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PlayerNewReq', Bin, TrUserData) ->
    id(decode_msg_PlayerNewReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PlayerNewResp', Bin, TrUserData) ->
    id(decode_msg_PlayerNewResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PlayerAuthenticate', Bin,
                  TrUserData) ->
    id(decode_msg_PlayerAuthenticate(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PlayerLog', Bin, TrUserData) ->
    id(decode_msg_PlayerLog(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LobbyInfo', Bin, TrUserData) ->
    id(decode_msg_LobbyInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MatchCreateReq', Bin, TrUserData) ->
    id(decode_msg_MatchCreateReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchCreateResp', Bin, TrUserData) ->
    id(decode_msg_MatchCreateResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchJoinReq', Bin, TrUserData) ->
    id(decode_msg_MatchJoinReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchJoinResp', Bin, TrUserData) ->
    id(decode_msg_MatchJoinResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchLeaveReq', Bin, TrUserData) ->
    id(decode_msg_MatchLeaveReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchLeaveResp', Bin, TrUserData) ->
    id(decode_msg_MatchLeaveResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchStartReq', Bin, TrUserData) ->
    id(decode_msg_MatchStartReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchStartResp', Bin, TrUserData) ->
    id(decode_msg_MatchStartResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchInfoReq', Bin, TrUserData) ->
    id(decode_msg_MatchInfoReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchInfoResp', Bin, TrUserData) ->
    id(decode_msg_MatchInfoResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchStateResp.Tile', Bin,
                  TrUserData) ->
    id('decode_msg_MatchStateResp.Tile'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchStateResp.Action', Bin,
                  TrUserData) ->
    id('decode_msg_MatchStateResp.Action'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchStateResp', Bin, TrUserData) ->
    id(decode_msg_MatchStateResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchPrepReq', Bin, TrUserData) ->
    id(decode_msg_MatchPrepReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchPrepResp', Bin, TrUserData) ->
    id(decode_msg_MatchPrepResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchDecideReq', Bin, TrUserData) ->
    id(decode_msg_MatchDecideReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchDecideResp', Bin, TrUserData) ->
    id(decode_msg_MatchDecideResp(Bin, TrUserData),
       TrUserData).



decode_msg_ResponseObject(Bin, TrUserData) ->
    dfp_read_field_def_ResponseObject(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      TrUserData).

dfp_read_field_def_ResponseObject(<<8, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ResponseObject_status(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dfp_read_field_def_ResponseObject(<<18, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ResponseObject_error(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_ResponseObject(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    #'ResponseObject'{status = F@_1, error = F@_2};
dfp_read_field_def_ResponseObject(Other, Z1, Z2, F@_1,
                                  F@_2, TrUserData) ->
    dg_read_field_def_ResponseObject(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

dg_read_field_def_ResponseObject(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseObject(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
dg_read_field_def_ResponseObject(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_ResponseObject_status(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
        18 ->
            d_field_ResponseObject_error(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ResponseObject(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                1 ->
                    skip_64_ResponseObject(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
                2 ->
                    skip_length_delimited_ResponseObject(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                3 ->
                    skip_group_ResponseObject(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                5 ->
                    skip_32_ResponseObject(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData)
            end
    end;
dg_read_field_def_ResponseObject(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'ResponseObject'{status = F@_1, error = F@_2}.

d_field_ResponseObject_status(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResponseObject_status(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
d_field_ResponseObject_status(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_ResponseObject.Status'(begin
                                               <<Res:32/signed-native>> = <<(X
                                                                                 bsl
                                                                                 N
                                                                                 +
                                                                                 Acc):32/unsigned-native>>,
                                               id(Res, TrUserData)
                                           end),
            TrUserData),
         Rest},
    dfp_read_field_def_ResponseObject(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      TrUserData).

d_field_ResponseObject_error(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResponseObject_error(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_ResponseObject_error(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_ResponseObject(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      TrUserData).

skip_varint_ResponseObject(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ResponseObject(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData);
skip_varint_ResponseObject(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseObject(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_length_delimited_ResponseObject(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseObject(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
skip_length_delimited_ResponseObject(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseObject(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_group_ResponseObject(Bin, FNum, Z2, F@_1, F@_2,
                          TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseObject(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_32_ResponseObject(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseObject(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_64_ResponseObject(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseObject(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

'decode_msg_MatchInfo.Player'(Bin, TrUserData) ->
    'dfp_read_field_def_MatchInfo.Player'(Bin,
                                          0,
                                          0,
                                          id(undefined, TrUserData),
                                          TrUserData).

'dfp_read_field_def_MatchInfo.Player'(<<10,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    'd_field_MatchInfo.Player_name'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
'dfp_read_field_def_MatchInfo.Player'(<<>>, 0, 0, F@_1,
                                      _) ->
    #'MatchInfo.Player'{name = F@_1};
'dfp_read_field_def_MatchInfo.Player'(Other, Z1, Z2,
                                      F@_1, TrUserData) ->
    'dg_read_field_def_MatchInfo.Player'(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

'dg_read_field_def_MatchInfo.Player'(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_MatchInfo.Player'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
'dg_read_field_def_MatchInfo.Player'(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_MatchInfo.Player_name'(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_MatchInfo.Player'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                1 ->
                    'skip_64_MatchInfo.Player'(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
                2 ->
                    'skip_length_delimited_MatchInfo.Player'(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                3 ->
                    'skip_group_MatchInfo.Player'(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                5 ->
                    'skip_32_MatchInfo.Player'(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_MatchInfo.Player'(<<>>, 0, 0, F@_1,
                                     _) ->
    #'MatchInfo.Player'{name = F@_1}.

'd_field_MatchInfo.Player_name'(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_MatchInfo.Player_name'(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
'd_field_MatchInfo.Player_name'(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_MatchInfo.Player'(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          TrUserData).

'skip_varint_MatchInfo.Player'(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_MatchInfo.Player'(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData);
'skip_varint_MatchInfo.Player'(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_MatchInfo.Player'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

'skip_length_delimited_MatchInfo.Player'(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_MatchInfo.Player'(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
'skip_length_delimited_MatchInfo.Player'(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_MatchInfo.Player'(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          TrUserData).

'skip_group_MatchInfo.Player'(Bin, FNum, Z2, F@_1,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_MatchInfo.Player'(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          TrUserData).

'skip_32_MatchInfo.Player'(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_MatchInfo.Player'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

'skip_64_MatchInfo.Player'(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_MatchInfo.Player'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

decode_msg_MatchInfo(Bin, TrUserData) ->
    dfp_read_field_def_MatchInfo(Bin,
                                 0,
                                 0,
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id([], TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 TrUserData).

dfp_read_field_def_MatchInfo(<<8, Rest/binary>>, Z1, Z2,
                             F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_id(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         F@_6,
                         F@_7,
                         F@_8,
                         TrUserData);
dfp_read_field_def_MatchInfo(<<16, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_state(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            F@_8,
                            TrUserData);
dfp_read_field_def_MatchInfo(<<26, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_players(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              TrUserData);
dfp_read_field_def_MatchInfo(<<32, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_players_max(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  TrUserData);
dfp_read_field_def_MatchInfo(<<40, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_start_time(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData);
dfp_read_field_def_MatchInfo(<<48, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_mode(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           TrUserData);
dfp_read_field_def_MatchInfo(<<56, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_duration(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
dfp_read_field_def_MatchInfo(<<66, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_MatchInfo_extra(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            F@_8,
                            TrUserData);
dfp_read_field_def_MatchInfo(<<>>, 0, 0, F@_1, F@_2, R1,
                             F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    #'MatchInfo'{id = F@_1, state = F@_2,
                 players = lists_reverse(R1, TrUserData),
                 players_max = F@_4, start_time = F@_5, mode = F@_6,
                 duration = F@_7, extra = F@_8};
dfp_read_field_def_MatchInfo(Other, Z1, Z2, F@_1, F@_2,
                             F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dg_read_field_def_MatchInfo(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData).

dg_read_field_def_MatchInfo(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchInfo(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData);
dg_read_field_def_MatchInfo(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_MatchInfo_id(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData);
        16 ->
            d_field_MatchInfo_state(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    TrUserData);
        26 ->
            d_field_MatchInfo_players(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      TrUserData);
        32 ->
            d_field_MatchInfo_players_max(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          TrUserData);
        40 ->
            d_field_MatchInfo_start_time(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         TrUserData);
        48 ->
            d_field_MatchInfo_mode(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   TrUserData);
        56 ->
            d_field_MatchInfo_duration(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       TrUserData);
        66 ->
            d_field_MatchInfo_extra(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchInfo(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          TrUserData);
                1 ->
                    skip_64_MatchInfo(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      TrUserData);
                2 ->
                    skip_length_delimited_MatchInfo(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    TrUserData);
                3 ->
                    skip_group_MatchInfo(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         TrUserData);
                5 ->
                    skip_32_MatchInfo(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      TrUserData)
            end
    end;
dg_read_field_def_MatchInfo(<<>>, 0, 0, F@_1, F@_2, R1,
                            F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    #'MatchInfo'{id = F@_1, state = F@_2,
                 players = lists_reverse(R1, TrUserData),
                 players_max = F@_4, start_time = F@_5, mode = F@_6,
                 duration = F@_7, extra = F@_8}.

d_field_MatchInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                     TrUserData)
    when N < 57 ->
    d_field_MatchInfo_id(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         F@_6,
                         F@_7,
                         F@_8,
                         TrUserData);
d_field_MatchInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
                     _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_state(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                        TrUserData)
    when N < 57 ->
    d_field_MatchInfo_state(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            F@_8,
                            TrUserData);
d_field_MatchInfo_state(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                        TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MatchState(begin
                                                   <<Res:32/signed-native>> =
                                                       <<(X bsl N +
                                                              Acc):32/unsigned-native>>,
                                                   id(Res, TrUserData)
                                               end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 NewFValue,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_players(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                          TrUserData)
    when N < 57 ->
    d_field_MatchInfo_players(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              TrUserData);
d_field_MatchInfo_players(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8,
                          TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_MatchInfo.Player'(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 cons(NewFValue, Prev, TrUserData),
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_players_max(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, TrUserData)
    when N < 57 ->
    d_field_MatchInfo_players_max(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  TrUserData);
d_field_MatchInfo_players_max(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
                              F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 NewFValue,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_start_time(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, TrUserData)
    when N < 57 ->
    d_field_MatchInfo_start_time(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData);
d_field_MatchInfo_start_time(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
                             F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 NewFValue,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_mode(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       TrUserData)
    when N < 57 ->
    d_field_MatchInfo_mode(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           TrUserData);
d_field_MatchInfo_mode(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
                       TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MatchMode(begin
                                                  <<Res:32/signed-native>> =
                                                      <<(X bsl N +
                                                             Acc):32/unsigned-native>>,
                                                  id(Res, TrUserData)
                                              end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 NewFValue,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_duration(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData)
    when N < 57 ->
    d_field_MatchInfo_duration(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
d_field_MatchInfo_duration(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
                           TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 NewFValue,
                                 F@_8,
                                 TrUserData).

d_field_MatchInfo_extra(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                        TrUserData)
    when N < 57 ->
    d_field_MatchInfo_extra(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            F@_8,
                            TrUserData);
d_field_MatchInfo_extra(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 NewFValue,
                                 TrUserData).

skip_varint_MatchInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                      TrUserData) ->
    skip_varint_MatchInfo(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          F@_8,
                          TrUserData);
skip_varint_MatchInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                      TrUserData) ->
    dfp_read_field_def_MatchInfo(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_length_delimited_MatchInfo(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchInfo(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    TrUserData);
skip_length_delimited_MatchInfo(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchInfo(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_group_MatchInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                     F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchInfo(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_32_MatchInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_MatchInfo(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_64_MatchInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_MatchInfo(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

decode_msg_AccountNewReq(Bin, TrUserData) ->
    dfp_read_field_def_AccountNewReq(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_AccountNewReq(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AccountNewReq_email(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_AccountNewReq(<<18, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AccountNewReq_password(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dfp_read_field_def_AccountNewReq(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'AccountNewReq'{email = F@_1, password = F@_2};
dfp_read_field_def_AccountNewReq(Other, Z1, Z2, F@_1,
                                 F@_2, TrUserData) ->
    dg_read_field_def_AccountNewReq(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

dg_read_field_def_AccountNewReq(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AccountNewReq(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dg_read_field_def_AccountNewReq(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_AccountNewReq_email(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        18 ->
            d_field_AccountNewReq_password(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountNewReq(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                1 ->
                    skip_64_AccountNewReq(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                2 ->
                    skip_length_delimited_AccountNewReq(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                3 ->
                    skip_group_AccountNewReq(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                5 ->
                    skip_32_AccountNewReq(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData)
            end
    end;
dg_read_field_def_AccountNewReq(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'AccountNewReq'{email = F@_1, password = F@_2}.

d_field_AccountNewReq_email(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AccountNewReq_email(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_AccountNewReq_email(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_AccountNewReq(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     F@_2,
                                     TrUserData).

d_field_AccountNewReq_password(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AccountNewReq_password(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
d_field_AccountNewReq_password(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_AccountNewReq(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     NewFValue,
                                     TrUserData).

skip_varint_AccountNewReq(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AccountNewReq(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
skip_varint_AccountNewReq(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountNewReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_length_delimited_AccountNewReq(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AccountNewReq(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_length_delimited_AccountNewReq(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountNewReq(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_group_AccountNewReq(Bin, FNum, Z2, F@_1, F@_2,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountNewReq(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_32_AccountNewReq(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountNewReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_64_AccountNewReq(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountNewReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

decode_msg_AccountNewResp(Bin, TrUserData) ->
    dfp_read_field_def_AccountNewResp(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      TrUserData).

dfp_read_field_def_AccountNewResp(<<8, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AccountNewResp_status(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dfp_read_field_def_AccountNewResp(<<18, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AccountNewResp_error(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_AccountNewResp(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    #'AccountNewResp'{status = F@_1, error = F@_2};
dfp_read_field_def_AccountNewResp(Other, Z1, Z2, F@_1,
                                  F@_2, TrUserData) ->
    dg_read_field_def_AccountNewResp(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

dg_read_field_def_AccountNewResp(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AccountNewResp(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
dg_read_field_def_AccountNewResp(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_AccountNewResp_status(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
        18 ->
            d_field_AccountNewResp_error(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountNewResp(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                1 ->
                    skip_64_AccountNewResp(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
                2 ->
                    skip_length_delimited_AccountNewResp(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                3 ->
                    skip_group_AccountNewResp(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                5 ->
                    skip_32_AccountNewResp(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData)
            end
    end;
dg_read_field_def_AccountNewResp(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'AccountNewResp'{status = F@_1, error = F@_2}.

d_field_AccountNewResp_status(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AccountNewResp_status(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
d_field_AccountNewResp_status(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_AccountNewResp.Status'(begin
                                               <<Res:32/signed-native>> = <<(X
                                                                                 bsl
                                                                                 N
                                                                                 +
                                                                                 Acc):32/unsigned-native>>,
                                               id(Res, TrUserData)
                                           end),
            TrUserData),
         Rest},
    dfp_read_field_def_AccountNewResp(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      TrUserData).

d_field_AccountNewResp_error(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AccountNewResp_error(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_AccountNewResp_error(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_AccountNewResp(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      TrUserData).

skip_varint_AccountNewResp(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AccountNewResp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData);
skip_varint_AccountNewResp(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountNewResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_length_delimited_AccountNewResp(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AccountNewResp(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
skip_length_delimited_AccountNewResp(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountNewResp(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_group_AccountNewResp(Bin, FNum, Z2, F@_1, F@_2,
                          TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountNewResp(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_32_AccountNewResp(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountNewResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

skip_64_AccountNewResp(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountNewResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

decode_msg_AccountLoginReq(Bin, TrUserData) ->
    dfp_read_field_def_AccountLoginReq(Bin,
                                       0,
                                       0,
                                       id(undefined, TrUserData),
                                       id(undefined, TrUserData),
                                       TrUserData).

dfp_read_field_def_AccountLoginReq(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AccountLoginReq_email(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dfp_read_field_def_AccountLoginReq(<<18, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AccountLoginReq_password(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
dfp_read_field_def_AccountLoginReq(<<>>, 0, 0, F@_1,
                                   F@_2, _) ->
    #'AccountLoginReq'{email = F@_1, password = F@_2};
dfp_read_field_def_AccountLoginReq(Other, Z1, Z2, F@_1,
                                   F@_2, TrUserData) ->
    dg_read_field_def_AccountLoginReq(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

dg_read_field_def_AccountLoginReq(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AccountLoginReq(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
dg_read_field_def_AccountLoginReq(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_AccountLoginReq_email(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
        18 ->
            d_field_AccountLoginReq_password(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountLoginReq(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                1 ->
                    skip_64_AccountLoginReq(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                2 ->
                    skip_length_delimited_AccountLoginReq(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                3 ->
                    skip_group_AccountLoginReq(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                5 ->
                    skip_32_AccountLoginReq(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData)
            end
    end;
dg_read_field_def_AccountLoginReq(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    #'AccountLoginReq'{email = F@_1, password = F@_2}.

d_field_AccountLoginReq_email(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AccountLoginReq_email(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
d_field_AccountLoginReq_email(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_AccountLoginReq(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       F@_2,
                                       TrUserData).

d_field_AccountLoginReq_password(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AccountLoginReq_password(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
d_field_AccountLoginReq_password(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_AccountLoginReq(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       TrUserData).

skip_varint_AccountLoginReq(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AccountLoginReq(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
skip_varint_AccountLoginReq(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountLoginReq(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_length_delimited_AccountLoginReq(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AccountLoginReq(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_length_delimited_AccountLoginReq(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountLoginReq(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_group_AccountLoginReq(Bin, FNum, Z2, F@_1, F@_2,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountLoginReq(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_32_AccountLoginReq(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountLoginReq(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_64_AccountLoginReq(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AccountLoginReq(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

'decode_msg_AccountLoginResp.Player'(Bin, TrUserData) ->
    'dfp_read_field_def_AccountLoginResp.Player'(Bin,
                                                 0,
                                                 0,
                                                 id(undefined, TrUserData),
                                                 TrUserData).

'dfp_read_field_def_AccountLoginResp.Player'(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, TrUserData) ->
    'd_field_AccountLoginResp.Player_name'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
'dfp_read_field_def_AccountLoginResp.Player'(<<>>, 0, 0,
                                             F@_1, _) ->
    #'AccountLoginResp.Player'{name = F@_1};
'dfp_read_field_def_AccountLoginResp.Player'(Other, Z1,
                                             Z2, F@_1, TrUserData) ->
    'dg_read_field_def_AccountLoginResp.Player'(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

'dg_read_field_def_AccountLoginResp.Player'(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_AccountLoginResp.Player'(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
'dg_read_field_def_AccountLoginResp.Player'(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_AccountLoginResp.Player_name'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_AccountLoginResp.Player'(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                1 ->
                    'skip_64_AccountLoginResp.Player'(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                2 ->
                    'skip_length_delimited_AccountLoginResp.Player'(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
                3 ->
                    'skip_group_AccountLoginResp.Player'(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                5 ->
                    'skip_32_AccountLoginResp.Player'(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData)
            end
    end;
'dg_read_field_def_AccountLoginResp.Player'(<<>>, 0, 0,
                                            F@_1, _) ->
    #'AccountLoginResp.Player'{name = F@_1}.

'd_field_AccountLoginResp.Player_name'(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_AccountLoginResp.Player_name'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
'd_field_AccountLoginResp.Player_name'(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_AccountLoginResp.Player'(RestF,
                                                 0,
                                                 0,
                                                 NewFValue,
                                                 TrUserData).

'skip_varint_AccountLoginResp.Player'(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_AccountLoginResp.Player'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
'skip_varint_AccountLoginResp.Player'(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_AccountLoginResp.Player'(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

'skip_length_delimited_AccountLoginResp.Player'(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_AccountLoginResp.Player'(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    TrUserData);
'skip_length_delimited_AccountLoginResp.Player'(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AccountLoginResp.Player'(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData).

'skip_group_AccountLoginResp.Player'(Bin, FNum, Z2,
                                     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AccountLoginResp.Player'(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

'skip_32_AccountLoginResp.Player'(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_AccountLoginResp.Player'(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

'skip_64_AccountLoginResp.Player'(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_AccountLoginResp.Player'(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

decode_msg_AccountLoginResp(Bin, TrUserData) ->
    dfp_read_field_def_AccountLoginResp(Bin,
                                        0,
                                        0,
                                        id(undefined, TrUserData),
                                        id([], TrUserData),
                                        id(undefined, TrUserData),
                                        TrUserData).

dfp_read_field_def_AccountLoginResp(<<8, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AccountLoginResp_status(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
dfp_read_field_def_AccountLoginResp(<<18, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AccountLoginResp_players(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dfp_read_field_def_AccountLoginResp(<<26, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AccountLoginResp_error(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dfp_read_field_def_AccountLoginResp(<<>>, 0, 0, F@_1,
                                    R1, F@_3, TrUserData) ->
    #'AccountLoginResp'{status = F@_1,
                        players = lists_reverse(R1, TrUserData), error = F@_3};
dfp_read_field_def_AccountLoginResp(Other, Z1, Z2, F@_1,
                                    F@_2, F@_3, TrUserData) ->
    dg_read_field_def_AccountLoginResp(Other,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

dg_read_field_def_AccountLoginResp(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AccountLoginResp(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
dg_read_field_def_AccountLoginResp(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_AccountLoginResp_status(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
        18 ->
            d_field_AccountLoginResp_players(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
        26 ->
            d_field_AccountLoginResp_error(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AccountLoginResp(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
                1 ->
                    skip_64_AccountLoginResp(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
                2 ->
                    skip_length_delimited_AccountLoginResp(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
                3 ->
                    skip_group_AccountLoginResp(Rest,
                                                Key bsr 3,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
                5 ->
                    skip_32_AccountLoginResp(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData)
            end
    end;
dg_read_field_def_AccountLoginResp(<<>>, 0, 0, F@_1, R1,
                                   F@_3, TrUserData) ->
    #'AccountLoginResp'{status = F@_1,
                        players = lists_reverse(R1, TrUserData), error = F@_3}.

d_field_AccountLoginResp_status(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AccountLoginResp_status(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
d_field_AccountLoginResp_status(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_AccountLoginResp.Status'(begin
                                                 <<Res:32/signed-native>> = <<(X
                                                                                   bsl
                                                                                   N
                                                                                   +
                                                                                   Acc):32/unsigned-native>>,
                                                 id(Res, TrUserData)
                                             end),
            TrUserData),
         Rest},
    dfp_read_field_def_AccountLoginResp(RestF,
                                        0,
                                        0,
                                        NewFValue,
                                        F@_2,
                                        F@_3,
                                        TrUserData).

d_field_AccountLoginResp_players(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AccountLoginResp_players(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
d_field_AccountLoginResp_players(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_AccountLoginResp.Player'(Bs,
                                                                      TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_AccountLoginResp(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        cons(NewFValue, Prev, TrUserData),
                                        F@_3,
                                        TrUserData).

d_field_AccountLoginResp_error(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AccountLoginResp_error(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
d_field_AccountLoginResp_error(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_AccountLoginResp(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        NewFValue,
                                        TrUserData).

skip_varint_AccountLoginResp(<<1:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_AccountLoginResp(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
skip_varint_AccountLoginResp(<<0:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AccountLoginResp(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData).

skip_length_delimited_AccountLoginResp(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AccountLoginResp(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
skip_length_delimited_AccountLoginResp(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AccountLoginResp(Rest2,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData).

skip_group_AccountLoginResp(Bin, FNum, Z2, F@_1, F@_2,
                            F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AccountLoginResp(Rest,
                                        0,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData).

skip_32_AccountLoginResp(<<_:32, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AccountLoginResp(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData).

skip_64_AccountLoginResp(<<_:64, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AccountLoginResp(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData).

decode_msg_PlayerNewReq(Bin, TrUserData) ->
    dfp_read_field_def_PlayerNewReq(Bin,
                                    0,
                                    0,
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    TrUserData).

dfp_read_field_def_PlayerNewReq(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayerNewReq_name(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
dfp_read_field_def_PlayerNewReq(<<16, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayerNewReq_appearance(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
dfp_read_field_def_PlayerNewReq(<<24, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayerNewReq_role(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
dfp_read_field_def_PlayerNewReq(<<>>, 0, 0, F@_1, F@_2,
                                F@_3, _) ->
    #'PlayerNewReq'{name = F@_1, appearance = F@_2,
                    role = F@_3};
dfp_read_field_def_PlayerNewReq(Other, Z1, Z2, F@_1,
                                F@_2, F@_3, TrUserData) ->
    dg_read_field_def_PlayerNewReq(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

dg_read_field_def_PlayerNewReq(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayerNewReq(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dg_read_field_def_PlayerNewReq(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_PlayerNewReq_name(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
        16 ->
            d_field_PlayerNewReq_appearance(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
        24 ->
            d_field_PlayerNewReq_role(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerNewReq(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
                1 ->
                    skip_64_PlayerNewReq(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
                2 ->
                    skip_length_delimited_PlayerNewReq(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
                3 ->
                    skip_group_PlayerNewReq(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
                5 ->
                    skip_32_PlayerNewReq(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData)
            end
    end;
dg_read_field_def_PlayerNewReq(<<>>, 0, 0, F@_1, F@_2,
                               F@_3, _) ->
    #'PlayerNewReq'{name = F@_1, appearance = F@_2,
                    role = F@_3}.

d_field_PlayerNewReq_name(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayerNewReq_name(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
d_field_PlayerNewReq_name(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_PlayerNewReq(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    F@_3,
                                    TrUserData).

d_field_PlayerNewReq_appearance(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayerNewReq_appearance(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
d_field_PlayerNewReq_appearance(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_PlayerNewReq(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    F@_3,
                                    TrUserData).

d_field_PlayerNewReq_role(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayerNewReq_role(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
d_field_PlayerNewReq_role(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_PlayerRole(begin
                                                   <<Res:32/signed-native>> =
                                                       <<(X bsl N +
                                                              Acc):32/unsigned-native>>,
                                                   id(Res, TrUserData)
                                               end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_PlayerNewReq(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    NewFValue,
                                    TrUserData).

skip_varint_PlayerNewReq(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_PlayerNewReq(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             TrUserData);
skip_varint_PlayerNewReq(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayerNewReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData).

skip_length_delimited_PlayerNewReq(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayerNewReq(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
skip_length_delimited_PlayerNewReq(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerNewReq(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData).

skip_group_PlayerNewReq(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerNewReq(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData).

skip_32_PlayerNewReq(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayerNewReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData).

skip_64_PlayerNewReq(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayerNewReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData).

decode_msg_PlayerNewResp(Bin, TrUserData) ->
    dfp_read_field_def_PlayerNewResp(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_PlayerNewResp(<<8, Rest/binary>>, Z1,
                                 Z2, F@_1, F@_2, TrUserData) ->
    d_field_PlayerNewResp_status(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_PlayerNewResp(<<26, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_PlayerNewResp_error(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_PlayerNewResp(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'PlayerNewResp'{status = F@_1, error = F@_2};
dfp_read_field_def_PlayerNewResp(Other, Z1, Z2, F@_1,
                                 F@_2, TrUserData) ->
    dg_read_field_def_PlayerNewResp(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

dg_read_field_def_PlayerNewResp(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayerNewResp(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dg_read_field_def_PlayerNewResp(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_PlayerNewResp_status(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        26 ->
            d_field_PlayerNewResp_error(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerNewResp(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                1 ->
                    skip_64_PlayerNewResp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                2 ->
                    skip_length_delimited_PlayerNewResp(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                3 ->
                    skip_group_PlayerNewResp(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                5 ->
                    skip_32_PlayerNewResp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData)
            end
    end;
dg_read_field_def_PlayerNewResp(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'PlayerNewResp'{status = F@_1, error = F@_2}.

d_field_PlayerNewResp_status(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PlayerNewResp_status(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_PlayerNewResp_status(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_PlayerNewResp.Status'(begin
                                              <<Res:32/signed-native>> = <<(X
                                                                                bsl
                                                                                N
                                                                                +
                                                                                Acc):32/unsigned-native>>,
                                              id(Res, TrUserData)
                                          end),
            TrUserData),
         Rest},
    dfp_read_field_def_PlayerNewResp(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     F@_2,
                                     TrUserData).

d_field_PlayerNewResp_error(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PlayerNewResp_error(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_PlayerNewResp_error(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_PlayerNewResp(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     NewFValue,
                                     TrUserData).

skip_varint_PlayerNewResp(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_PlayerNewResp(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
skip_varint_PlayerNewResp(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayerNewResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_length_delimited_PlayerNewResp(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayerNewResp(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_length_delimited_PlayerNewResp(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerNewResp(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_group_PlayerNewResp(Bin, FNum, Z2, F@_1, F@_2,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerNewResp(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_32_PlayerNewResp(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayerNewResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_64_PlayerNewResp(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayerNewResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

decode_msg_PlayerAuthenticate(Bin, TrUserData) ->
    dfp_read_field_def_PlayerAuthenticate(Bin,
                                          0,
                                          0,
                                          id(undefined, TrUserData),
                                          TrUserData).

dfp_read_field_def_PlayerAuthenticate(<<10,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    d_field_PlayerAuthenticate_id(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData);
dfp_read_field_def_PlayerAuthenticate(<<>>, 0, 0, F@_1,
                                      _) ->
    #'PlayerAuthenticate'{id = F@_1};
dfp_read_field_def_PlayerAuthenticate(Other, Z1, Z2,
                                      F@_1, TrUserData) ->
    dg_read_field_def_PlayerAuthenticate(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

dg_read_field_def_PlayerAuthenticate(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayerAuthenticate(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
dg_read_field_def_PlayerAuthenticate(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_PlayerAuthenticate_id(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerAuthenticate(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                1 ->
                    skip_64_PlayerAuthenticate(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
                2 ->
                    skip_length_delimited_PlayerAuthenticate(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                3 ->
                    skip_group_PlayerAuthenticate(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                5 ->
                    skip_32_PlayerAuthenticate(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PlayerAuthenticate(<<>>, 0, 0, F@_1,
                                     _) ->
    #'PlayerAuthenticate'{id = F@_1}.

d_field_PlayerAuthenticate_id(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_PlayerAuthenticate_id(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  TrUserData);
d_field_PlayerAuthenticate_id(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_PlayerAuthenticate(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          TrUserData).

skip_varint_PlayerAuthenticate(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    skip_varint_PlayerAuthenticate(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData);
skip_varint_PlayerAuthenticate(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_PlayerAuthenticate(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

skip_length_delimited_PlayerAuthenticate(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayerAuthenticate(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
skip_length_delimited_PlayerAuthenticate(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerAuthenticate(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          TrUserData).

skip_group_PlayerAuthenticate(Bin, FNum, Z2, F@_1,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerAuthenticate(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          TrUserData).

skip_32_PlayerAuthenticate(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, TrUserData) ->
    dfp_read_field_def_PlayerAuthenticate(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

skip_64_PlayerAuthenticate(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, TrUserData) ->
    dfp_read_field_def_PlayerAuthenticate(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

decode_msg_PlayerLog(Bin, TrUserData) ->
    dfp_read_field_def_PlayerLog(Bin,
                                 0,
                                 0,
                                 id(undefined, TrUserData),
                                 TrUserData).

dfp_read_field_def_PlayerLog(<<18, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    d_field_PlayerLog_msg(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PlayerLog(<<>>, 0, 0, F@_1, _) ->
    #'PlayerLog'{msg = F@_1};
dfp_read_field_def_PlayerLog(Other, Z1, Z2, F@_1,
                             TrUserData) ->
    dg_read_field_def_PlayerLog(Other,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData).

dg_read_field_def_PlayerLog(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayerLog(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                TrUserData);
dg_read_field_def_PlayerLog(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        18 ->
            d_field_PlayerLog_msg(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PlayerLog(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_PlayerLog(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_PlayerLog(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                3 ->
                    skip_group_PlayerLog(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         TrUserData);
                5 -> skip_32_PlayerLog(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PlayerLog(<<>>, 0, 0, F@_1, _) ->
    #'PlayerLog'{msg = F@_1}.

d_field_PlayerLog_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, TrUserData)
    when N < 57 ->
    d_field_PlayerLog_msg(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          TrUserData);
d_field_PlayerLog_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
                      _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_PlayerLog(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 TrUserData).

skip_varint_PlayerLog(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    skip_varint_PlayerLog(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PlayerLog(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_PlayerLog(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

skip_length_delimited_PlayerLog(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayerLog(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
skip_length_delimited_PlayerLog(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerLog(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 TrUserData).

skip_group_PlayerLog(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerLog(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 TrUserData).

skip_32_PlayerLog(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  TrUserData) ->
    dfp_read_field_def_PlayerLog(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

skip_64_PlayerLog(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  TrUserData) ->
    dfp_read_field_def_PlayerLog(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

decode_msg_LobbyInfo(Bin, TrUserData) ->
    dfp_read_field_def_LobbyInfo(Bin,
                                 0,
                                 0,
                                 id(undefined, TrUserData),
                                 id([], TrUserData),
                                 TrUserData).

dfp_read_field_def_LobbyInfo(<<10, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    d_field_LobbyInfo_resp(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           TrUserData);
dfp_read_field_def_LobbyInfo(<<18, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    d_field_LobbyInfo_matches(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
dfp_read_field_def_LobbyInfo(<<>>, 0, 0, F@_1, R1,
                             TrUserData) ->
    #'LobbyInfo'{resp = F@_1,
                 matches = lists_reverse(R1, TrUserData)};
dfp_read_field_def_LobbyInfo(Other, Z1, Z2, F@_1, F@_2,
                             TrUserData) ->
    dg_read_field_def_LobbyInfo(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

dg_read_field_def_LobbyInfo(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LobbyInfo(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
dg_read_field_def_LobbyInfo(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_LobbyInfo_resp(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
        18 ->
            d_field_LobbyInfo_matches(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_LobbyInfo(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                1 ->
                    skip_64_LobbyInfo(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_LobbyInfo(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                3 ->
                    skip_group_LobbyInfo(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                5 ->
                    skip_32_LobbyInfo(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_LobbyInfo(<<>>, 0, 0, F@_1, R1,
                            TrUserData) ->
    #'LobbyInfo'{resp = F@_1,
                 matches = lists_reverse(R1, TrUserData)}.

d_field_LobbyInfo_resp(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LobbyInfo_resp(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           TrUserData);
d_field_LobbyInfo_resp(<<0:1, X:7, Rest/binary>>, N,
                       Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_LobbyInfo(RestF,
                                 0,
                                 0,
                                 if Prev == undefined -> NewFValue;
                                    true ->
                                        merge_msg_ResponseObject(Prev,
                                                                 NewFValue,
                                                                 TrUserData)
                                 end,
                                 F@_2,
                                 TrUserData).

d_field_LobbyInfo_matches(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LobbyInfo_matches(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              TrUserData);
d_field_LobbyInfo_matches(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_MatchInfo(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_LobbyInfo(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 cons(NewFValue, Prev, TrUserData),
                                 TrUserData).

skip_varint_LobbyInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    skip_varint_LobbyInfo(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          TrUserData);
skip_varint_LobbyInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LobbyInfo(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_length_delimited_LobbyInfo(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LobbyInfo(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
skip_length_delimited_LobbyInfo(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LobbyInfo(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_group_LobbyInfo(Bin, FNum, Z2, F@_1, F@_2,
                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LobbyInfo(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_32_LobbyInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, TrUserData) ->
    dfp_read_field_def_LobbyInfo(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_64_LobbyInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, TrUserData) ->
    dfp_read_field_def_LobbyInfo(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

decode_msg_MatchCreateReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchCreateReq(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      TrUserData).

dfp_read_field_def_MatchCreateReq(<<8, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MatchCreateReq_mode(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
dfp_read_field_def_MatchCreateReq(<<16, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MatchCreateReq_players_max(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
dfp_read_field_def_MatchCreateReq(<<26, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MatchCreateReq_extra(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
dfp_read_field_def_MatchCreateReq(<<>>, 0, 0, F@_1,
                                  F@_2, F@_3, _) ->
    #'MatchCreateReq'{mode = F@_1, players_max = F@_2,
                      extra = F@_3};
dfp_read_field_def_MatchCreateReq(Other, Z1, Z2, F@_1,
                                  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_MatchCreateReq(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData).

dg_read_field_def_MatchCreateReq(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchCreateReq(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dg_read_field_def_MatchCreateReq(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_MatchCreateReq_mode(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
        16 ->
            d_field_MatchCreateReq_players_max(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
        26 ->
            d_field_MatchCreateReq_extra(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchCreateReq(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
                1 ->
                    skip_64_MatchCreateReq(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
                2 ->
                    skip_length_delimited_MatchCreateReq(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
                3 ->
                    skip_group_MatchCreateReq(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
                5 ->
                    skip_32_MatchCreateReq(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData)
            end
    end;
dg_read_field_def_MatchCreateReq(<<>>, 0, 0, F@_1, F@_2,
                                 F@_3, _) ->
    #'MatchCreateReq'{mode = F@_1, players_max = F@_2,
                      extra = F@_3}.

d_field_MatchCreateReq_mode(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MatchCreateReq_mode(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
d_field_MatchCreateReq_mode(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MatchMode(begin
                                                  <<Res:32/signed-native>> =
                                                      <<(X bsl N +
                                                             Acc):32/unsigned-native>>,
                                                  id(Res, TrUserData)
                                              end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_MatchCreateReq(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

d_field_MatchCreateReq_players_max(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MatchCreateReq_players_max(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
d_field_MatchCreateReq_players_max(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchCreateReq(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      F@_3,
                                      TrUserData).

d_field_MatchCreateReq_extra(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MatchCreateReq_extra(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
d_field_MatchCreateReq_extra(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchCreateReq(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      NewFValue,
                                      TrUserData).

skip_varint_MatchCreateReq(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_MatchCreateReq(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               TrUserData);
skip_varint_MatchCreateReq(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MatchCreateReq(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_length_delimited_MatchCreateReq(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchCreateReq(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
skip_length_delimited_MatchCreateReq(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchCreateReq(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_group_MatchCreateReq(Bin, FNum, Z2, F@_1, F@_2,
                          F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchCreateReq(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_32_MatchCreateReq(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MatchCreateReq(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_64_MatchCreateReq(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MatchCreateReq(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

decode_msg_MatchCreateResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchCreateResp(Bin,
                                       0,
                                       0,
                                       id(undefined, TrUserData),
                                       id(undefined, TrUserData),
                                       TrUserData).

dfp_read_field_def_MatchCreateResp(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchCreateResp_resp(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_MatchCreateResp(<<18, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchCreateResp_match(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dfp_read_field_def_MatchCreateResp(<<>>, 0, 0, F@_1,
                                   F@_2, _) ->
    #'MatchCreateResp'{resp = F@_1, match = F@_2};
dfp_read_field_def_MatchCreateResp(Other, Z1, Z2, F@_1,
                                   F@_2, TrUserData) ->
    dg_read_field_def_MatchCreateResp(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

dg_read_field_def_MatchCreateResp(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchCreateResp(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
dg_read_field_def_MatchCreateResp(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchCreateResp_resp(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        18 ->
            d_field_MatchCreateResp_match(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchCreateResp(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                1 ->
                    skip_64_MatchCreateResp(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                2 ->
                    skip_length_delimited_MatchCreateResp(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                3 ->
                    skip_group_MatchCreateResp(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                5 ->
                    skip_32_MatchCreateResp(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData)
            end
    end;
dg_read_field_def_MatchCreateResp(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    #'MatchCreateResp'{resp = F@_1, match = F@_2}.

d_field_MatchCreateResp_resp(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchCreateResp_resp(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_MatchCreateResp_resp(<<0:1, X:7, Rest/binary>>,
                             N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchCreateResp(RestF,
                                       0,
                                       0,
                                       if Prev == undefined -> NewFValue;
                                          true ->
                                              merge_msg_ResponseObject(Prev,
                                                                       NewFValue,
                                                                       TrUserData)
                                       end,
                                       F@_2,
                                       TrUserData).

d_field_MatchCreateResp_match(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchCreateResp_match(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
d_field_MatchCreateResp_match(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_MatchInfo(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchCreateResp(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       if Prev == undefined -> NewFValue;
                                          true ->
                                              merge_msg_MatchInfo(Prev,
                                                                  NewFValue,
                                                                  TrUserData)
                                       end,
                                       TrUserData).

skip_varint_MatchCreateResp(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchCreateResp(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
skip_varint_MatchCreateResp(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchCreateResp(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_length_delimited_MatchCreateResp(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchCreateResp(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_length_delimited_MatchCreateResp(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchCreateResp(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_group_MatchCreateResp(Bin, FNum, Z2, F@_1, F@_2,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchCreateResp(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_32_MatchCreateResp(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchCreateResp(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_64_MatchCreateResp(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchCreateResp(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

decode_msg_MatchJoinReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchJoinReq(Bin,
                                    0,
                                    0,
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    TrUserData).

dfp_read_field_def_MatchJoinReq(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchJoinReq_player(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_MatchJoinReq(<<16, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchJoinReq_matchid(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_MatchJoinReq(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchJoinReq'{player = F@_1, matchid = F@_2};
dfp_read_field_def_MatchJoinReq(Other, Z1, Z2, F@_1,
                                F@_2, TrUserData) ->
    dg_read_field_def_MatchJoinReq(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

dg_read_field_def_MatchJoinReq(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchJoinReq(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dg_read_field_def_MatchJoinReq(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchJoinReq_player(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        16 ->
            d_field_MatchJoinReq_matchid(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchJoinReq(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                1 ->
                    skip_64_MatchJoinReq(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                2 ->
                    skip_length_delimited_MatchJoinReq(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                3 ->
                    skip_group_MatchJoinReq(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                5 ->
                    skip_32_MatchJoinReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MatchJoinReq(<<>>, 0, 0, F@_1, F@_2,
                               _) ->
    #'MatchJoinReq'{player = F@_1, matchid = F@_2}.

d_field_MatchJoinReq_player(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchJoinReq_player(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_MatchJoinReq_player(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchJoinReq(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    TrUserData).

d_field_MatchJoinReq_matchid(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchJoinReq_matchid(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_MatchJoinReq_matchid(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchJoinReq(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    TrUserData).

skip_varint_MatchJoinReq(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchJoinReq(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
skip_varint_MatchJoinReq(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchJoinReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_length_delimited_MatchJoinReq(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchJoinReq(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
skip_length_delimited_MatchJoinReq(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchJoinReq(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_group_MatchJoinReq(Bin, FNum, Z2, F@_1, F@_2,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchJoinReq(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_32_MatchJoinReq(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchJoinReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_64_MatchJoinReq(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchJoinReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

decode_msg_MatchJoinResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchJoinResp(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_MatchJoinResp(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchJoinResp_resp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData);
dfp_read_field_def_MatchJoinResp(<<18, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchJoinResp_match(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_MatchJoinResp(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'MatchJoinResp'{resp = F@_1, match = F@_2};
dfp_read_field_def_MatchJoinResp(Other, Z1, Z2, F@_1,
                                 F@_2, TrUserData) ->
    dg_read_field_def_MatchJoinResp(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

dg_read_field_def_MatchJoinResp(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchJoinResp(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dg_read_field_def_MatchJoinResp(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchJoinResp_resp(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
        18 ->
            d_field_MatchJoinResp_match(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchJoinResp(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                1 ->
                    skip_64_MatchJoinResp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                2 ->
                    skip_length_delimited_MatchJoinResp(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                3 ->
                    skip_group_MatchJoinResp(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                5 ->
                    skip_32_MatchJoinResp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData)
            end
    end;
dg_read_field_def_MatchJoinResp(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchJoinResp'{resp = F@_1, match = F@_2}.

d_field_MatchJoinResp_resp(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchJoinResp_resp(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               TrUserData);
d_field_MatchJoinResp_resp(<<0:1, X:7, Rest/binary>>, N,
                           Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchJoinResp(RestF,
                                     0,
                                     0,
                                     if Prev == undefined -> NewFValue;
                                        true ->
                                            merge_msg_ResponseObject(Prev,
                                                                     NewFValue,
                                                                     TrUserData)
                                     end,
                                     F@_2,
                                     TrUserData).

d_field_MatchJoinResp_match(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchJoinResp_match(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_MatchJoinResp_match(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_MatchInfo(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchJoinResp(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     if Prev == undefined -> NewFValue;
                                        true ->
                                            merge_msg_MatchInfo(Prev,
                                                                NewFValue,
                                                                TrUserData)
                                     end,
                                     TrUserData).

skip_varint_MatchJoinResp(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchJoinResp(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
skip_varint_MatchJoinResp(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchJoinResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_length_delimited_MatchJoinResp(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchJoinResp(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_length_delimited_MatchJoinResp(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchJoinResp(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_group_MatchJoinResp(Bin, FNum, Z2, F@_1, F@_2,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchJoinResp(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_32_MatchJoinResp(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchJoinResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_64_MatchJoinResp(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchJoinResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

decode_msg_MatchLeaveReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchLeaveReq(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_MatchLeaveReq(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchLeaveReq_player(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_MatchLeaveReq(<<16, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchLeaveReq_matchid(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dfp_read_field_def_MatchLeaveReq(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'MatchLeaveReq'{player = F@_1, matchid = F@_2};
dfp_read_field_def_MatchLeaveReq(Other, Z1, Z2, F@_1,
                                 F@_2, TrUserData) ->
    dg_read_field_def_MatchLeaveReq(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

dg_read_field_def_MatchLeaveReq(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchLeaveReq(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dg_read_field_def_MatchLeaveReq(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchLeaveReq_player(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        16 ->
            d_field_MatchLeaveReq_matchid(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchLeaveReq(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                1 ->
                    skip_64_MatchLeaveReq(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                2 ->
                    skip_length_delimited_MatchLeaveReq(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                3 ->
                    skip_group_MatchLeaveReq(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                5 ->
                    skip_32_MatchLeaveReq(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData)
            end
    end;
dg_read_field_def_MatchLeaveReq(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchLeaveReq'{player = F@_1, matchid = F@_2}.

d_field_MatchLeaveReq_player(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchLeaveReq_player(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_MatchLeaveReq_player(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchLeaveReq(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     F@_2,
                                     TrUserData).

d_field_MatchLeaveReq_matchid(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchLeaveReq_matchid(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
d_field_MatchLeaveReq_matchid(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchLeaveReq(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     NewFValue,
                                     TrUserData).

skip_varint_MatchLeaveReq(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchLeaveReq(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
skip_varint_MatchLeaveReq(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchLeaveReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_length_delimited_MatchLeaveReq(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchLeaveReq(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_length_delimited_MatchLeaveReq(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchLeaveReq(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_group_MatchLeaveReq(Bin, FNum, Z2, F@_1, F@_2,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchLeaveReq(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_32_MatchLeaveReq(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchLeaveReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_64_MatchLeaveReq(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchLeaveReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

decode_msg_MatchLeaveResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchLeaveResp(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      TrUserData).

dfp_read_field_def_MatchLeaveResp(<<10, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    d_field_MatchLeaveResp_resp(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
dfp_read_field_def_MatchLeaveResp(<<>>, 0, 0, F@_1,
                                  _) ->
    #'MatchLeaveResp'{resp = F@_1};
dfp_read_field_def_MatchLeaveResp(Other, Z1, Z2, F@_1,
                                  TrUserData) ->
    dg_read_field_def_MatchLeaveResp(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

dg_read_field_def_MatchLeaveResp(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchLeaveResp(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     TrUserData);
dg_read_field_def_MatchLeaveResp(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchLeaveResp_resp(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchLeaveResp(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
                1 ->
                    skip_64_MatchLeaveResp(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_MatchLeaveResp(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                3 ->
                    skip_group_MatchLeaveResp(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              TrUserData);
                5 ->
                    skip_32_MatchLeaveResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MatchLeaveResp(<<>>, 0, 0, F@_1, _) ->
    #'MatchLeaveResp'{resp = F@_1}.

d_field_MatchLeaveResp_resp(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MatchLeaveResp_resp(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                TrUserData);
d_field_MatchLeaveResp_resp(<<0:1, X:7, Rest/binary>>,
                            N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchLeaveResp(RestF,
                                      0,
                                      0,
                                      if Prev == undefined -> NewFValue;
                                         true ->
                                             merge_msg_ResponseObject(Prev,
                                                                      NewFValue,
                                                                      TrUserData)
                                      end,
                                      TrUserData).

skip_varint_MatchLeaveResp(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MatchLeaveResp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
skip_varint_MatchLeaveResp(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MatchLeaveResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

skip_length_delimited_MatchLeaveResp(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchLeaveResp(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
skip_length_delimited_MatchLeaveResp(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchLeaveResp(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      TrUserData).

skip_group_MatchLeaveResp(Bin, FNum, Z2, F@_1,
                          TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchLeaveResp(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      TrUserData).

skip_32_MatchLeaveResp(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, TrUserData) ->
    dfp_read_field_def_MatchLeaveResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

skip_64_MatchLeaveResp(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, TrUserData) ->
    dfp_read_field_def_MatchLeaveResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

decode_msg_MatchStartReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchStartReq(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_MatchStartReq(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchStartReq_player(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_MatchStartReq(<<16, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchStartReq_matchid(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dfp_read_field_def_MatchStartReq(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'MatchStartReq'{player = F@_1, matchid = F@_2};
dfp_read_field_def_MatchStartReq(Other, Z1, Z2, F@_1,
                                 F@_2, TrUserData) ->
    dg_read_field_def_MatchStartReq(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

dg_read_field_def_MatchStartReq(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchStartReq(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dg_read_field_def_MatchStartReq(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchStartReq_player(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        16 ->
            d_field_MatchStartReq_matchid(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchStartReq(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                1 ->
                    skip_64_MatchStartReq(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                2 ->
                    skip_length_delimited_MatchStartReq(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                3 ->
                    skip_group_MatchStartReq(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                5 ->
                    skip_32_MatchStartReq(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData)
            end
    end;
dg_read_field_def_MatchStartReq(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchStartReq'{player = F@_1, matchid = F@_2}.

d_field_MatchStartReq_player(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchStartReq_player(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_MatchStartReq_player(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchStartReq(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     F@_2,
                                     TrUserData).

d_field_MatchStartReq_matchid(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchStartReq_matchid(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
d_field_MatchStartReq_matchid(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchStartReq(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     NewFValue,
                                     TrUserData).

skip_varint_MatchStartReq(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchStartReq(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
skip_varint_MatchStartReq(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchStartReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_length_delimited_MatchStartReq(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchStartReq(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_length_delimited_MatchStartReq(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchStartReq(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_group_MatchStartReq(Bin, FNum, Z2, F@_1, F@_2,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchStartReq(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_32_MatchStartReq(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchStartReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_64_MatchStartReq(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchStartReq(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

decode_msg_MatchStartResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchStartResp(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      TrUserData).

dfp_read_field_def_MatchStartResp(<<10, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    d_field_MatchStartResp_resp(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
dfp_read_field_def_MatchStartResp(<<>>, 0, 0, F@_1,
                                  _) ->
    #'MatchStartResp'{resp = F@_1};
dfp_read_field_def_MatchStartResp(Other, Z1, Z2, F@_1,
                                  TrUserData) ->
    dg_read_field_def_MatchStartResp(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

dg_read_field_def_MatchStartResp(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchStartResp(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     TrUserData);
dg_read_field_def_MatchStartResp(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchStartResp_resp(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchStartResp(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
                1 ->
                    skip_64_MatchStartResp(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_MatchStartResp(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                3 ->
                    skip_group_MatchStartResp(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              TrUserData);
                5 ->
                    skip_32_MatchStartResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MatchStartResp(<<>>, 0, 0, F@_1, _) ->
    #'MatchStartResp'{resp = F@_1}.

d_field_MatchStartResp_resp(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MatchStartResp_resp(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                TrUserData);
d_field_MatchStartResp_resp(<<0:1, X:7, Rest/binary>>,
                            N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchStartResp(RestF,
                                      0,
                                      0,
                                      if Prev == undefined -> NewFValue;
                                         true ->
                                             merge_msg_ResponseObject(Prev,
                                                                      NewFValue,
                                                                      TrUserData)
                                      end,
                                      TrUserData).

skip_varint_MatchStartResp(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MatchStartResp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
skip_varint_MatchStartResp(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MatchStartResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

skip_length_delimited_MatchStartResp(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchStartResp(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
skip_length_delimited_MatchStartResp(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchStartResp(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      TrUserData).

skip_group_MatchStartResp(Bin, FNum, Z2, F@_1,
                          TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchStartResp(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      TrUserData).

skip_32_MatchStartResp(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, TrUserData) ->
    dfp_read_field_def_MatchStartResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

skip_64_MatchStartResp(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, TrUserData) ->
    dfp_read_field_def_MatchStartResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

decode_msg_MatchInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchInfoReq(Bin,
                                    0,
                                    0,
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    TrUserData).

dfp_read_field_def_MatchInfoReq(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchInfoReq_player(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_MatchInfoReq(<<16, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchInfoReq_matchid(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_MatchInfoReq(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchInfoReq'{player = F@_1, matchid = F@_2};
dfp_read_field_def_MatchInfoReq(Other, Z1, Z2, F@_1,
                                F@_2, TrUserData) ->
    dg_read_field_def_MatchInfoReq(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

dg_read_field_def_MatchInfoReq(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchInfoReq(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dg_read_field_def_MatchInfoReq(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchInfoReq_player(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        16 ->
            d_field_MatchInfoReq_matchid(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchInfoReq(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                1 ->
                    skip_64_MatchInfoReq(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                2 ->
                    skip_length_delimited_MatchInfoReq(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                3 ->
                    skip_group_MatchInfoReq(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                5 ->
                    skip_32_MatchInfoReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MatchInfoReq(<<>>, 0, 0, F@_1, F@_2,
                               _) ->
    #'MatchInfoReq'{player = F@_1, matchid = F@_2}.

d_field_MatchInfoReq_player(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchInfoReq_player(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_MatchInfoReq_player(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchInfoReq(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    TrUserData).

d_field_MatchInfoReq_matchid(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchInfoReq_matchid(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_MatchInfoReq_matchid(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchInfoReq(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    TrUserData).

skip_varint_MatchInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchInfoReq(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
skip_varint_MatchInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchInfoReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_length_delimited_MatchInfoReq(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchInfoReq(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
skip_length_delimited_MatchInfoReq(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchInfoReq(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_group_MatchInfoReq(Bin, FNum, Z2, F@_1, F@_2,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchInfoReq(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_32_MatchInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchInfoReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_64_MatchInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchInfoReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

decode_msg_MatchInfoResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchInfoResp(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_MatchInfoResp(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchInfoResp_resp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData);
dfp_read_field_def_MatchInfoResp(<<18, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchInfoResp_match(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_MatchInfoResp(<<>>, 0, 0, F@_1, F@_2,
                                 _) ->
    #'MatchInfoResp'{resp = F@_1, match = F@_2};
dfp_read_field_def_MatchInfoResp(Other, Z1, Z2, F@_1,
                                 F@_2, TrUserData) ->
    dg_read_field_def_MatchInfoResp(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

dg_read_field_def_MatchInfoResp(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchInfoResp(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dg_read_field_def_MatchInfoResp(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchInfoResp_resp(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
        18 ->
            d_field_MatchInfoResp_match(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchInfoResp(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                1 ->
                    skip_64_MatchInfoResp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                2 ->
                    skip_length_delimited_MatchInfoResp(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                3 ->
                    skip_group_MatchInfoResp(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                5 ->
                    skip_32_MatchInfoResp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData)
            end
    end;
dg_read_field_def_MatchInfoResp(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchInfoResp'{resp = F@_1, match = F@_2}.

d_field_MatchInfoResp_resp(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchInfoResp_resp(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               TrUserData);
d_field_MatchInfoResp_resp(<<0:1, X:7, Rest/binary>>, N,
                           Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchInfoResp(RestF,
                                     0,
                                     0,
                                     if Prev == undefined -> NewFValue;
                                        true ->
                                            merge_msg_ResponseObject(Prev,
                                                                     NewFValue,
                                                                     TrUserData)
                                     end,
                                     F@_2,
                                     TrUserData).

d_field_MatchInfoResp_match(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchInfoResp_match(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_MatchInfoResp_match(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_MatchInfo(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchInfoResp(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     if Prev == undefined -> NewFValue;
                                        true ->
                                            merge_msg_MatchInfo(Prev,
                                                                NewFValue,
                                                                TrUserData)
                                     end,
                                     TrUserData).

skip_varint_MatchInfoResp(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchInfoResp(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
skip_varint_MatchInfoResp(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchInfoResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_length_delimited_MatchInfoResp(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchInfoResp(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_length_delimited_MatchInfoResp(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchInfoResp(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_group_MatchInfoResp(Bin, FNum, Z2, F@_1, F@_2,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchInfoResp(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_32_MatchInfoResp(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchInfoResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

skip_64_MatchInfoResp(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchInfoResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData).

'decode_msg_MatchStateResp.Tile'(Bin, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Tile'(Bin,
                                             0,
                                             0,
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id([], TrUserData),
                                             id([], TrUserData),
                                             TrUserData).

'dfp_read_field_def_MatchStateResp.Tile'(<<8,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    'd_field_MatchStateResp.Tile_x'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
'dfp_read_field_def_MatchStateResp.Tile'(<<16,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    'd_field_MatchStateResp.Tile_y'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
'dfp_read_field_def_MatchStateResp.Tile'(<<26,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    'd_field_MatchStateResp.Tile_type'(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
'dfp_read_field_def_MatchStateResp.Tile'(<<34,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    'd_field_MatchStateResp.Tile_occupant'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
'dfp_read_field_def_MatchStateResp.Tile'(<<42,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    'd_field_MatchStateResp.Tile_flags'(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
'dfp_read_field_def_MatchStateResp.Tile'(<<>>, 0, 0,
                                         F@_1, F@_2, F@_3, R1, R2,
                                         TrUserData) ->
    #'MatchStateResp.Tile'{x = F@_1, y = F@_2, type = F@_3,
                           occupant = lists_reverse(R1, TrUserData),
                           flags = lists_reverse(R2, TrUserData)};
'dfp_read_field_def_MatchStateResp.Tile'(Other, Z1, Z2,
                                         F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    'dg_read_field_def_MatchStateResp.Tile'(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData).

'dg_read_field_def_MatchStateResp.Tile'(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_MatchStateResp.Tile'(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
'dg_read_field_def_MatchStateResp.Tile'(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_MatchStateResp.Tile_x'(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
        16 ->
            'd_field_MatchStateResp.Tile_y'(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
        26 ->
            'd_field_MatchStateResp.Tile_type'(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
        34 ->
            'd_field_MatchStateResp.Tile_occupant'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
        42 ->
            'd_field_MatchStateResp.Tile_flags'(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_MatchStateResp.Tile'(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
                1 ->
                    'skip_64_MatchStateResp.Tile'(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
                2 ->
                    'skip_length_delimited_MatchStateResp.Tile'(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData);
                3 ->
                    'skip_group_MatchStateResp.Tile'(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
                5 ->
                    'skip_32_MatchStateResp.Tile'(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData)
            end
    end;
'dg_read_field_def_MatchStateResp.Tile'(<<>>, 0, 0,
                                        F@_1, F@_2, F@_3, R1, R2, TrUserData) ->
    #'MatchStateResp.Tile'{x = F@_1, y = F@_2, type = F@_3,
                           occupant = lists_reverse(R1, TrUserData),
                           flags = lists_reverse(R2, TrUserData)}.

'd_field_MatchStateResp.Tile_x'(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Tile_x'(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
'd_field_MatchStateResp.Tile_x'(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Tile'(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'd_field_MatchStateResp.Tile_y'(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Tile_y'(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
'd_field_MatchStateResp.Tile_y'(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, _, F@_3, F@_4, F@_5,
                                TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Tile'(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             NewFValue,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'd_field_MatchStateResp.Tile_type'(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                   TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Tile_type'(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
'd_field_MatchStateResp.Tile_type'(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, _, F@_4, F@_5,
                                   TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_MatchStateResp.Tile'(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             NewFValue,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'd_field_MatchStateResp.Tile_occupant'(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Tile_occupant'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
'd_field_MatchStateResp.Tile_occupant'(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_MatchStateResp.Tile'(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             cons(NewFValue, Prev, TrUserData),
                                             F@_5,
                                             TrUserData).

'd_field_MatchStateResp.Tile_flags'(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                    TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Tile_flags'(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
'd_field_MatchStateResp.Tile_flags'(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_MatchStateResp.Tile'(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             cons(NewFValue, Prev, TrUserData),
                                             TrUserData).

'skip_varint_MatchStateResp.Tile'(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    'skip_varint_MatchStateResp.Tile'(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData);
'skip_varint_MatchStateResp.Tile'(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Tile'(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'skip_length_delimited_MatchStateResp.Tile'(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData)
    when N < 57 ->
    'skip_length_delimited_MatchStateResp.Tile'(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
'skip_length_delimited_MatchStateResp.Tile'(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_MatchStateResp.Tile'(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'skip_group_MatchStateResp.Tile'(Bin, FNum, Z2, F@_1,
                                 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_MatchStateResp.Tile'(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'skip_32_MatchStateResp.Tile'(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Tile'(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'skip_64_MatchStateResp.Tile'(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Tile'(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData).

'decode_msg_MatchStateResp.Action'(Bin, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Action'(Bin,
                                               0,
                                               0,
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               TrUserData).

'dfp_read_field_def_MatchStateResp.Action'(<<8,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_phase'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<18,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_name'(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<24,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_type'(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<32,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_x_from'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<40,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_y_from'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<48,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_x_to'(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<56,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'd_field_MatchStateResp.Action_y_to'(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'dfp_read_field_def_MatchStateResp.Action'(<<>>, 0, 0,
                                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                           F@_7, _) ->
    #'MatchStateResp.Action'{phase = F@_1, name = F@_2,
                             type = F@_3, x_from = F@_4, y_from = F@_5,
                             x_to = F@_6, y_to = F@_7};
'dfp_read_field_def_MatchStateResp.Action'(Other, Z1,
                                           Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, TrUserData) ->
    'dg_read_field_def_MatchStateResp.Action'(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              TrUserData).

'dg_read_field_def_MatchStateResp.Action'(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_MatchStateResp.Action'(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              TrUserData);
'dg_read_field_def_MatchStateResp.Action'(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_MatchStateResp.Action_phase'(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
        18 ->
            'd_field_MatchStateResp.Action_name'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 TrUserData);
        24 ->
            'd_field_MatchStateResp.Action_type'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 TrUserData);
        32 ->
            'd_field_MatchStateResp.Action_x_from'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   TrUserData);
        40 ->
            'd_field_MatchStateResp.Action_y_from'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   TrUserData);
        48 ->
            'd_field_MatchStateResp.Action_x_to'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 TrUserData);
        56 ->
            'd_field_MatchStateResp.Action_y_to'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_MatchStateResp.Action'(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
                1 ->
                    'skip_64_MatchStateResp.Action'(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    TrUserData);
                2 ->
                    'skip_length_delimited_MatchStateResp.Action'(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  F@_6,
                                                                  F@_7,
                                                                  TrUserData);
                3 ->
                    'skip_group_MatchStateResp.Action'(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       TrUserData);
                5 ->
                    'skip_32_MatchStateResp.Action'(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    TrUserData)
            end
    end;
'dg_read_field_def_MatchStateResp.Action'(<<>>, 0, 0,
                                          F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                          F@_7, _) ->
    #'MatchStateResp.Action'{phase = F@_1, name = F@_2,
                             type = F@_3, x_from = F@_4, y_from = F@_5,
                             x_to = F@_6, y_to = F@_7}.

'd_field_MatchStateResp.Action_phase'(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_phase'(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          TrUserData);
'd_field_MatchStateResp.Action_phase'(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
                                      F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               NewFValue,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'd_field_MatchStateResp.Action_name'(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_name'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'd_field_MatchStateResp.Action_name'(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               NewFValue,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'd_field_MatchStateResp.Action_type'(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_type'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'd_field_MatchStateResp.Action_type'(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
                                     F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ItemAction(begin
                                                   <<Res:32/signed-native>> =
                                                       <<(X bsl N +
                                                              Acc):32/unsigned-native>>,
                                                   id(Res, TrUserData)
                                               end),
                             TrUserData),
                          Rest},
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               NewFValue,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'd_field_MatchStateResp.Action_x_from'(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_x_from'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           TrUserData);
'd_field_MatchStateResp.Action_x_from'(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
                                       F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               NewFValue,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'd_field_MatchStateResp.Action_y_from'(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_y_from'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           TrUserData);
'd_field_MatchStateResp.Action_y_from'(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
                                       F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               NewFValue,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'd_field_MatchStateResp.Action_x_to'(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_x_to'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'd_field_MatchStateResp.Action_x_to'(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
                                     F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               NewFValue,
                                               F@_7,
                                               TrUserData).

'd_field_MatchStateResp.Action_y_to'(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, TrUserData)
    when N < 57 ->
    'd_field_MatchStateResp.Action_y_to'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         TrUserData);
'd_field_MatchStateResp.Action_y_to'(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    'dfp_read_field_def_MatchStateResp.Action'(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               NewFValue,
                                               TrUserData).

'skip_varint_MatchStateResp.Action'(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                    F@_7, TrUserData) ->
    'skip_varint_MatchStateResp.Action'(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        TrUserData);
'skip_varint_MatchStateResp.Action'(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                    F@_7, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Action'(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'skip_length_delimited_MatchStateResp.Action'(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'skip_length_delimited_MatchStateResp.Action'(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
'skip_length_delimited_MatchStateResp.Action'(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_MatchStateResp.Action'(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'skip_group_MatchStateResp.Action'(Bin, FNum, Z2, F@_1,
                                   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_MatchStateResp.Action'(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'skip_32_MatchStateResp.Action'(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Action'(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

'skip_64_MatchStateResp.Action'(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, TrUserData) ->
    'dfp_read_field_def_MatchStateResp.Action'(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               TrUserData).

decode_msg_MatchStateResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchStateResp(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      id([], TrUserData),
                                      id([], TrUserData),
                                      id([], TrUserData),
                                      id([], TrUserData),
                                      TrUserData).

dfp_read_field_def_MatchStateResp(<<8, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_MatchStateResp_state(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
dfp_read_field_def_MatchStateResp(<<18, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_MatchStateResp_tile(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
dfp_read_field_def_MatchStateResp(<<26, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_MatchStateResp_playerlist(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData);
dfp_read_field_def_MatchStateResp(<<34, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_MatchStateResp_readyplayers(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
dfp_read_field_def_MatchStateResp(<<42, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_MatchStateResp_actions(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
dfp_read_field_def_MatchStateResp(<<>>, 0, 0, F@_1, R1,
                                  R2, R3, R4, TrUserData) ->
    #'MatchStateResp'{state = F@_1,
                      tile = lists_reverse(R1, TrUserData),
                      playerlist = lists_reverse(R2, TrUserData),
                      readyplayers = lists_reverse(R3, TrUserData),
                      actions = lists_reverse(R4, TrUserData)};
dfp_read_field_def_MatchStateResp(Other, Z1, Z2, F@_1,
                                  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_MatchStateResp(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData).

dg_read_field_def_MatchStateResp(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchStateResp(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
dg_read_field_def_MatchStateResp(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_MatchStateResp_state(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
        18 ->
            d_field_MatchStateResp_tile(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
        26 ->
            d_field_MatchStateResp_playerlist(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              TrUserData);
        34 ->
            d_field_MatchStateResp_readyplayers(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
        42 ->
            d_field_MatchStateResp_actions(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchStateResp(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
                1 ->
                    skip_64_MatchStateResp(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
                2 ->
                    skip_length_delimited_MatchStateResp(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
                3 ->
                    skip_group_MatchStateResp(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              TrUserData);
                5 ->
                    skip_32_MatchStateResp(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData)
            end
    end;
dg_read_field_def_MatchStateResp(<<>>, 0, 0, F@_1, R1,
                                 R2, R3, R4, TrUserData) ->
    #'MatchStateResp'{state = F@_1,
                      tile = lists_reverse(R1, TrUserData),
                      playerlist = lists_reverse(R2, TrUserData),
                      readyplayers = lists_reverse(R3, TrUserData),
                      actions = lists_reverse(R4, TrUserData)}.

d_field_MatchStateResp_state(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_MatchStateResp_state(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
d_field_MatchStateResp_state(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MatchStateMachine(begin
                                                          <<Res:32/signed-native>> =
                                                              <<(X bsl N +
                                                                     Acc):32/unsigned-native>>,
                                                          id(Res, TrUserData)
                                                      end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_MatchStateResp(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_MatchStateResp_tile(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_MatchStateResp_tile(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
d_field_MatchStateResp_tile(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_MatchStateResp.Tile'(Bs,
                                                                  TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchStateResp(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      cons(NewFValue, Prev, TrUserData),
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_MatchStateResp_playerlist(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData)
    when N < 57 ->
    d_field_MatchStateResp_playerlist(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData);
d_field_MatchStateResp_playerlist(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                  TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchStateResp(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      cons(NewFValue, Prev, TrUserData),
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_MatchStateResp_readyplayers(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                    TrUserData)
    when N < 57 ->
    d_field_MatchStateResp_readyplayers(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
d_field_MatchStateResp_readyplayers(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchStateResp(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      cons(NewFValue, Prev, TrUserData),
                                      F@_5,
                                      TrUserData).

d_field_MatchStateResp_actions(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_MatchStateResp_actions(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
d_field_MatchStateResp_actions(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_MatchStateResp.Action'(Bs,
                                                                    TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchStateResp(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      cons(NewFValue, Prev, TrUserData),
                                      TrUserData).

skip_varint_MatchStateResp(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_MatchStateResp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
skip_varint_MatchStateResp(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_MatchStateResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_length_delimited_MatchStateResp(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchStateResp(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
skip_length_delimited_MatchStateResp(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchStateResp(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_group_MatchStateResp(Bin, FNum, Z2, F@_1, F@_2,
                          F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchStateResp(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_32_MatchStateResp(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_MatchStateResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_64_MatchStateResp(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_MatchStateResp(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

decode_msg_MatchPrepReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchPrepReq(Bin,
                                    0,
                                    0,
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    TrUserData).

dfp_read_field_def_MatchPrepReq(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchPrepReq_player(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
dfp_read_field_def_MatchPrepReq(<<16, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchPrepReq_matchid(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_MatchPrepReq(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #'MatchPrepReq'{player = F@_1, matchid = F@_2};
dfp_read_field_def_MatchPrepReq(Other, Z1, Z2, F@_1,
                                F@_2, TrUserData) ->
    dg_read_field_def_MatchPrepReq(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

dg_read_field_def_MatchPrepReq(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchPrepReq(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dg_read_field_def_MatchPrepReq(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchPrepReq_player(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
        16 ->
            d_field_MatchPrepReq_matchid(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchPrepReq(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                1 ->
                    skip_64_MatchPrepReq(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                2 ->
                    skip_length_delimited_MatchPrepReq(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                3 ->
                    skip_group_MatchPrepReq(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                5 ->
                    skip_32_MatchPrepReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MatchPrepReq(<<>>, 0, 0, F@_1, F@_2,
                               _) ->
    #'MatchPrepReq'{player = F@_1, matchid = F@_2}.

d_field_MatchPrepReq_player(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchPrepReq_player(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
d_field_MatchPrepReq_player(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchPrepReq(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    TrUserData).

d_field_MatchPrepReq_matchid(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchPrepReq_matchid(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_MatchPrepReq_matchid(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchPrepReq(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    TrUserData).

skip_varint_MatchPrepReq(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchPrepReq(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
skip_varint_MatchPrepReq(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchPrepReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_length_delimited_MatchPrepReq(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchPrepReq(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
skip_length_delimited_MatchPrepReq(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchPrepReq(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_group_MatchPrepReq(Bin, FNum, Z2, F@_1, F@_2,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchPrepReq(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_32_MatchPrepReq(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchPrepReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_64_MatchPrepReq(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchPrepReq(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

decode_msg_MatchPrepResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchPrepResp(Bin,
                                     0,
                                     0,
                                     id(undefined, TrUserData),
                                     TrUserData).

dfp_read_field_def_MatchPrepResp(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_MatchPrepResp_resp(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_MatchPrepResp(<<>>, 0, 0, F@_1, _) ->
    #'MatchPrepResp'{resp = F@_1};
dfp_read_field_def_MatchPrepResp(Other, Z1, Z2, F@_1,
                                 TrUserData) ->
    dg_read_field_def_MatchPrepResp(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

dg_read_field_def_MatchPrepResp(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchPrepResp(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
dg_read_field_def_MatchPrepResp(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchPrepResp_resp(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchPrepResp(Rest, 0, 0, F@_1, TrUserData);
                1 ->
                    skip_64_MatchPrepResp(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_MatchPrepResp(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                3 ->
                    skip_group_MatchPrepResp(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             TrUserData);
                5 -> skip_32_MatchPrepResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MatchPrepResp(<<>>, 0, 0, F@_1, _) ->
    #'MatchPrepResp'{resp = F@_1}.

d_field_MatchPrepResp_resp(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MatchPrepResp_resp(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_MatchPrepResp_resp(<<0:1, X:7, Rest/binary>>, N,
                           Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchPrepResp(RestF,
                                     0,
                                     0,
                                     if Prev == undefined -> NewFValue;
                                        true ->
                                            merge_msg_ResponseObject(Prev,
                                                                     NewFValue,
                                                                     TrUserData)
                                     end,
                                     TrUserData).

skip_varint_MatchPrepResp(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    skip_varint_MatchPrepResp(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
skip_varint_MatchPrepResp(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MatchPrepResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_length_delimited_MatchPrepResp(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchPrepResp(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
skip_length_delimited_MatchPrepResp(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchPrepResp(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     TrUserData).

skip_group_MatchPrepResp(Bin, FNum, Z2, F@_1,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchPrepResp(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_32_MatchPrepResp(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_MatchPrepResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_64_MatchPrepResp(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_MatchPrepResp(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

decode_msg_MatchDecideReq(Bin, TrUserData) ->
    dfp_read_field_def_MatchDecideReq(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      TrUserData).

dfp_read_field_def_MatchDecideReq(<<10, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MatchDecideReq_player(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  TrUserData);
dfp_read_field_def_MatchDecideReq(<<18, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MatchDecideReq_actions(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dfp_read_field_def_MatchDecideReq(<<24, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_MatchDecideReq_matchid(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dfp_read_field_def_MatchDecideReq(<<>>, 0, 0, F@_1,
                                  F@_2, F@_3, _) ->
    #'MatchDecideReq'{player = F@_1, actions = F@_2,
                      matchid = F@_3};
dfp_read_field_def_MatchDecideReq(Other, Z1, Z2, F@_1,
                                  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_MatchDecideReq(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData).

dg_read_field_def_MatchDecideReq(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchDecideReq(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dg_read_field_def_MatchDecideReq(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchDecideReq_player(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData);
        18 ->
            d_field_MatchDecideReq_actions(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
        24 ->
            d_field_MatchDecideReq_matchid(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchDecideReq(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
                1 ->
                    skip_64_MatchDecideReq(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
                2 ->
                    skip_length_delimited_MatchDecideReq(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
                3 ->
                    skip_group_MatchDecideReq(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
                5 ->
                    skip_32_MatchDecideReq(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData)
            end
    end;
dg_read_field_def_MatchDecideReq(<<>>, 0, 0, F@_1, F@_2,
                                 F@_3, _) ->
    #'MatchDecideReq'{player = F@_1, actions = F@_2,
                      matchid = F@_3}.

d_field_MatchDecideReq_player(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MatchDecideReq_player(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  TrUserData);
d_field_MatchDecideReq_player(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchDecideReq(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

d_field_MatchDecideReq_actions(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MatchDecideReq_actions(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
d_field_MatchDecideReq_actions(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_MatchDecideReq(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      F@_3,
                                      TrUserData).

d_field_MatchDecideReq_matchid(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_MatchDecideReq_matchid(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
d_field_MatchDecideReq_matchid(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_MatchDecideReq(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      NewFValue,
                                      TrUserData).

skip_varint_MatchDecideReq(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_MatchDecideReq(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               TrUserData);
skip_varint_MatchDecideReq(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MatchDecideReq(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_length_delimited_MatchDecideReq(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchDecideReq(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
skip_length_delimited_MatchDecideReq(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchDecideReq(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_group_MatchDecideReq(Bin, FNum, Z2, F@_1, F@_2,
                          F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchDecideReq(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_32_MatchDecideReq(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MatchDecideReq(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_64_MatchDecideReq(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_MatchDecideReq(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

decode_msg_MatchDecideResp(Bin, TrUserData) ->
    dfp_read_field_def_MatchDecideResp(Bin,
                                       0,
                                       0,
                                       id(undefined, TrUserData),
                                       TrUserData).

dfp_read_field_def_MatchDecideResp(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    d_field_MatchDecideResp_resp(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData);
dfp_read_field_def_MatchDecideResp(<<>>, 0, 0, F@_1,
                                   _) ->
    #'MatchDecideResp'{resp = F@_1};
dfp_read_field_def_MatchDecideResp(Other, Z1, Z2, F@_1,
                                   TrUserData) ->
    dg_read_field_def_MatchDecideResp(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

dg_read_field_def_MatchDecideResp(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchDecideResp(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
dg_read_field_def_MatchDecideResp(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_MatchDecideResp_resp(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_MatchDecideResp(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                1 ->
                    skip_64_MatchDecideResp(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_MatchDecideResp(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                3 ->
                    skip_group_MatchDecideResp(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               TrUserData);
                5 ->
                    skip_32_MatchDecideResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MatchDecideResp(<<>>, 0, 0, F@_1,
                                  _) ->
    #'MatchDecideResp'{resp = F@_1}.

d_field_MatchDecideResp_resp(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_MatchDecideResp_resp(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 TrUserData);
d_field_MatchDecideResp_resp(<<0:1, X:7, Rest/binary>>,
                             N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ResponseObject(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_MatchDecideResp(RestF,
                                       0,
                                       0,
                                       if Prev == undefined -> NewFValue;
                                          true ->
                                              merge_msg_ResponseObject(Prev,
                                                                       NewFValue,
                                                                       TrUserData)
                                       end,
                                       TrUserData).

skip_varint_MatchDecideResp(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    skip_varint_MatchDecideResp(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
skip_varint_MatchDecideResp(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_MatchDecideResp(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_length_delimited_MatchDecideResp(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchDecideResp(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
skip_length_delimited_MatchDecideResp(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchDecideResp(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData).

skip_group_MatchDecideResp(Bin, FNum, Z2, F@_1,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchDecideResp(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_32_MatchDecideResp(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_MatchDecideResp(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_64_MatchDecideResp(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_MatchDecideResp(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

d_enum_MatchState(0) -> 'CREATING';
d_enum_MatchState(1) -> 'PLAYING';
d_enum_MatchState(2) -> 'FINISHING';
d_enum_MatchState(V) -> V.

d_enum_MatchMode(0) -> 'DEFAULT';
d_enum_MatchMode(1) -> 'BLITZ';
d_enum_MatchMode(2) -> 'STRATEGIC';
d_enum_MatchMode(V) -> V.

d_enum_MatchStateMachine(0) -> 'PREPARE';
d_enum_MatchStateMachine(1) -> 'DECIDE';
d_enum_MatchStateMachine(2) -> 'EXECUTE';
d_enum_MatchStateMachine(3) -> 'FINISH';
d_enum_MatchStateMachine(V) -> V.

d_enum_PlayerRole(0) -> 'DESTROYER';
d_enum_PlayerRole(1) -> 'INTERCEPTOR';
d_enum_PlayerRole(2) -> 'CARRIER';
d_enum_PlayerRole(3) -> 'COMMAND';
d_enum_PlayerRole(V) -> V.

d_enum_ItemAction(0) -> 'SELF';
d_enum_ItemAction(1) -> 'DIRECT';
d_enum_ItemAction(2) -> 'LINEAR';
d_enum_ItemAction(3) -> 'AREA';
d_enum_ItemAction(V) -> V.

'd_enum_ResponseObject.Status'(0) -> 'OK';
'd_enum_ResponseObject.Status'(1) -> 'ERROR';
'd_enum_ResponseObject.Status'(V) -> V.

'd_enum_AccountNewResp.Status'(0) -> 'OK';
'd_enum_AccountNewResp.Status'(1) -> 'ERROR';
'd_enum_AccountNewResp.Status'(V) -> V.

'd_enum_AccountLoginResp.Status'(0) -> 'OK';
'd_enum_AccountLoginResp.Status'(1) -> 'ERROR';
'd_enum_AccountLoginResp.Status'(V) -> V.

'd_enum_PlayerNewResp.Status'(0) -> 'OK';
'd_enum_PlayerNewResp.Status'(1) -> 'ERROR';
'd_enum_PlayerNewResp.Status'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
         is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ResponseObject' ->
            merge_msg_ResponseObject(Prev, New, TrUserData);
        'MatchInfo.Player' ->
            'merge_msg_MatchInfo.Player'(Prev, New, TrUserData);
        'MatchInfo' ->
            merge_msg_MatchInfo(Prev, New, TrUserData);
        'AccountNewReq' ->
            merge_msg_AccountNewReq(Prev, New, TrUserData);
        'AccountNewResp' ->
            merge_msg_AccountNewResp(Prev, New, TrUserData);
        'AccountLoginReq' ->
            merge_msg_AccountLoginReq(Prev, New, TrUserData);
        'AccountLoginResp.Player' ->
            'merge_msg_AccountLoginResp.Player'(Prev,
                                                New,
                                                TrUserData);
        'AccountLoginResp' ->
            merge_msg_AccountLoginResp(Prev, New, TrUserData);
        'PlayerNewReq' ->
            merge_msg_PlayerNewReq(Prev, New, TrUserData);
        'PlayerNewResp' ->
            merge_msg_PlayerNewResp(Prev, New, TrUserData);
        'PlayerAuthenticate' ->
            merge_msg_PlayerAuthenticate(Prev, New, TrUserData);
        'PlayerLog' ->
            merge_msg_PlayerLog(Prev, New, TrUserData);
        'LobbyInfo' ->
            merge_msg_LobbyInfo(Prev, New, TrUserData);
        'MatchCreateReq' ->
            merge_msg_MatchCreateReq(Prev, New, TrUserData);
        'MatchCreateResp' ->
            merge_msg_MatchCreateResp(Prev, New, TrUserData);
        'MatchJoinReq' ->
            merge_msg_MatchJoinReq(Prev, New, TrUserData);
        'MatchJoinResp' ->
            merge_msg_MatchJoinResp(Prev, New, TrUserData);
        'MatchLeaveReq' ->
            merge_msg_MatchLeaveReq(Prev, New, TrUserData);
        'MatchLeaveResp' ->
            merge_msg_MatchLeaveResp(Prev, New, TrUserData);
        'MatchStartReq' ->
            merge_msg_MatchStartReq(Prev, New, TrUserData);
        'MatchStartResp' ->
            merge_msg_MatchStartResp(Prev, New, TrUserData);
        'MatchInfoReq' ->
            merge_msg_MatchInfoReq(Prev, New, TrUserData);
        'MatchInfoResp' ->
            merge_msg_MatchInfoResp(Prev, New, TrUserData);
        'MatchStateResp.Tile' ->
            'merge_msg_MatchStateResp.Tile'(Prev, New, TrUserData);
        'MatchStateResp.Action' ->
            'merge_msg_MatchStateResp.Action'(Prev,
                                              New,
                                              TrUserData);
        'MatchStateResp' ->
            merge_msg_MatchStateResp(Prev, New, TrUserData);
        'MatchPrepReq' ->
            merge_msg_MatchPrepReq(Prev, New, TrUserData);
        'MatchPrepResp' ->
            merge_msg_MatchPrepResp(Prev, New, TrUserData);
        'MatchDecideReq' ->
            merge_msg_MatchDecideReq(Prev, New, TrUserData);
        'MatchDecideResp' ->
            merge_msg_MatchDecideResp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ResponseObject/3}).
merge_msg_ResponseObject(#'ResponseObject'{error =
                                               PFerror},
                         #'ResponseObject'{status = NFstatus, error = NFerror},
                         _) ->
    #'ResponseObject'{status = NFstatus,
                      error =
                          if NFerror =:= undefined -> PFerror;
                             true -> NFerror
                          end}.

-compile({nowarn_unused_function,'merge_msg_MatchInfo.Player'/3}).
'merge_msg_MatchInfo.Player'(#'MatchInfo.Player'{},
                             #'MatchInfo.Player'{name = NFname}, _) ->
    #'MatchInfo.Player'{name = NFname}.

-compile({nowarn_unused_function,merge_msg_MatchInfo/3}).
merge_msg_MatchInfo(#'MatchInfo'{players = PFplayers,
                                 extra = PFextra},
                    #'MatchInfo'{id = NFid, state = NFstate,
                                 players = NFplayers,
                                 players_max = NFplayers_max,
                                 start_time = NFstart_time, mode = NFmode,
                                 duration = NFduration, extra = NFextra},
                    TrUserData) ->
    #'MatchInfo'{id = NFid, state = NFstate,
                 players =
                     if PFplayers /= undefined, NFplayers /= undefined ->
                            'erlang_++'(PFplayers, NFplayers, TrUserData);
                        PFplayers == undefined -> NFplayers;
                        NFplayers == undefined -> PFplayers
                     end,
                 players_max = NFplayers_max, start_time = NFstart_time,
                 mode = NFmode, duration = NFduration,
                 extra =
                     if NFextra =:= undefined -> PFextra;
                        true -> NFextra
                     end}.

-compile({nowarn_unused_function,merge_msg_AccountNewReq/3}).
merge_msg_AccountNewReq(#'AccountNewReq'{},
                        #'AccountNewReq'{email = NFemail,
                                         password = NFpassword},
                        _) ->
    #'AccountNewReq'{email = NFemail,
                     password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_AccountNewResp/3}).
merge_msg_AccountNewResp(#'AccountNewResp'{error =
                                               PFerror},
                         #'AccountNewResp'{status = NFstatus, error = NFerror},
                         _) ->
    #'AccountNewResp'{status = NFstatus,
                      error =
                          if NFerror =:= undefined -> PFerror;
                             true -> NFerror
                          end}.

-compile({nowarn_unused_function,merge_msg_AccountLoginReq/3}).
merge_msg_AccountLoginReq(#'AccountLoginReq'{},
                          #'AccountLoginReq'{email = NFemail,
                                             password = NFpassword},
                          _) ->
    #'AccountLoginReq'{email = NFemail,
                       password = NFpassword}.

-compile({nowarn_unused_function,'merge_msg_AccountLoginResp.Player'/3}).
'merge_msg_AccountLoginResp.Player'(#'AccountLoginResp.Player'{},
                                    #'AccountLoginResp.Player'{name = NFname},
                                    _) ->
    #'AccountLoginResp.Player'{name = NFname}.

-compile({nowarn_unused_function,merge_msg_AccountLoginResp/3}).
merge_msg_AccountLoginResp(#'AccountLoginResp'{players =
                                                   PFplayers,
                                               error = PFerror},
                           #'AccountLoginResp'{status = NFstatus,
                                               players = NFplayers,
                                               error = NFerror},
                           TrUserData) ->
    #'AccountLoginResp'{status = NFstatus,
                        players =
                            if PFplayers /= undefined, NFplayers /= undefined ->
                                   'erlang_++'(PFplayers,
                                               NFplayers,
                                               TrUserData);
                               PFplayers == undefined -> NFplayers;
                               NFplayers == undefined -> PFplayers
                            end,
                        error =
                            if NFerror =:= undefined -> PFerror;
                               true -> NFerror
                            end}.

-compile({nowarn_unused_function,merge_msg_PlayerNewReq/3}).
merge_msg_PlayerNewReq(#'PlayerNewReq'{},
                       #'PlayerNewReq'{name = NFname,
                                       appearance = NFappearance,
                                       role = NFrole},
                       _) ->
    #'PlayerNewReq'{name = NFname,
                    appearance = NFappearance, role = NFrole}.

-compile({nowarn_unused_function,merge_msg_PlayerNewResp/3}).
merge_msg_PlayerNewResp(#'PlayerNewResp'{error =
                                             PFerror},
                        #'PlayerNewResp'{status = NFstatus, error = NFerror},
                        _) ->
    #'PlayerNewResp'{status = NFstatus,
                     error =
                         if NFerror =:= undefined -> PFerror;
                            true -> NFerror
                         end}.

-compile({nowarn_unused_function,merge_msg_PlayerAuthenticate/3}).
merge_msg_PlayerAuthenticate(#'PlayerAuthenticate'{},
                             #'PlayerAuthenticate'{id = NFid}, _) ->
    #'PlayerAuthenticate'{id = NFid}.

-compile({nowarn_unused_function,merge_msg_PlayerLog/3}).
merge_msg_PlayerLog(#'PlayerLog'{},
                    #'PlayerLog'{msg = NFmsg}, _) ->
    #'PlayerLog'{msg = NFmsg}.

-compile({nowarn_unused_function,merge_msg_LobbyInfo/3}).
merge_msg_LobbyInfo(#'LobbyInfo'{resp = PFresp,
                                 matches = PFmatches},
                    #'LobbyInfo'{resp = NFresp, matches = NFmatches},
                    TrUserData) ->
    #'LobbyInfo'{resp =
                     merge_msg_ResponseObject(PFresp, NFresp, TrUserData),
                 matches =
                     if PFmatches /= undefined, NFmatches /= undefined ->
                            'erlang_++'(PFmatches, NFmatches, TrUserData);
                        PFmatches == undefined -> NFmatches;
                        NFmatches == undefined -> PFmatches
                     end}.

-compile({nowarn_unused_function,merge_msg_MatchCreateReq/3}).
merge_msg_MatchCreateReq(#'MatchCreateReq'{extra =
                                               PFextra},
                         #'MatchCreateReq'{mode = NFmode,
                                           players_max = NFplayers_max,
                                           extra = NFextra},
                         _) ->
    #'MatchCreateReq'{mode = NFmode,
                      players_max = NFplayers_max,
                      extra =
                          if NFextra =:= undefined -> PFextra;
                             true -> NFextra
                          end}.

-compile({nowarn_unused_function,merge_msg_MatchCreateResp/3}).
merge_msg_MatchCreateResp(#'MatchCreateResp'{resp =
                                                 PFresp,
                                             match = PFmatch},
                          #'MatchCreateResp'{resp = NFresp, match = NFmatch},
                          TrUserData) ->
    #'MatchCreateResp'{resp =
                           merge_msg_ResponseObject(PFresp, NFresp, TrUserData),
                       match =
                           if PFmatch /= undefined, NFmatch /= undefined ->
                                  merge_msg_MatchInfo(PFmatch,
                                                      NFmatch,
                                                      TrUserData);
                              PFmatch == undefined -> NFmatch;
                              NFmatch == undefined -> PFmatch
                           end}.

-compile({nowarn_unused_function,merge_msg_MatchJoinReq/3}).
merge_msg_MatchJoinReq(#'MatchJoinReq'{},
                       #'MatchJoinReq'{player = NFplayer, matchid = NFmatchid},
                       _) ->
    #'MatchJoinReq'{player = NFplayer, matchid = NFmatchid}.

-compile({nowarn_unused_function,merge_msg_MatchJoinResp/3}).
merge_msg_MatchJoinResp(#'MatchJoinResp'{resp = PFresp,
                                         match = PFmatch},
                        #'MatchJoinResp'{resp = NFresp, match = NFmatch},
                        TrUserData) ->
    #'MatchJoinResp'{resp =
                         merge_msg_ResponseObject(PFresp, NFresp, TrUserData),
                     match =
                         if PFmatch /= undefined, NFmatch /= undefined ->
                                merge_msg_MatchInfo(PFmatch,
                                                    NFmatch,
                                                    TrUserData);
                            PFmatch == undefined -> NFmatch;
                            NFmatch == undefined -> PFmatch
                         end}.

-compile({nowarn_unused_function,merge_msg_MatchLeaveReq/3}).
merge_msg_MatchLeaveReq(#'MatchLeaveReq'{},
                        #'MatchLeaveReq'{player = NFplayer,
                                         matchid = NFmatchid},
                        _) ->
    #'MatchLeaveReq'{player = NFplayer,
                     matchid = NFmatchid}.

-compile({nowarn_unused_function,merge_msg_MatchLeaveResp/3}).
merge_msg_MatchLeaveResp(#'MatchLeaveResp'{resp =
                                               PFresp},
                         #'MatchLeaveResp'{resp = NFresp}, TrUserData) ->
    #'MatchLeaveResp'{resp =
                          merge_msg_ResponseObject(PFresp, NFresp, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_MatchStartReq/3}).
merge_msg_MatchStartReq(#'MatchStartReq'{},
                        #'MatchStartReq'{player = NFplayer,
                                         matchid = NFmatchid},
                        _) ->
    #'MatchStartReq'{player = NFplayer,
                     matchid = NFmatchid}.

-compile({nowarn_unused_function,merge_msg_MatchStartResp/3}).
merge_msg_MatchStartResp(#'MatchStartResp'{resp =
                                               PFresp},
                         #'MatchStartResp'{resp = NFresp}, TrUserData) ->
    #'MatchStartResp'{resp =
                          merge_msg_ResponseObject(PFresp, NFresp, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_MatchInfoReq/3}).
merge_msg_MatchInfoReq(#'MatchInfoReq'{},
                       #'MatchInfoReq'{player = NFplayer, matchid = NFmatchid},
                       _) ->
    #'MatchInfoReq'{player = NFplayer, matchid = NFmatchid}.

-compile({nowarn_unused_function,merge_msg_MatchInfoResp/3}).
merge_msg_MatchInfoResp(#'MatchInfoResp'{resp = PFresp,
                                         match = PFmatch},
                        #'MatchInfoResp'{resp = NFresp, match = NFmatch},
                        TrUserData) ->
    #'MatchInfoResp'{resp =
                         merge_msg_ResponseObject(PFresp, NFresp, TrUserData),
                     match =
                         if PFmatch /= undefined, NFmatch /= undefined ->
                                merge_msg_MatchInfo(PFmatch,
                                                    NFmatch,
                                                    TrUserData);
                            PFmatch == undefined -> NFmatch;
                            NFmatch == undefined -> PFmatch
                         end}.

-compile({nowarn_unused_function,'merge_msg_MatchStateResp.Tile'/3}).
'merge_msg_MatchStateResp.Tile'(#'MatchStateResp.Tile'{occupant
                                                           = PFoccupant,
                                                       flags = PFflags},
                                #'MatchStateResp.Tile'{x = NFx, y = NFy,
                                                       type = NFtype,
                                                       occupant = NFoccupant,
                                                       flags = NFflags},
                                TrUserData) ->
    #'MatchStateResp.Tile'{x = NFx, y = NFy, type = NFtype,
                           occupant =
                               if PFoccupant /= undefined,
                                  NFoccupant /= undefined ->
                                      'erlang_++'(PFoccupant,
                                                  NFoccupant,
                                                  TrUserData);
                                  PFoccupant == undefined -> NFoccupant;
                                  NFoccupant == undefined -> PFoccupant
                               end,
                           flags =
                               if PFflags /= undefined, NFflags /= undefined ->
                                      'erlang_++'(PFflags, NFflags, TrUserData);
                                  PFflags == undefined -> NFflags;
                                  NFflags == undefined -> PFflags
                               end}.

-compile({nowarn_unused_function,'merge_msg_MatchStateResp.Action'/3}).
'merge_msg_MatchStateResp.Action'(#'MatchStateResp.Action'{},
                                  #'MatchStateResp.Action'{phase = NFphase,
                                                           name = NFname,
                                                           type = NFtype,
                                                           x_from = NFx_from,
                                                           y_from = NFy_from,
                                                           x_to = NFx_to,
                                                           y_to = NFy_to},
                                  _) ->
    #'MatchStateResp.Action'{phase = NFphase, name = NFname,
                             type = NFtype, x_from = NFx_from,
                             y_from = NFy_from, x_to = NFx_to, y_to = NFy_to}.

-compile({nowarn_unused_function,merge_msg_MatchStateResp/3}).
merge_msg_MatchStateResp(#'MatchStateResp'{tile =
                                               PFtile,
                                           playerlist = PFplayerlist,
                                           readyplayers = PFreadyplayers,
                                           actions = PFactions},
                         #'MatchStateResp'{state = NFstate, tile = NFtile,
                                           playerlist = NFplayerlist,
                                           readyplayers = NFreadyplayers,
                                           actions = NFactions},
                         TrUserData) ->
    #'MatchStateResp'{state = NFstate,
                      tile =
                          if PFtile /= undefined, NFtile /= undefined ->
                                 'erlang_++'(PFtile, NFtile, TrUserData);
                             PFtile == undefined -> NFtile;
                             NFtile == undefined -> PFtile
                          end,
                      playerlist =
                          if PFplayerlist /= undefined,
                             NFplayerlist /= undefined ->
                                 'erlang_++'(PFplayerlist,
                                             NFplayerlist,
                                             TrUserData);
                             PFplayerlist == undefined -> NFplayerlist;
                             NFplayerlist == undefined -> PFplayerlist
                          end,
                      readyplayers =
                          if PFreadyplayers /= undefined,
                             NFreadyplayers /= undefined ->
                                 'erlang_++'(PFreadyplayers,
                                             NFreadyplayers,
                                             TrUserData);
                             PFreadyplayers == undefined -> NFreadyplayers;
                             NFreadyplayers == undefined -> PFreadyplayers
                          end,
                      actions =
                          if PFactions /= undefined, NFactions /= undefined ->
                                 'erlang_++'(PFactions, NFactions, TrUserData);
                             PFactions == undefined -> NFactions;
                             NFactions == undefined -> PFactions
                          end}.

-compile({nowarn_unused_function,merge_msg_MatchPrepReq/3}).
merge_msg_MatchPrepReq(#'MatchPrepReq'{},
                       #'MatchPrepReq'{player = NFplayer, matchid = NFmatchid},
                       _) ->
    #'MatchPrepReq'{player = NFplayer, matchid = NFmatchid}.

-compile({nowarn_unused_function,merge_msg_MatchPrepResp/3}).
merge_msg_MatchPrepResp(#'MatchPrepResp'{resp = PFresp},
                        #'MatchPrepResp'{resp = NFresp}, TrUserData) ->
    #'MatchPrepResp'{resp =
                         merge_msg_ResponseObject(PFresp, NFresp, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_MatchDecideReq/3}).
merge_msg_MatchDecideReq(#'MatchDecideReq'{},
                         #'MatchDecideReq'{player = NFplayer,
                                           actions = NFactions,
                                           matchid = NFmatchid},
                         _) ->
    #'MatchDecideReq'{player = NFplayer,
                      actions = NFactions, matchid = NFmatchid}.

-compile({nowarn_unused_function,merge_msg_MatchDecideResp/3}).
merge_msg_MatchDecideResp(#'MatchDecideResp'{resp =
                                                 PFresp},
                          #'MatchDecideResp'{resp = NFresp}, TrUserData) ->
    #'MatchDecideResp'{resp =
                           merge_msg_ResponseObject(PFresp,
                                                    NFresp,
                                                    TrUserData)}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ResponseObject' ->
            v_msg_ResponseObject(Msg, [MsgName], TrUserData);
        'MatchInfo.Player' ->
            'v_msg_MatchInfo.Player'(Msg, [MsgName], TrUserData);
        'MatchInfo' ->
            v_msg_MatchInfo(Msg, [MsgName], TrUserData);
        'AccountNewReq' ->
            v_msg_AccountNewReq(Msg, [MsgName], TrUserData);
        'AccountNewResp' ->
            v_msg_AccountNewResp(Msg, [MsgName], TrUserData);
        'AccountLoginReq' ->
            v_msg_AccountLoginReq(Msg, [MsgName], TrUserData);
        'AccountLoginResp.Player' ->
            'v_msg_AccountLoginResp.Player'(Msg,
                                            [MsgName],
                                            TrUserData);
        'AccountLoginResp' ->
            v_msg_AccountLoginResp(Msg, [MsgName], TrUserData);
        'PlayerNewReq' ->
            v_msg_PlayerNewReq(Msg, [MsgName], TrUserData);
        'PlayerNewResp' ->
            v_msg_PlayerNewResp(Msg, [MsgName], TrUserData);
        'PlayerAuthenticate' ->
            v_msg_PlayerAuthenticate(Msg, [MsgName], TrUserData);
        'PlayerLog' ->
            v_msg_PlayerLog(Msg, [MsgName], TrUserData);
        'LobbyInfo' ->
            v_msg_LobbyInfo(Msg, [MsgName], TrUserData);
        'MatchCreateReq' ->
            v_msg_MatchCreateReq(Msg, [MsgName], TrUserData);
        'MatchCreateResp' ->
            v_msg_MatchCreateResp(Msg, [MsgName], TrUserData);
        'MatchJoinReq' ->
            v_msg_MatchJoinReq(Msg, [MsgName], TrUserData);
        'MatchJoinResp' ->
            v_msg_MatchJoinResp(Msg, [MsgName], TrUserData);
        'MatchLeaveReq' ->
            v_msg_MatchLeaveReq(Msg, [MsgName], TrUserData);
        'MatchLeaveResp' ->
            v_msg_MatchLeaveResp(Msg, [MsgName], TrUserData);
        'MatchStartReq' ->
            v_msg_MatchStartReq(Msg, [MsgName], TrUserData);
        'MatchStartResp' ->
            v_msg_MatchStartResp(Msg, [MsgName], TrUserData);
        'MatchInfoReq' ->
            v_msg_MatchInfoReq(Msg, [MsgName], TrUserData);
        'MatchInfoResp' ->
            v_msg_MatchInfoResp(Msg, [MsgName], TrUserData);
        'MatchStateResp.Tile' ->
            'v_msg_MatchStateResp.Tile'(Msg, [MsgName], TrUserData);
        'MatchStateResp.Action' ->
            'v_msg_MatchStateResp.Action'(Msg,
                                          [MsgName],
                                          TrUserData);
        'MatchStateResp' ->
            v_msg_MatchStateResp(Msg, [MsgName], TrUserData);
        'MatchPrepReq' ->
            v_msg_MatchPrepReq(Msg, [MsgName], TrUserData);
        'MatchPrepResp' ->
            v_msg_MatchPrepResp(Msg, [MsgName], TrUserData);
        'MatchDecideReq' ->
            v_msg_MatchDecideReq(Msg, [MsgName], TrUserData);
        'MatchDecideResp' ->
            v_msg_MatchDecideResp(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ResponseObject/3}).
-dialyzer({nowarn_function,v_msg_ResponseObject/3}).
v_msg_ResponseObject(#'ResponseObject'{status = F1,
                                       error = F2},
                     Path, TrUserData) ->
    'v_enum_ResponseObject.Status'(F1,
                                   [status | Path],
                                   TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
v_msg_ResponseObject(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseObject'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_msg_MatchInfo.Player'/3}).
-dialyzer({nowarn_function,'v_msg_MatchInfo.Player'/3}).
'v_msg_MatchInfo.Player'(#'MatchInfo.Player'{name = F1},
                         Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    ok;
'v_msg_MatchInfo.Player'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchInfo.Player'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchInfo/3}).
-dialyzer({nowarn_function,v_msg_MatchInfo/3}).
v_msg_MatchInfo(#'MatchInfo'{id = F1, state = F2,
                             players = F3, players_max = F4, start_time = F5,
                             mode = F6, duration = F7, extra = F8},
                Path, TrUserData) ->
    v_type_uint32(F1, [id | Path], TrUserData),
    v_enum_MatchState(F2, [state | Path], TrUserData),
    if is_list(F3) ->
           _ = ['v_msg_MatchInfo.Player'(Elem,
                                         [players | Path],
                                         TrUserData)
                || Elem <- F3],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, 'MatchInfo.Player'}},
                         F3,
                         [players | Path])
    end,
    v_type_uint32(F4, [players_max | Path], TrUserData),
    v_type_uint64(F5, [start_time | Path], TrUserData),
    v_enum_MatchMode(F6, [mode | Path], TrUserData),
    v_type_uint32(F7, [duration | Path], TrUserData),
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [extra | Path], TrUserData)
    end,
    ok;
v_msg_MatchInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_AccountNewReq/3}).
-dialyzer({nowarn_function,v_msg_AccountNewReq/3}).
v_msg_AccountNewReq(#'AccountNewReq'{email = F1,
                                     password = F2},
                    Path, TrUserData) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_AccountNewReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AccountNewReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_AccountNewResp/3}).
-dialyzer({nowarn_function,v_msg_AccountNewResp/3}).
v_msg_AccountNewResp(#'AccountNewResp'{status = F1,
                                       error = F2},
                     Path, TrUserData) ->
    'v_enum_AccountNewResp.Status'(F1,
                                   [status | Path],
                                   TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
v_msg_AccountNewResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AccountNewResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_AccountLoginReq/3}).
-dialyzer({nowarn_function,v_msg_AccountLoginReq/3}).
v_msg_AccountLoginReq(#'AccountLoginReq'{email = F1,
                                         password = F2},
                      Path, TrUserData) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_AccountLoginReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AccountLoginReq'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_msg_AccountLoginResp.Player'/3}).
-dialyzer({nowarn_function,'v_msg_AccountLoginResp.Player'/3}).
'v_msg_AccountLoginResp.Player'(#'AccountLoginResp.Player'{name
                                                               = F1},
                                Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    ok;
'v_msg_AccountLoginResp.Player'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AccountLoginResp.Player'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_AccountLoginResp/3}).
-dialyzer({nowarn_function,v_msg_AccountLoginResp/3}).
v_msg_AccountLoginResp(#'AccountLoginResp'{status = F1,
                                           players = F2, error = F3},
                       Path, TrUserData) ->
    'v_enum_AccountLoginResp.Status'(F1,
                                     [status | Path],
                                     TrUserData),
    if is_list(F2) ->
           _ = ['v_msg_AccountLoginResp.Player'(Elem,
                                                [players | Path],
                                                TrUserData)
                || Elem <- F2],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, 'AccountLoginResp.Player'}},
                         F2,
                         [players | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [error | Path], TrUserData)
    end,
    ok;
v_msg_AccountLoginResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AccountLoginResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_PlayerNewReq/3}).
-dialyzer({nowarn_function,v_msg_PlayerNewReq/3}).
v_msg_PlayerNewReq(#'PlayerNewReq'{name = F1,
                                   appearance = F2, role = F3},
                   Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_uint32(F2, [appearance | Path], TrUserData),
    v_enum_PlayerRole(F3, [role | Path], TrUserData),
    ok;
v_msg_PlayerNewReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerNewReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_PlayerNewResp/3}).
-dialyzer({nowarn_function,v_msg_PlayerNewResp/3}).
v_msg_PlayerNewResp(#'PlayerNewResp'{status = F1,
                                     error = F2},
                    Path, TrUserData) ->
    'v_enum_PlayerNewResp.Status'(F1,
                                  [status | Path],
                                  TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
v_msg_PlayerNewResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerNewResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_PlayerAuthenticate/3}).
-dialyzer({nowarn_function,v_msg_PlayerAuthenticate/3}).
v_msg_PlayerAuthenticate(#'PlayerAuthenticate'{id = F1},
                         Path, TrUserData) ->
    v_type_bytes(F1, [id | Path], TrUserData),
    ok;
v_msg_PlayerAuthenticate(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerAuthenticate'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_PlayerLog/3}).
-dialyzer({nowarn_function,v_msg_PlayerLog/3}).
v_msg_PlayerLog(#'PlayerLog'{msg = F1}, Path,
                TrUserData) ->
    v_type_string(F1, [msg | Path], TrUserData),
    ok;
v_msg_PlayerLog(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayerLog'}, X, Path).

-compile({nowarn_unused_function,v_msg_LobbyInfo/3}).
-dialyzer({nowarn_function,v_msg_LobbyInfo/3}).
v_msg_LobbyInfo(#'LobbyInfo'{resp = F1, matches = F2},
                Path, TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_msg_MatchInfo(Elem, [matches | Path], TrUserData)
                || Elem <- F2],
           ok;
       true ->
           mk_type_error({invalid_list_of, {msg, 'MatchInfo'}},
                         F2,
                         [matches | Path])
    end,
    ok;
v_msg_LobbyInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LobbyInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchCreateReq/3}).
-dialyzer({nowarn_function,v_msg_MatchCreateReq/3}).
v_msg_MatchCreateReq(#'MatchCreateReq'{mode = F1,
                                       players_max = F2, extra = F3},
                     Path, TrUserData) ->
    v_enum_MatchMode(F1, [mode | Path], TrUserData),
    v_type_uint32(F2, [players_max | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [extra | Path], TrUserData)
    end,
    ok;
v_msg_MatchCreateReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchCreateReq'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchCreateResp/3}).
-dialyzer({nowarn_function,v_msg_MatchCreateResp/3}).
v_msg_MatchCreateResp(#'MatchCreateResp'{resp = F1,
                                         match = F2},
                      Path, TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_MatchInfo(F2, [match | Path], TrUserData)
    end,
    ok;
v_msg_MatchCreateResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchCreateResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchJoinReq/3}).
-dialyzer({nowarn_function,v_msg_MatchJoinReq/3}).
v_msg_MatchJoinReq(#'MatchJoinReq'{player = F1,
                                   matchid = F2},
                   Path, TrUserData) ->
    v_type_string(F1, [player | Path], TrUserData),
    v_type_uint32(F2, [matchid | Path], TrUserData),
    ok;
v_msg_MatchJoinReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchJoinReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchJoinResp/3}).
-dialyzer({nowarn_function,v_msg_MatchJoinResp/3}).
v_msg_MatchJoinResp(#'MatchJoinResp'{resp = F1,
                                     match = F2},
                    Path, TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_MatchInfo(F2, [match | Path], TrUserData)
    end,
    ok;
v_msg_MatchJoinResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchJoinResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchLeaveReq/3}).
-dialyzer({nowarn_function,v_msg_MatchLeaveReq/3}).
v_msg_MatchLeaveReq(#'MatchLeaveReq'{player = F1,
                                     matchid = F2},
                    Path, TrUserData) ->
    v_type_string(F1, [player | Path], TrUserData),
    v_type_uint32(F2, [matchid | Path], TrUserData),
    ok;
v_msg_MatchLeaveReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchLeaveReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchLeaveResp/3}).
-dialyzer({nowarn_function,v_msg_MatchLeaveResp/3}).
v_msg_MatchLeaveResp(#'MatchLeaveResp'{resp = F1}, Path,
                     TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    ok;
v_msg_MatchLeaveResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchLeaveResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchStartReq/3}).
-dialyzer({nowarn_function,v_msg_MatchStartReq/3}).
v_msg_MatchStartReq(#'MatchStartReq'{player = F1,
                                     matchid = F2},
                    Path, TrUserData) ->
    v_type_string(F1, [player | Path], TrUserData),
    v_type_uint32(F2, [matchid | Path], TrUserData),
    ok;
v_msg_MatchStartReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchStartReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchStartResp/3}).
-dialyzer({nowarn_function,v_msg_MatchStartResp/3}).
v_msg_MatchStartResp(#'MatchStartResp'{resp = F1}, Path,
                     TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    ok;
v_msg_MatchStartResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchStartResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchInfoReq/3}).
-dialyzer({nowarn_function,v_msg_MatchInfoReq/3}).
v_msg_MatchInfoReq(#'MatchInfoReq'{player = F1,
                                   matchid = F2},
                   Path, TrUserData) ->
    v_type_string(F1, [player | Path], TrUserData),
    v_type_uint32(F2, [matchid | Path], TrUserData),
    ok;
v_msg_MatchInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchInfoResp/3}).
-dialyzer({nowarn_function,v_msg_MatchInfoResp/3}).
v_msg_MatchInfoResp(#'MatchInfoResp'{resp = F1,
                                     match = F2},
                    Path, TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_MatchInfo(F2, [match | Path], TrUserData)
    end,
    ok;
v_msg_MatchInfoResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchInfoResp'}, X, Path).

-compile({nowarn_unused_function,'v_msg_MatchStateResp.Tile'/3}).
-dialyzer({nowarn_function,'v_msg_MatchStateResp.Tile'/3}).
'v_msg_MatchStateResp.Tile'(#'MatchStateResp.Tile'{x =
                                                       F1,
                                                   y = F2, type = F3,
                                                   occupant = F4, flags = F5},
                            Path, TrUserData) ->
    v_type_int32(F1, [x | Path], TrUserData),
    v_type_int32(F2, [y | Path], TrUserData),
    v_type_string(F3, [type | Path], TrUserData),
    if is_list(F4) ->
           _ = [v_type_string(Elem, [occupant | Path], TrUserData)
                || Elem <- F4],
           ok;
       true ->
           mk_type_error({invalid_list_of, string},
                         F4,
                         [occupant | Path])
    end,
    if is_list(F5) ->
           _ = [v_type_string(Elem, [flags | Path], TrUserData)
                || Elem <- F5],
           ok;
       true ->
           mk_type_error({invalid_list_of, string},
                         F5,
                         [flags | Path])
    end,
    ok;
'v_msg_MatchStateResp.Tile'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchStateResp.Tile'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_msg_MatchStateResp.Action'/3}).
-dialyzer({nowarn_function,'v_msg_MatchStateResp.Action'/3}).
'v_msg_MatchStateResp.Action'(#'MatchStateResp.Action'{phase
                                                           = F1,
                                                       name = F2, type = F3,
                                                       x_from = F4, y_from = F5,
                                                       x_to = F6, y_to = F7},
                              Path, TrUserData) ->
    v_type_int32(F1, [phase | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_enum_ItemAction(F3, [type | Path], TrUserData),
    v_type_int32(F4, [x_from | Path], TrUserData),
    v_type_int32(F5, [y_from | Path], TrUserData),
    v_type_int32(F6, [x_to | Path], TrUserData),
    v_type_int32(F7, [y_to | Path], TrUserData),
    ok;
'v_msg_MatchStateResp.Action'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchStateResp.Action'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchStateResp/3}).
-dialyzer({nowarn_function,v_msg_MatchStateResp/3}).
v_msg_MatchStateResp(#'MatchStateResp'{state = F1,
                                       tile = F2, playerlist = F3,
                                       readyplayers = F4, actions = F5},
                     Path, TrUserData) ->
    v_enum_MatchStateMachine(F1,
                             [state | Path],
                             TrUserData),
    if is_list(F2) ->
           _ = ['v_msg_MatchStateResp.Tile'(Elem,
                                            [tile | Path],
                                            TrUserData)
                || Elem <- F2],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, 'MatchStateResp.Tile'}},
                         F2,
                         [tile | Path])
    end,
    if is_list(F3) ->
           _ = [v_type_string(Elem,
                              [playerlist | Path],
                              TrUserData)
                || Elem <- F3],
           ok;
       true ->
           mk_type_error({invalid_list_of, string},
                         F3,
                         [playerlist | Path])
    end,
    if is_list(F4) ->
           _ = [v_type_string(Elem,
                              [readyplayers | Path],
                              TrUserData)
                || Elem <- F4],
           ok;
       true ->
           mk_type_error({invalid_list_of, string},
                         F4,
                         [readyplayers | Path])
    end,
    if is_list(F5) ->
           _ = ['v_msg_MatchStateResp.Action'(Elem,
                                              [actions | Path],
                                              TrUserData)
                || Elem <- F5],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, 'MatchStateResp.Action'}},
                         F5,
                         [actions | Path])
    end,
    ok;
v_msg_MatchStateResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchStateResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchPrepReq/3}).
-dialyzer({nowarn_function,v_msg_MatchPrepReq/3}).
v_msg_MatchPrepReq(#'MatchPrepReq'{player = F1,
                                   matchid = F2},
                   Path, TrUserData) ->
    v_type_string(F1, [player | Path], TrUserData),
    v_type_uint32(F2, [matchid | Path], TrUserData),
    ok;
v_msg_MatchPrepReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchPrepReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchPrepResp/3}).
-dialyzer({nowarn_function,v_msg_MatchPrepResp/3}).
v_msg_MatchPrepResp(#'MatchPrepResp'{resp = F1}, Path,
                    TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    ok;
v_msg_MatchPrepResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchPrepResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_MatchDecideReq/3}).
-dialyzer({nowarn_function,v_msg_MatchDecideReq/3}).
v_msg_MatchDecideReq(#'MatchDecideReq'{player = F1,
                                       actions = F2, matchid = F3},
                     Path, TrUserData) ->
    v_type_string(F1, [player | Path], TrUserData),
    v_type_string(F2, [actions | Path], TrUserData),
    v_type_uint32(F3, [matchid | Path], TrUserData),
    ok;
v_msg_MatchDecideReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchDecideReq'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_MatchDecideResp/3}).
-dialyzer({nowarn_function,v_msg_MatchDecideResp/3}).
v_msg_MatchDecideResp(#'MatchDecideResp'{resp = F1},
                      Path, TrUserData) ->
    v_msg_ResponseObject(F1, [resp | Path], TrUserData),
    ok;
v_msg_MatchDecideResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchDecideResp'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_enum_MatchState/3}).
-dialyzer({nowarn_function,v_enum_MatchState/3}).
v_enum_MatchState('CREATING', _Path, _TrUserData) -> ok;
v_enum_MatchState('PLAYING', _Path, _TrUserData) -> ok;
v_enum_MatchState('FINISHING', _Path, _TrUserData) ->
    ok;
v_enum_MatchState(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_MatchState(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'MatchState'}, X, Path).

-compile({nowarn_unused_function,v_enum_MatchMode/3}).
-dialyzer({nowarn_function,v_enum_MatchMode/3}).
v_enum_MatchMode('DEFAULT', _Path, _TrUserData) -> ok;
v_enum_MatchMode('BLITZ', _Path, _TrUserData) -> ok;
v_enum_MatchMode('STRATEGIC', _Path, _TrUserData) -> ok;
v_enum_MatchMode(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_MatchMode(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'MatchMode'}, X, Path).

-compile({nowarn_unused_function,v_enum_MatchStateMachine/3}).
-dialyzer({nowarn_function,v_enum_MatchStateMachine/3}).
v_enum_MatchStateMachine('PREPARE', _Path,
                         _TrUserData) ->
    ok;
v_enum_MatchStateMachine('DECIDE', _Path,
                         _TrUserData) ->
    ok;
v_enum_MatchStateMachine('EXECUTE', _Path,
                         _TrUserData) ->
    ok;
v_enum_MatchStateMachine('FINISH', _Path,
                         _TrUserData) ->
    ok;
v_enum_MatchStateMachine(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_MatchStateMachine(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'MatchStateMachine'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_enum_PlayerRole/3}).
-dialyzer({nowarn_function,v_enum_PlayerRole/3}).
v_enum_PlayerRole('DESTROYER', _Path, _TrUserData) ->
    ok;
v_enum_PlayerRole('INTERCEPTOR', _Path, _TrUserData) ->
    ok;
v_enum_PlayerRole('CARRIER', _Path, _TrUserData) -> ok;
v_enum_PlayerRole('COMMAND', _Path, _TrUserData) -> ok;
v_enum_PlayerRole(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_PlayerRole(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'PlayerRole'}, X, Path).

-compile({nowarn_unused_function,v_enum_ItemAction/3}).
-dialyzer({nowarn_function,v_enum_ItemAction/3}).
v_enum_ItemAction('SELF', _Path, _TrUserData) -> ok;
v_enum_ItemAction('DIRECT', _Path, _TrUserData) -> ok;
v_enum_ItemAction('LINEAR', _Path, _TrUserData) -> ok;
v_enum_ItemAction('AREA', _Path, _TrUserData) -> ok;
v_enum_ItemAction(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_ItemAction(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ItemAction'}, X, Path).

-compile({nowarn_unused_function,'v_enum_ResponseObject.Status'/3}).
-dialyzer({nowarn_function,'v_enum_ResponseObject.Status'/3}).
'v_enum_ResponseObject.Status'('OK', _Path,
                               _TrUserData) ->
    ok;
'v_enum_ResponseObject.Status'('ERROR', _Path,
                               _TrUserData) ->
    ok;
'v_enum_ResponseObject.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ResponseObject.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ResponseObject.Status'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_AccountNewResp.Status'/3}).
-dialyzer({nowarn_function,'v_enum_AccountNewResp.Status'/3}).
'v_enum_AccountNewResp.Status'('OK', _Path,
                               _TrUserData) ->
    ok;
'v_enum_AccountNewResp.Status'('ERROR', _Path,
                               _TrUserData) ->
    ok;
'v_enum_AccountNewResp.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_AccountNewResp.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'AccountNewResp.Status'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_AccountLoginResp.Status'/3}).
-dialyzer({nowarn_function,'v_enum_AccountLoginResp.Status'/3}).
'v_enum_AccountLoginResp.Status'('OK', _Path,
                                 _TrUserData) ->
    ok;
'v_enum_AccountLoginResp.Status'('ERROR', _Path,
                                 _TrUserData) ->
    ok;
'v_enum_AccountLoginResp.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_AccountLoginResp.Status'(X, Path,
                                 _TrUserData) ->
    mk_type_error({invalid_enum, 'AccountLoginResp.Status'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_PlayerNewResp.Status'/3}).
-dialyzer({nowarn_function,'v_enum_PlayerNewResp.Status'/3}).
'v_enum_PlayerNewResp.Status'('OK', _Path,
                              _TrUserData) ->
    ok;
'v_enum_PlayerNewResp.Status'('ERROR', _Path,
                              _TrUserData) ->
    ok;
'v_enum_PlayerNewResp.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_PlayerNewResp.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'PlayerNewResp.Status'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
                  N,
                  Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint32,
                   unsigned,
                   32},
                  N,
                  Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint64,
                   unsigned,
                   64},
                  N,
                  Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'MatchState'},
      [{'CREATING', 0}, {'PLAYING', 1}, {'FINISHING', 2}]},
     {{enum, 'MatchMode'},
      [{'DEFAULT', 0}, {'BLITZ', 1}, {'STRATEGIC', 2}]},
     {{enum, 'MatchStateMachine'},
      [{'PREPARE', 0},
       {'DECIDE', 1},
       {'EXECUTE', 2},
       {'FINISH', 3}]},
     {{enum, 'PlayerRole'},
      [{'DESTROYER', 0},
       {'INTERCEPTOR', 1},
       {'CARRIER', 2},
       {'COMMAND', 3}]},
     {{enum, 'ItemAction'},
      [{'SELF', 0},
       {'DIRECT', 1},
       {'LINEAR', 2},
       {'AREA', 3}]},
     {{enum, 'ResponseObject.Status'},
      [{'OK', 0}, {'ERROR', 1}]},
     {{enum, 'AccountNewResp.Status'},
      [{'OK', 0}, {'ERROR', 1}]},
     {{enum, 'AccountLoginResp.Status'},
      [{'OK', 0}, {'ERROR', 1}]},
     {{enum, 'PlayerNewResp.Status'},
      [{'OK', 0}, {'ERROR', 1}]},
     {{msg, 'ResponseObject'},
      [#field{name = status, fnum = 1, rnum = 2,
              type = {enum, 'ResponseObject.Status'},
              occurrence = required, opts = []},
       #field{name = error, fnum = 2, rnum = 3, type = string,
              occurrence = optional, opts = []}]},
     {{msg, 'MatchInfo.Player'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
              occurrence = required, opts = []}]},
     {{msg, 'MatchInfo'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
              occurrence = required, opts = []},
       #field{name = state, fnum = 2, rnum = 3,
              type = {enum, 'MatchState'}, occurrence = required,
              opts = []},
       #field{name = players, fnum = 3, rnum = 4,
              type = {msg, 'MatchInfo.Player'}, occurrence = repeated,
              opts = []},
       #field{name = players_max, fnum = 4, rnum = 5,
              type = uint32, occurrence = required, opts = []},
       #field{name = start_time, fnum = 5, rnum = 6,
              type = uint64, occurrence = required, opts = []},
       #field{name = mode, fnum = 6, rnum = 7,
              type = {enum, 'MatchMode'}, occurrence = required,
              opts = []},
       #field{name = duration, fnum = 7, rnum = 8,
              type = uint32, occurrence = required, opts = []},
       #field{name = extra, fnum = 8, rnum = 9, type = bytes,
              occurrence = optional, opts = []}]},
     {{msg, 'AccountNewReq'},
      [#field{name = email, fnum = 1, rnum = 2, type = string,
              occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
              type = string, occurrence = required, opts = []}]},
     {{msg, 'AccountNewResp'},
      [#field{name = status, fnum = 1, rnum = 2,
              type = {enum, 'AccountNewResp.Status'},
              occurrence = required, opts = []},
       #field{name = error, fnum = 2, rnum = 3, type = string,
              occurrence = optional, opts = []}]},
     {{msg, 'AccountLoginReq'},
      [#field{name = email, fnum = 1, rnum = 2, type = string,
              occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
              type = string, occurrence = required, opts = []}]},
     {{msg, 'AccountLoginResp.Player'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
              occurrence = required, opts = []}]},
     {{msg, 'AccountLoginResp'},
      [#field{name = status, fnum = 1, rnum = 2,
              type = {enum, 'AccountLoginResp.Status'},
              occurrence = required, opts = []},
       #field{name = players, fnum = 2, rnum = 3,
              type = {msg, 'AccountLoginResp.Player'},
              occurrence = repeated, opts = []},
       #field{name = error, fnum = 3, rnum = 4, type = string,
              occurrence = optional, opts = []}]},
     {{msg, 'PlayerNewReq'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
              occurrence = required, opts = []},
       #field{name = appearance, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []},
       #field{name = role, fnum = 3, rnum = 4,
              type = {enum, 'PlayerRole'}, occurrence = required,
              opts = []}]},
     {{msg, 'PlayerNewResp'},
      [#field{name = status, fnum = 1, rnum = 2,
              type = {enum, 'PlayerNewResp.Status'},
              occurrence = required, opts = []},
       #field{name = error, fnum = 3, rnum = 3, type = string,
              occurrence = optional, opts = []}]},
     {{msg, 'PlayerAuthenticate'},
      [#field{name = id, fnum = 1, rnum = 2, type = bytes,
              occurrence = required, opts = []}]},
     {{msg, 'PlayerLog'},
      [#field{name = msg, fnum = 2, rnum = 2, type = string,
              occurrence = required, opts = []}]},
     {{msg, 'LobbyInfo'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []},
       #field{name = matches, fnum = 2, rnum = 3,
              type = {msg, 'MatchInfo'}, occurrence = repeated,
              opts = []}]},
     {{msg, 'MatchCreateReq'},
      [#field{name = mode, fnum = 1, rnum = 2,
              type = {enum, 'MatchMode'}, occurrence = required,
              opts = []},
       #field{name = players_max, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []},
       #field{name = extra, fnum = 3, rnum = 4, type = bytes,
              occurrence = optional, opts = []}]},
     {{msg, 'MatchCreateResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []},
       #field{name = match, fnum = 2, rnum = 3,
              type = {msg, 'MatchInfo'}, occurrence = optional,
              opts = []}]},
     {{msg, 'MatchJoinReq'},
      [#field{name = player, fnum = 1, rnum = 2,
              type = string, occurrence = required, opts = []},
       #field{name = matchid, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []}]},
     {{msg, 'MatchJoinResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []},
       #field{name = match, fnum = 2, rnum = 3,
              type = {msg, 'MatchInfo'}, occurrence = optional,
              opts = []}]},
     {{msg, 'MatchLeaveReq'},
      [#field{name = player, fnum = 1, rnum = 2,
              type = string, occurrence = required, opts = []},
       #field{name = matchid, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []}]},
     {{msg, 'MatchLeaveResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []}]},
     {{msg, 'MatchStartReq'},
      [#field{name = player, fnum = 1, rnum = 2,
              type = string, occurrence = required, opts = []},
       #field{name = matchid, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []}]},
     {{msg, 'MatchStartResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []}]},
     {{msg, 'MatchInfoReq'},
      [#field{name = player, fnum = 1, rnum = 2,
              type = string, occurrence = required, opts = []},
       #field{name = matchid, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []}]},
     {{msg, 'MatchInfoResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []},
       #field{name = match, fnum = 2, rnum = 3,
              type = {msg, 'MatchInfo'}, occurrence = optional,
              opts = []}]},
     {{msg, 'MatchStateResp.Tile'},
      [#field{name = x, fnum = 1, rnum = 2, type = int32,
              occurrence = required, opts = []},
       #field{name = y, fnum = 2, rnum = 3, type = int32,
              occurrence = required, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = string,
              occurrence = required, opts = []},
       #field{name = occupant, fnum = 4, rnum = 5,
              type = string, occurrence = repeated, opts = []},
       #field{name = flags, fnum = 5, rnum = 6, type = string,
              occurrence = repeated, opts = []}]},
     {{msg, 'MatchStateResp.Action'},
      [#field{name = phase, fnum = 1, rnum = 2, type = int32,
              occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
              occurrence = required, opts = []},
       #field{name = type, fnum = 3, rnum = 4,
              type = {enum, 'ItemAction'}, occurrence = required,
              opts = []},
       #field{name = x_from, fnum = 4, rnum = 5, type = int32,
              occurrence = required, opts = []},
       #field{name = y_from, fnum = 5, rnum = 6, type = int32,
              occurrence = required, opts = []},
       #field{name = x_to, fnum = 6, rnum = 7, type = int32,
              occurrence = required, opts = []},
       #field{name = y_to, fnum = 7, rnum = 8, type = int32,
              occurrence = required, opts = []}]},
     {{msg, 'MatchStateResp'},
      [#field{name = state, fnum = 1, rnum = 2,
              type = {enum, 'MatchStateMachine'},
              occurrence = required, opts = []},
       #field{name = tile, fnum = 2, rnum = 3,
              type = {msg, 'MatchStateResp.Tile'},
              occurrence = repeated, opts = []},
       #field{name = playerlist, fnum = 3, rnum = 4,
              type = string, occurrence = repeated, opts = []},
       #field{name = readyplayers, fnum = 4, rnum = 5,
              type = string, occurrence = repeated, opts = []},
       #field{name = actions, fnum = 5, rnum = 6,
              type = {msg, 'MatchStateResp.Action'},
              occurrence = repeated, opts = []}]},
     {{msg, 'MatchPrepReq'},
      [#field{name = player, fnum = 1, rnum = 2,
              type = string, occurrence = required, opts = []},
       #field{name = matchid, fnum = 2, rnum = 3,
              type = uint32, occurrence = required, opts = []}]},
     {{msg, 'MatchPrepResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []}]},
     {{msg, 'MatchDecideReq'},
      [#field{name = player, fnum = 1, rnum = 2,
              type = string, occurrence = required, opts = []},
       #field{name = actions, fnum = 2, rnum = 3,
              type = string, occurrence = required, opts = []},
       #field{name = matchid, fnum = 3, rnum = 4,
              type = uint32, occurrence = required, opts = []}]},
     {{msg, 'MatchDecideResp'},
      [#field{name = resp, fnum = 1, rnum = 2,
              type = {msg, 'ResponseObject'}, occurrence = required,
              opts = []}]}].


get_msg_names() ->
    ['ResponseObject',
     'MatchInfo.Player',
     'MatchInfo',
     'AccountNewReq',
     'AccountNewResp',
     'AccountLoginReq',
     'AccountLoginResp.Player',
     'AccountLoginResp',
     'PlayerNewReq',
     'PlayerNewResp',
     'PlayerAuthenticate',
     'PlayerLog',
     'LobbyInfo',
     'MatchCreateReq',
     'MatchCreateResp',
     'MatchJoinReq',
     'MatchJoinResp',
     'MatchLeaveReq',
     'MatchLeaveResp',
     'MatchStartReq',
     'MatchStartResp',
     'MatchInfoReq',
     'MatchInfoResp',
     'MatchStateResp.Tile',
     'MatchStateResp.Action',
     'MatchStateResp',
     'MatchPrepReq',
     'MatchPrepResp',
     'MatchDecideReq',
     'MatchDecideResp'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ResponseObject',
     'MatchInfo.Player',
     'MatchInfo',
     'AccountNewReq',
     'AccountNewResp',
     'AccountLoginReq',
     'AccountLoginResp.Player',
     'AccountLoginResp',
     'PlayerNewReq',
     'PlayerNewResp',
     'PlayerAuthenticate',
     'PlayerLog',
     'LobbyInfo',
     'MatchCreateReq',
     'MatchCreateResp',
     'MatchJoinReq',
     'MatchJoinResp',
     'MatchLeaveReq',
     'MatchLeaveResp',
     'MatchStartReq',
     'MatchStartResp',
     'MatchInfoReq',
     'MatchInfoResp',
     'MatchStateResp.Tile',
     'MatchStateResp.Action',
     'MatchStateResp',
     'MatchPrepReq',
     'MatchPrepResp',
     'MatchDecideReq',
     'MatchDecideResp'].


get_enum_names() ->
    ['MatchState',
     'MatchMode',
     'MatchStateMachine',
     'PlayerRole',
     'ItemAction',
     'ResponseObject.Status',
     'AccountNewResp.Status',
     'AccountLoginResp.Status',
     'PlayerNewResp.Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ResponseObject') ->
    [#field{name = status, fnum = 1, rnum = 2,
            type = {enum, 'ResponseObject.Status'},
            occurrence = required, opts = []},
     #field{name = error, fnum = 2, rnum = 3, type = string,
            occurrence = optional, opts = []}];
find_msg_def('MatchInfo.Player') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
            occurrence = required, opts = []}];
find_msg_def('MatchInfo') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
            occurrence = required, opts = []},
     #field{name = state, fnum = 2, rnum = 3,
            type = {enum, 'MatchState'}, occurrence = required,
            opts = []},
     #field{name = players, fnum = 3, rnum = 4,
            type = {msg, 'MatchInfo.Player'}, occurrence = repeated,
            opts = []},
     #field{name = players_max, fnum = 4, rnum = 5,
            type = uint32, occurrence = required, opts = []},
     #field{name = start_time, fnum = 5, rnum = 6,
            type = uint64, occurrence = required, opts = []},
     #field{name = mode, fnum = 6, rnum = 7,
            type = {enum, 'MatchMode'}, occurrence = required,
            opts = []},
     #field{name = duration, fnum = 7, rnum = 8,
            type = uint32, occurrence = required, opts = []},
     #field{name = extra, fnum = 8, rnum = 9, type = bytes,
            occurrence = optional, opts = []}];
find_msg_def('AccountNewReq') ->
    [#field{name = email, fnum = 1, rnum = 2, type = string,
            occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
            type = string, occurrence = required, opts = []}];
find_msg_def('AccountNewResp') ->
    [#field{name = status, fnum = 1, rnum = 2,
            type = {enum, 'AccountNewResp.Status'},
            occurrence = required, opts = []},
     #field{name = error, fnum = 2, rnum = 3, type = string,
            occurrence = optional, opts = []}];
find_msg_def('AccountLoginReq') ->
    [#field{name = email, fnum = 1, rnum = 2, type = string,
            occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
            type = string, occurrence = required, opts = []}];
find_msg_def('AccountLoginResp.Player') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
            occurrence = required, opts = []}];
find_msg_def('AccountLoginResp') ->
    [#field{name = status, fnum = 1, rnum = 2,
            type = {enum, 'AccountLoginResp.Status'},
            occurrence = required, opts = []},
     #field{name = players, fnum = 2, rnum = 3,
            type = {msg, 'AccountLoginResp.Player'},
            occurrence = repeated, opts = []},
     #field{name = error, fnum = 3, rnum = 4, type = string,
            occurrence = optional, opts = []}];
find_msg_def('PlayerNewReq') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
            occurrence = required, opts = []},
     #field{name = appearance, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []},
     #field{name = role, fnum = 3, rnum = 4,
            type = {enum, 'PlayerRole'}, occurrence = required,
            opts = []}];
find_msg_def('PlayerNewResp') ->
    [#field{name = status, fnum = 1, rnum = 2,
            type = {enum, 'PlayerNewResp.Status'},
            occurrence = required, opts = []},
     #field{name = error, fnum = 3, rnum = 3, type = string,
            occurrence = optional, opts = []}];
find_msg_def('PlayerAuthenticate') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes,
            occurrence = required, opts = []}];
find_msg_def('PlayerLog') ->
    [#field{name = msg, fnum = 2, rnum = 2, type = string,
            occurrence = required, opts = []}];
find_msg_def('LobbyInfo') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []},
     #field{name = matches, fnum = 2, rnum = 3,
            type = {msg, 'MatchInfo'}, occurrence = repeated,
            opts = []}];
find_msg_def('MatchCreateReq') ->
    [#field{name = mode, fnum = 1, rnum = 2,
            type = {enum, 'MatchMode'}, occurrence = required,
            opts = []},
     #field{name = players_max, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []},
     #field{name = extra, fnum = 3, rnum = 4, type = bytes,
            occurrence = optional, opts = []}];
find_msg_def('MatchCreateResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []},
     #field{name = match, fnum = 2, rnum = 3,
            type = {msg, 'MatchInfo'}, occurrence = optional,
            opts = []}];
find_msg_def('MatchJoinReq') ->
    [#field{name = player, fnum = 1, rnum = 2,
            type = string, occurrence = required, opts = []},
     #field{name = matchid, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []}];
find_msg_def('MatchJoinResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []},
     #field{name = match, fnum = 2, rnum = 3,
            type = {msg, 'MatchInfo'}, occurrence = optional,
            opts = []}];
find_msg_def('MatchLeaveReq') ->
    [#field{name = player, fnum = 1, rnum = 2,
            type = string, occurrence = required, opts = []},
     #field{name = matchid, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []}];
find_msg_def('MatchLeaveResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []}];
find_msg_def('MatchStartReq') ->
    [#field{name = player, fnum = 1, rnum = 2,
            type = string, occurrence = required, opts = []},
     #field{name = matchid, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []}];
find_msg_def('MatchStartResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []}];
find_msg_def('MatchInfoReq') ->
    [#field{name = player, fnum = 1, rnum = 2,
            type = string, occurrence = required, opts = []},
     #field{name = matchid, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []}];
find_msg_def('MatchInfoResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []},
     #field{name = match, fnum = 2, rnum = 3,
            type = {msg, 'MatchInfo'}, occurrence = optional,
            opts = []}];
find_msg_def('MatchStateResp.Tile') ->
    [#field{name = x, fnum = 1, rnum = 2, type = int32,
            occurrence = required, opts = []},
     #field{name = y, fnum = 2, rnum = 3, type = int32,
            occurrence = required, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = string,
            occurrence = required, opts = []},
     #field{name = occupant, fnum = 4, rnum = 5,
            type = string, occurrence = repeated, opts = []},
     #field{name = flags, fnum = 5, rnum = 6, type = string,
            occurrence = repeated, opts = []}];
find_msg_def('MatchStateResp.Action') ->
    [#field{name = phase, fnum = 1, rnum = 2, type = int32,
            occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
            occurrence = required, opts = []},
     #field{name = type, fnum = 3, rnum = 4,
            type = {enum, 'ItemAction'}, occurrence = required,
            opts = []},
     #field{name = x_from, fnum = 4, rnum = 5, type = int32,
            occurrence = required, opts = []},
     #field{name = y_from, fnum = 5, rnum = 6, type = int32,
            occurrence = required, opts = []},
     #field{name = x_to, fnum = 6, rnum = 7, type = int32,
            occurrence = required, opts = []},
     #field{name = y_to, fnum = 7, rnum = 8, type = int32,
            occurrence = required, opts = []}];
find_msg_def('MatchStateResp') ->
    [#field{name = state, fnum = 1, rnum = 2,
            type = {enum, 'MatchStateMachine'},
            occurrence = required, opts = []},
     #field{name = tile, fnum = 2, rnum = 3,
            type = {msg, 'MatchStateResp.Tile'},
            occurrence = repeated, opts = []},
     #field{name = playerlist, fnum = 3, rnum = 4,
            type = string, occurrence = repeated, opts = []},
     #field{name = readyplayers, fnum = 4, rnum = 5,
            type = string, occurrence = repeated, opts = []},
     #field{name = actions, fnum = 5, rnum = 6,
            type = {msg, 'MatchStateResp.Action'},
            occurrence = repeated, opts = []}];
find_msg_def('MatchPrepReq') ->
    [#field{name = player, fnum = 1, rnum = 2,
            type = string, occurrence = required, opts = []},
     #field{name = matchid, fnum = 2, rnum = 3,
            type = uint32, occurrence = required, opts = []}];
find_msg_def('MatchPrepResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []}];
find_msg_def('MatchDecideReq') ->
    [#field{name = player, fnum = 1, rnum = 2,
            type = string, occurrence = required, opts = []},
     #field{name = actions, fnum = 2, rnum = 3,
            type = string, occurrence = required, opts = []},
     #field{name = matchid, fnum = 3, rnum = 4,
            type = uint32, occurrence = required, opts = []}];
find_msg_def('MatchDecideResp') ->
    [#field{name = resp, fnum = 1, rnum = 2,
            type = {msg, 'ResponseObject'}, occurrence = required,
            opts = []}];
find_msg_def(_) -> error.


find_enum_def('MatchState') ->
    [{'CREATING', 0}, {'PLAYING', 1}, {'FINISHING', 2}];
find_enum_def('MatchMode') ->
    [{'DEFAULT', 0}, {'BLITZ', 1}, {'STRATEGIC', 2}];
find_enum_def('MatchStateMachine') ->
    [{'PREPARE', 0},
     {'DECIDE', 1},
     {'EXECUTE', 2},
     {'FINISH', 3}];
find_enum_def('PlayerRole') ->
    [{'DESTROYER', 0},
     {'INTERCEPTOR', 1},
     {'CARRIER', 2},
     {'COMMAND', 3}];
find_enum_def('ItemAction') ->
    [{'SELF', 0},
     {'DIRECT', 1},
     {'LINEAR', 2},
     {'AREA', 3}];
find_enum_def('ResponseObject.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('AccountNewResp.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('AccountLoginResp.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def('PlayerNewResp.Status') ->
    [{'OK', 0}, {'ERROR', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('MatchState', Value) ->
    enum_symbol_by_value_MatchState(Value);
enum_symbol_by_value('MatchMode', Value) ->
    enum_symbol_by_value_MatchMode(Value);
enum_symbol_by_value('MatchStateMachine', Value) ->
    enum_symbol_by_value_MatchStateMachine(Value);
enum_symbol_by_value('PlayerRole', Value) ->
    enum_symbol_by_value_PlayerRole(Value);
enum_symbol_by_value('ItemAction', Value) ->
    enum_symbol_by_value_ItemAction(Value);
enum_symbol_by_value('ResponseObject.Status', Value) ->
    'enum_symbol_by_value_ResponseObject.Status'(Value);
enum_symbol_by_value('AccountNewResp.Status', Value) ->
    'enum_symbol_by_value_AccountNewResp.Status'(Value);
enum_symbol_by_value('AccountLoginResp.Status',
                     Value) ->
    'enum_symbol_by_value_AccountLoginResp.Status'(Value);
enum_symbol_by_value('PlayerNewResp.Status', Value) ->
    'enum_symbol_by_value_PlayerNewResp.Status'(Value).


enum_value_by_symbol('MatchState', Sym) ->
    enum_value_by_symbol_MatchState(Sym);
enum_value_by_symbol('MatchMode', Sym) ->
    enum_value_by_symbol_MatchMode(Sym);
enum_value_by_symbol('MatchStateMachine', Sym) ->
    enum_value_by_symbol_MatchStateMachine(Sym);
enum_value_by_symbol('PlayerRole', Sym) ->
    enum_value_by_symbol_PlayerRole(Sym);
enum_value_by_symbol('ItemAction', Sym) ->
    enum_value_by_symbol_ItemAction(Sym);
enum_value_by_symbol('ResponseObject.Status', Sym) ->
    'enum_value_by_symbol_ResponseObject.Status'(Sym);
enum_value_by_symbol('AccountNewResp.Status', Sym) ->
    'enum_value_by_symbol_AccountNewResp.Status'(Sym);
enum_value_by_symbol('AccountLoginResp.Status', Sym) ->
    'enum_value_by_symbol_AccountLoginResp.Status'(Sym);
enum_value_by_symbol('PlayerNewResp.Status', Sym) ->
    'enum_value_by_symbol_PlayerNewResp.Status'(Sym).


enum_symbol_by_value_MatchState(0) -> 'CREATING';
enum_symbol_by_value_MatchState(1) -> 'PLAYING';
enum_symbol_by_value_MatchState(2) -> 'FINISHING'.


enum_value_by_symbol_MatchState('CREATING') -> 0;
enum_value_by_symbol_MatchState('PLAYING') -> 1;
enum_value_by_symbol_MatchState('FINISHING') -> 2.

enum_symbol_by_value_MatchMode(0) -> 'DEFAULT';
enum_symbol_by_value_MatchMode(1) -> 'BLITZ';
enum_symbol_by_value_MatchMode(2) -> 'STRATEGIC'.


enum_value_by_symbol_MatchMode('DEFAULT') -> 0;
enum_value_by_symbol_MatchMode('BLITZ') -> 1;
enum_value_by_symbol_MatchMode('STRATEGIC') -> 2.

enum_symbol_by_value_MatchStateMachine(0) -> 'PREPARE';
enum_symbol_by_value_MatchStateMachine(1) -> 'DECIDE';
enum_symbol_by_value_MatchStateMachine(2) -> 'EXECUTE';
enum_symbol_by_value_MatchStateMachine(3) -> 'FINISH'.


enum_value_by_symbol_MatchStateMachine('PREPARE') -> 0;
enum_value_by_symbol_MatchStateMachine('DECIDE') -> 1;
enum_value_by_symbol_MatchStateMachine('EXECUTE') -> 2;
enum_value_by_symbol_MatchStateMachine('FINISH') -> 3.

enum_symbol_by_value_PlayerRole(0) -> 'DESTROYER';
enum_symbol_by_value_PlayerRole(1) -> 'INTERCEPTOR';
enum_symbol_by_value_PlayerRole(2) -> 'CARRIER';
enum_symbol_by_value_PlayerRole(3) -> 'COMMAND'.


enum_value_by_symbol_PlayerRole('DESTROYER') -> 0;
enum_value_by_symbol_PlayerRole('INTERCEPTOR') -> 1;
enum_value_by_symbol_PlayerRole('CARRIER') -> 2;
enum_value_by_symbol_PlayerRole('COMMAND') -> 3.

enum_symbol_by_value_ItemAction(0) -> 'SELF';
enum_symbol_by_value_ItemAction(1) -> 'DIRECT';
enum_symbol_by_value_ItemAction(2) -> 'LINEAR';
enum_symbol_by_value_ItemAction(3) -> 'AREA'.


enum_value_by_symbol_ItemAction('SELF') -> 0;
enum_value_by_symbol_ItemAction('DIRECT') -> 1;
enum_value_by_symbol_ItemAction('LINEAR') -> 2;
enum_value_by_symbol_ItemAction('AREA') -> 3.

'enum_symbol_by_value_ResponseObject.Status'(0) -> 'OK';
'enum_symbol_by_value_ResponseObject.Status'(1) ->
    'ERROR'.


'enum_value_by_symbol_ResponseObject.Status'('OK') -> 0;
'enum_value_by_symbol_ResponseObject.Status'('ERROR') ->
    1.

'enum_symbol_by_value_AccountNewResp.Status'(0) -> 'OK';
'enum_symbol_by_value_AccountNewResp.Status'(1) ->
    'ERROR'.


'enum_value_by_symbol_AccountNewResp.Status'('OK') -> 0;
'enum_value_by_symbol_AccountNewResp.Status'('ERROR') ->
    1.

'enum_symbol_by_value_AccountLoginResp.Status'(0) ->
    'OK';
'enum_symbol_by_value_AccountLoginResp.Status'(1) ->
    'ERROR'.


'enum_value_by_symbol_AccountLoginResp.Status'('OK') ->
    0;
'enum_value_by_symbol_AccountLoginResp.Status'('ERROR') ->
    1.

'enum_symbol_by_value_PlayerNewResp.Status'(0) -> 'OK';
'enum_symbol_by_value_PlayerNewResp.Status'(1) ->
    'ERROR'.


'enum_value_by_symbol_PlayerNewResp.Status'('OK') -> 0;
'enum_value_by_symbol_PlayerNewResp.Status'('ERROR') ->
    1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"goblet.ResponseObject">>) -> 'ResponseObject';
fqbin_to_msg_name(<<"goblet.MatchInfo.Player">>) -> 'MatchInfo.Player';
fqbin_to_msg_name(<<"goblet.MatchInfo">>) -> 'MatchInfo';
fqbin_to_msg_name(<<"goblet.AccountNewReq">>) -> 'AccountNewReq';
fqbin_to_msg_name(<<"goblet.AccountNewResp">>) -> 'AccountNewResp';
fqbin_to_msg_name(<<"goblet.AccountLoginReq">>) -> 'AccountLoginReq';
fqbin_to_msg_name(<<"goblet.AccountLoginResp.Player">>) -> 'AccountLoginResp.Player';
fqbin_to_msg_name(<<"goblet.AccountLoginResp">>) -> 'AccountLoginResp';
fqbin_to_msg_name(<<"goblet.PlayerNewReq">>) -> 'PlayerNewReq';
fqbin_to_msg_name(<<"goblet.PlayerNewResp">>) -> 'PlayerNewResp';
fqbin_to_msg_name(<<"goblet.PlayerAuthenticate">>) -> 'PlayerAuthenticate';
fqbin_to_msg_name(<<"goblet.PlayerLog">>) -> 'PlayerLog';
fqbin_to_msg_name(<<"goblet.LobbyInfo">>) -> 'LobbyInfo';
fqbin_to_msg_name(<<"goblet.MatchCreateReq">>) -> 'MatchCreateReq';
fqbin_to_msg_name(<<"goblet.MatchCreateResp">>) -> 'MatchCreateResp';
fqbin_to_msg_name(<<"goblet.MatchJoinReq">>) -> 'MatchJoinReq';
fqbin_to_msg_name(<<"goblet.MatchJoinResp">>) -> 'MatchJoinResp';
fqbin_to_msg_name(<<"goblet.MatchLeaveReq">>) -> 'MatchLeaveReq';
fqbin_to_msg_name(<<"goblet.MatchLeaveResp">>) -> 'MatchLeaveResp';
fqbin_to_msg_name(<<"goblet.MatchStartReq">>) -> 'MatchStartReq';
fqbin_to_msg_name(<<"goblet.MatchStartResp">>) -> 'MatchStartResp';
fqbin_to_msg_name(<<"goblet.MatchInfoReq">>) -> 'MatchInfoReq';
fqbin_to_msg_name(<<"goblet.MatchInfoResp">>) -> 'MatchInfoResp';
fqbin_to_msg_name(<<"goblet.MatchStateResp.Tile">>) -> 'MatchStateResp.Tile';
fqbin_to_msg_name(<<"goblet.MatchStateResp.Action">>) -> 'MatchStateResp.Action';
fqbin_to_msg_name(<<"goblet.MatchStateResp">>) -> 'MatchStateResp';
fqbin_to_msg_name(<<"goblet.MatchPrepReq">>) -> 'MatchPrepReq';
fqbin_to_msg_name(<<"goblet.MatchPrepResp">>) -> 'MatchPrepResp';
fqbin_to_msg_name(<<"goblet.MatchDecideReq">>) -> 'MatchDecideReq';
fqbin_to_msg_name(<<"goblet.MatchDecideResp">>) -> 'MatchDecideResp';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ResponseObject') -> <<"goblet.ResponseObject">>;
msg_name_to_fqbin('MatchInfo.Player') -> <<"goblet.MatchInfo.Player">>;
msg_name_to_fqbin('MatchInfo') -> <<"goblet.MatchInfo">>;
msg_name_to_fqbin('AccountNewReq') -> <<"goblet.AccountNewReq">>;
msg_name_to_fqbin('AccountNewResp') -> <<"goblet.AccountNewResp">>;
msg_name_to_fqbin('AccountLoginReq') -> <<"goblet.AccountLoginReq">>;
msg_name_to_fqbin('AccountLoginResp.Player') -> <<"goblet.AccountLoginResp.Player">>;
msg_name_to_fqbin('AccountLoginResp') -> <<"goblet.AccountLoginResp">>;
msg_name_to_fqbin('PlayerNewReq') -> <<"goblet.PlayerNewReq">>;
msg_name_to_fqbin('PlayerNewResp') -> <<"goblet.PlayerNewResp">>;
msg_name_to_fqbin('PlayerAuthenticate') -> <<"goblet.PlayerAuthenticate">>;
msg_name_to_fqbin('PlayerLog') -> <<"goblet.PlayerLog">>;
msg_name_to_fqbin('LobbyInfo') -> <<"goblet.LobbyInfo">>;
msg_name_to_fqbin('MatchCreateReq') -> <<"goblet.MatchCreateReq">>;
msg_name_to_fqbin('MatchCreateResp') -> <<"goblet.MatchCreateResp">>;
msg_name_to_fqbin('MatchJoinReq') -> <<"goblet.MatchJoinReq">>;
msg_name_to_fqbin('MatchJoinResp') -> <<"goblet.MatchJoinResp">>;
msg_name_to_fqbin('MatchLeaveReq') -> <<"goblet.MatchLeaveReq">>;
msg_name_to_fqbin('MatchLeaveResp') -> <<"goblet.MatchLeaveResp">>;
msg_name_to_fqbin('MatchStartReq') -> <<"goblet.MatchStartReq">>;
msg_name_to_fqbin('MatchStartResp') -> <<"goblet.MatchStartResp">>;
msg_name_to_fqbin('MatchInfoReq') -> <<"goblet.MatchInfoReq">>;
msg_name_to_fqbin('MatchInfoResp') -> <<"goblet.MatchInfoResp">>;
msg_name_to_fqbin('MatchStateResp.Tile') -> <<"goblet.MatchStateResp.Tile">>;
msg_name_to_fqbin('MatchStateResp.Action') -> <<"goblet.MatchStateResp.Action">>;
msg_name_to_fqbin('MatchStateResp') -> <<"goblet.MatchStateResp">>;
msg_name_to_fqbin('MatchPrepReq') -> <<"goblet.MatchPrepReq">>;
msg_name_to_fqbin('MatchPrepResp') -> <<"goblet.MatchPrepResp">>;
msg_name_to_fqbin('MatchDecideReq') -> <<"goblet.MatchDecideReq">>;
msg_name_to_fqbin('MatchDecideResp') -> <<"goblet.MatchDecideResp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"goblet.MatchState">>) -> 'MatchState';
fqbin_to_enum_name(<<"goblet.MatchMode">>) -> 'MatchMode';
fqbin_to_enum_name(<<"goblet.MatchStateMachine">>) -> 'MatchStateMachine';
fqbin_to_enum_name(<<"goblet.PlayerRole">>) -> 'PlayerRole';
fqbin_to_enum_name(<<"goblet.ItemAction">>) -> 'ItemAction';
fqbin_to_enum_name(<<"goblet.ResponseObject.Status">>) -> 'ResponseObject.Status';
fqbin_to_enum_name(<<"goblet.AccountNewResp.Status">>) -> 'AccountNewResp.Status';
fqbin_to_enum_name(<<"goblet.AccountLoginResp.Status">>) ->
    'AccountLoginResp.Status';
fqbin_to_enum_name(<<"goblet.PlayerNewResp.Status">>) -> 'PlayerNewResp.Status';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('MatchState') -> <<"goblet.MatchState">>;
enum_name_to_fqbin('MatchMode') -> <<"goblet.MatchMode">>;
enum_name_to_fqbin('MatchStateMachine') -> <<"goblet.MatchStateMachine">>;
enum_name_to_fqbin('PlayerRole') -> <<"goblet.PlayerRole">>;
enum_name_to_fqbin('ItemAction') -> <<"goblet.ItemAction">>;
enum_name_to_fqbin('ResponseObject.Status') -> <<"goblet.ResponseObject.Status">>;
enum_name_to_fqbin('AccountNewResp.Status') -> <<"goblet.AccountNewResp.Status">>;
enum_name_to_fqbin('AccountLoginResp.Status') ->
    <<"goblet.AccountLoginResp.Status">>;
enum_name_to_fqbin('PlayerNewResp.Status') -> <<"goblet.PlayerNewResp.Status">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> goblet.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "goblet.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["goblet.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["goblet"].


get_msg_containment("goblet") ->
    ['AccountLoginReq',
     'AccountLoginResp',
     'AccountLoginResp.Player',
     'AccountNewReq',
     'AccountNewResp',
     'LobbyInfo',
     'MatchCreateReq',
     'MatchCreateResp',
     'MatchDecideReq',
     'MatchDecideResp',
     'MatchInfo',
     'MatchInfo.Player',
     'MatchInfoReq',
     'MatchInfoResp',
     'MatchJoinReq',
     'MatchJoinResp',
     'MatchLeaveReq',
     'MatchLeaveResp',
     'MatchPrepReq',
     'MatchPrepResp',
     'MatchStartReq',
     'MatchStartResp',
     'MatchStateResp',
     'MatchStateResp.Action',
     'MatchStateResp.Tile',
     'PlayerAuthenticate',
     'PlayerLog',
     'PlayerNewReq',
     'PlayerNewResp',
     'ResponseObject'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("goblet") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("goblet") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("goblet") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("goblet") ->
    ['AccountLoginResp.Status',
     'AccountNewResp.Status',
     'ItemAction',
     'MatchMode',
     'MatchState',
     'MatchStateMachine',
     'PlayerNewResp.Status',
     'PlayerRole',
     'ResponseObject.Status'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerNewResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchStateResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchStartResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchPrepResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchLeaveResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchJoinResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchInfoResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchDecideResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchCreateResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountNewResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountLoginResp">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerNewReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchStartReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchPrepReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchLeaveReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchJoinReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchInfoReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchDecideReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchCreateReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountNewReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountLoginReq">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchInfo.Player">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.AccountLoginResp.Player">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.ResponseObject">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerAuthenticate">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchStateResp.Tile">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.PlayerLog">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchStateResp.Action">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.MatchInfo">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(<<"goblet.LobbyInfo">>) -> "goblet";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"goblet.ResponseObject.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.PlayerNewResp.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.AccountNewResp.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.AccountLoginResp.Status">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.PlayerRole">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.MatchStateMachine">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.MatchState">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.MatchMode">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(<<"goblet.ItemAction">>) -> "goblet";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
