%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2

-ifndef(goblet_pb).
-define(goblet_pb, true).

-define(goblet_pb_gpb_version, "4.11.2").

-ifndef('RESPONSEOBJECT_PB_H').
-define('RESPONSEOBJECT_PB_H', true).
-record('ResponseObject',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum ResponseObject.Status
         error                  :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('MATCH.PLAYER_PB_H').
-define('MATCH.PLAYER_PB_H', true).
-record('Match.Player',
        {name                   :: iodata()         % = 1
        }).
-endif.

-ifndef('MATCH_PB_H').
-define('MATCH_PB_H', true).
-record('Match',
        {id                     :: non_neg_integer(), % = 1, 32 bits
         state                  :: 'CREATING' | 'PLAYING' | 'FINISHING' | integer(), % = 2, enum MatchState
         players = []           :: [goblet_pb:'Match.Player'()] | undefined, % = 3
         players_max            :: non_neg_integer(), % = 4, 32 bits
         start_time             :: non_neg_integer(), % = 5, 64 bits
         mode                   :: 'DEFAULT' | 'BLITZ' | 'STRATEGIC' | integer(), % = 6, enum MatchMode
         duration               :: non_neg_integer(), % = 7, 32 bits
         extra                  :: iodata() | undefined % = 8
        }).
-endif.

-ifndef('ACCOUNTNEWREQ_PB_H').
-define('ACCOUNTNEWREQ_PB_H', true).
-record('AccountNewReq',
        {email                  :: iodata(),        % = 1
         password               :: iodata()         % = 2
        }).
-endif.

-ifndef('ACCOUNTNEWRESP_PB_H').
-define('ACCOUNTNEWRESP_PB_H', true).
-record('AccountNewResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum AccountNewResp.Status
         error                  :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('ACCOUNTLOGINREQ_PB_H').
-define('ACCOUNTLOGINREQ_PB_H', true).
-record('AccountLoginReq',
        {email                  :: iodata(),        % = 1
         password               :: iodata()         % = 2
        }).
-endif.

-ifndef('ACCOUNTLOGINRESP.PLAYER_PB_H').
-define('ACCOUNTLOGINRESP.PLAYER_PB_H', true).
-record('AccountLoginResp.Player',
        {name                   :: iodata()         % = 1
        }).
-endif.

-ifndef('ACCOUNTLOGINRESP_PB_H').
-define('ACCOUNTLOGINRESP_PB_H', true).
-record('AccountLoginResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum AccountLoginResp.Status
         players = []           :: [goblet_pb:'AccountLoginResp.Player'()] | undefined, % = 2
         error                  :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('PLAYERNEWREQ_PB_H').
-define('PLAYERNEWREQ_PB_H', true).
-record('PlayerNewReq',
        {name                   :: iodata(),        % = 1
         title                  :: iodata(),        % = 2
         appearance             :: non_neg_integer(), % = 3, 32 bits
         role                   :: iodata()         % = 4
        }).
-endif.

-ifndef('PLAYERNEWRESP_PB_H').
-define('PLAYERNEWRESP_PB_H', true).
-record('PlayerNewResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum PlayerNewResp.Status
         error                  :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('PLAYERAUTHENTICATE_PB_H').
-define('PLAYERAUTHENTICATE_PB_H', true).
-record('PlayerAuthenticate',
        {id                     :: iodata()         % = 1
        }).
-endif.

-ifndef('PLAYERLOG_PB_H').
-define('PLAYERLOG_PB_H', true).
-record('PlayerLog',
        {msg                    :: iodata()         % = 2
        }).
-endif.

-ifndef('LOBBYINFO_PB_H').
-define('LOBBYINFO_PB_H', true).
-record('LobbyInfo',
        {resp                   :: goblet_pb:'ResponseObject'(), % = 1
         matches = []           :: [goblet_pb:'Match'()] | undefined % = 2
        }).
-endif.

-ifndef('MATCHCREATEREQ_PB_H').
-define('MATCHCREATEREQ_PB_H', true).
-record('MatchCreateReq',
        {mode                   :: 'DEFAULT' | 'BLITZ' | 'STRATEGIC' | integer(), % = 1, enum MatchMode
         players_max            :: non_neg_integer(), % = 2, 32 bits
         extra                  :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('MATCHCREATERESP_PB_H').
-define('MATCHCREATERESP_PB_H', true).
-record('MatchCreateResp',
        {resp                   :: goblet_pb:'ResponseObject'(), % = 1
         match                  :: goblet_pb:'Match'() | undefined % = 2
        }).
-endif.

-ifndef('MATCHJOINREQ_PB_H').
-define('MATCHJOINREQ_PB_H', true).
-record('MatchJoinReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHJOINRESP_PB_H').
-define('MATCHJOINRESP_PB_H', true).
-record('MatchJoinResp',
        {resp                   :: goblet_pb:'ResponseObject'(), % = 1
         match                  :: goblet_pb:'Match'() | undefined % = 2
        }).
-endif.

-ifndef('MATCHLEAVEREQ_PB_H').
-define('MATCHLEAVEREQ_PB_H', true).
-record('MatchLeaveReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHLEAVERESP_PB_H').
-define('MATCHLEAVERESP_PB_H', true).
-record('MatchLeaveResp',
        {resp                   :: goblet_pb:'ResponseObject'() % = 1
        }).
-endif.

-ifndef('MATCHSTARTREQ_PB_H').
-define('MATCHSTARTREQ_PB_H', true).
-record('MatchStartReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHSTARTRESP_PB_H').
-define('MATCHSTARTRESP_PB_H', true).
-record('MatchStartResp',
        {resp                   :: goblet_pb:'ResponseObject'() % = 1
        }).
-endif.

-endif.
