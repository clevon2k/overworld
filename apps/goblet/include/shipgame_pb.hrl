%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2

-ifndef(shipgame_pb).
-define(shipgame_pb, true).

-define(shipgame_pb_gpb_version, "4.11.2").

-ifndef('RESPONSEOBJECT_PB_H').
-define('RESPONSEOBJECT_PB_H', true).
-record('ResponseObject',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum ResponseObject.Status
         error                  :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('MATCHINFO_PB_H').
-define('MATCHINFO_PB_H', true).
-record('MatchInfo',
        {id                     :: non_neg_integer(), % = 1, 32 bits
         state                  :: 'CREATING' | 'PLAYING' | 'FINISHING' | integer(), % = 2, enum MatchState
         players = []           :: [iodata()] | undefined, % = 3
         players_max            :: non_neg_integer(), % = 4, 32 bits
         start_time             :: non_neg_integer(), % = 5, 64 bits
         mode                   :: 'DEFAULT' | 'BLITZ' | 'STRATEGIC' | integer(), % = 6, enum MatchMode
         duration               :: non_neg_integer(), % = 7, 32 bits
         extra                  :: iodata() | undefined % = 8
        }).
-endif.

-ifndef('ACCOUNTNEWREQ_PB_H').
-define('ACCOUNTNEWREQ_PB_H', true).
-record('AccountNewReq',
        {email                  :: iodata(),        % = 1
         password               :: iodata()         % = 2
        }).
-endif.

-ifndef('ACCOUNTNEWRESP_PB_H').
-define('ACCOUNTNEWRESP_PB_H', true).
-record('AccountNewResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum AccountNewResp.Status
         error                  :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('ACCOUNTLOGINREQ_PB_H').
-define('ACCOUNTLOGINREQ_PB_H', true).
-record('AccountLoginReq',
        {email                  :: iodata(),        % = 1
         password               :: iodata()         % = 2
        }).
-endif.

-ifndef('ACCOUNTLOGINRESP_PB_H').
-define('ACCOUNTLOGINRESP_PB_H', true).
-record('AccountLoginResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum AccountLoginResp.Status
         players = []           :: [iodata()] | undefined, % = 2
         error                  :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('PLAYERNEWREQ_PB_H').
-define('PLAYERNEWREQ_PB_H', true).
-record('PlayerNewReq',
        {name                   :: iodata(),        % = 1
         color = []             :: [iodata()] | undefined, % = 2
         symbol = []            :: [non_neg_integer()] | undefined, % = 3, 32 bits
         role                   :: 'DESTROYER' | 'INTERCEPTOR' | 'CARRIER' | 'COMMAND' | integer() % = 4, enum PlayerRole
        }).
-endif.

-ifndef('PLAYERNEWRESP_PB_H').
-define('PLAYERNEWRESP_PB_H', true).
-record('PlayerNewResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum PlayerNewResp.Status
         error                  :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('PLAYERLISTRESP_PB_H').
-define('PLAYERLISTRESP_PB_H', true).
-record('PlayerListResp',
        {status                 :: 'OK' | 'ERROR' | integer(), % = 1, enum PlayerListResp.Status
         players = []           :: [iodata()] | undefined, % = 2
         error                  :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('PLAYERINFORESP_PB_H').
-define('PLAYERINFORESP_PB_H', true).
-record('PlayerInfoResp',
        {name                   :: iodata(),        % = 1
         health                 :: integer(),       % = 2, 32 bits
         energy                 :: integer(),       % = 3, 32 bits
         flags = []             :: [iodata()] | undefined, % = 4
         inventory = []         :: [iodata()] | undefined % = 5
        }).
-endif.

-ifndef('PLAYERAUTHENTICATE_PB_H').
-define('PLAYERAUTHENTICATE_PB_H', true).
-record('PlayerAuthenticate',
        {id                     :: iodata()         % = 1
        }).
-endif.

-ifndef('CLIENTLOG_PB_H').
-define('CLIENTLOG_PB_H', true).
-record('ClientLog',
        {msg                    :: iodata()         % = 2
        }).
-endif.

-ifndef('MATCHLISTRESP_PB_H').
-define('MATCHLISTRESP_PB_H', true).
-record('MatchListResp',
        {resp                   :: shipgame_pb:'ResponseObject'(), % = 1
         matches = []           :: [shipgame_pb:'MatchInfo'()] | undefined % = 2
        }).
-endif.

-ifndef('MATCHCREATEREQ_PB_H').
-define('MATCHCREATEREQ_PB_H', true).
-record('MatchCreateReq',
        {player                 :: iodata(),        % = 1
         mode                   :: 'DEFAULT' | 'BLITZ' | 'STRATEGIC' | integer(), % = 2, enum MatchMode
         players_max            :: non_neg_integer(), % = 3, 32 bits
         extra                  :: iodata() | undefined % = 4
        }).
-endif.

-ifndef('MATCHCREATERESP_PB_H').
-define('MATCHCREATERESP_PB_H', true).
-record('MatchCreateResp',
        {resp                   :: shipgame_pb:'ResponseObject'(), % = 1
         match                  :: shipgame_pb:'MatchInfo'() | undefined % = 2
        }).
-endif.

-ifndef('MATCHJOINREQ_PB_H').
-define('MATCHJOINREQ_PB_H', true).
-record('MatchJoinReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHJOINRESP_PB_H').
-define('MATCHJOINRESP_PB_H', true).
-record('MatchJoinResp',
        {resp                   :: shipgame_pb:'ResponseObject'(), % = 1
         match                  :: shipgame_pb:'MatchInfo'() | undefined % = 2
        }).
-endif.

-ifndef('MATCHLEAVEREQ_PB_H').
-define('MATCHLEAVEREQ_PB_H', true).
-record('MatchLeaveReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHLEAVERESP_PB_H').
-define('MATCHLEAVERESP_PB_H', true).
-record('MatchLeaveResp',
        {resp                   :: shipgame_pb:'ResponseObject'() % = 1
        }).
-endif.

-ifndef('MATCHSTARTREQ_PB_H').
-define('MATCHSTARTREQ_PB_H', true).
-record('MatchStartReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHSTARTRESP_PB_H').
-define('MATCHSTARTRESP_PB_H', true).
-record('MatchStartResp',
        {resp                   :: shipgame_pb:'ResponseObject'() % = 1
        }).
-endif.

-ifndef('MATCHINFOREQ_PB_H').
-define('MATCHINFOREQ_PB_H', true).
-record('MatchInfoReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHINFORESP_PB_H').
-define('MATCHINFORESP_PB_H', true).
-record('MatchInfoResp',
        {resp                   :: shipgame_pb:'ResponseObject'(), % = 1
         match                  :: shipgame_pb:'MatchInfo'() | undefined % = 2
        }).
-endif.

-ifndef('MATCHSTATERESP.TILE_PB_H').
-define('MATCHSTATERESP.TILE_PB_H', true).
-record('MatchStateResp.Tile',
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer(),       % = 2, 32 bits
         type                   :: iodata(),        % = 3
         occupant = []          :: [iodata()] | undefined, % = 4
         flags = []             :: [iodata()] | undefined % = 5
        }).
-endif.

-ifndef('MATCHSTATERESP.ACTION_PB_H').
-define('MATCHSTATERESP.ACTION_PB_H', true).
-record('MatchStateResp.Action',
        {type                   :: iodata(),        % = 1
         who                    :: iodata(),        % = 2
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('MATCHSTATERESP_PB_H').
-define('MATCHSTATERESP_PB_H', true).
-record('MatchStateResp',
        {state                  :: 'PREPARE' | 'DECIDE' | 'EXECUTE' | 'FINISH' | integer(), % = 1, enum MatchStateMachine
         board = []             :: [shipgame_pb:'MatchStateResp.Tile'()] | undefined, % = 2
         playerlist = []        :: [iodata()] | undefined, % = 3
         readyplayers = []      :: [iodata()] | undefined, % = 4
         replay = []            :: [shipgame_pb:'MatchStateResp.Action'()] | undefined, % = 5
         timer                  :: integer() | undefined % = 6, 32 bits
        }).
-endif.

-ifndef('MATCHPREPREQ_PB_H').
-define('MATCHPREPREQ_PB_H', true).
-record('MatchPrepReq',
        {player                 :: iodata(),        % = 1
         matchid                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHPREPRESP_PB_H').
-define('MATCHPREPRESP_PB_H', true).
-record('MatchPrepResp',
        {resp                   :: shipgame_pb:'ResponseObject'() % = 1
        }).
-endif.

-ifndef('MATCHDECIDEREQ.ACTION_PB_H').
-define('MATCHDECIDEREQ.ACTION_PB_H', true).
-record('MatchDecideReq.Action',
        {item                   :: iodata(),        % = 1
         x                      :: integer() | undefined, % = 2, 32 bits
         y                      :: integer() | undefined, % = 3, 32 bits
         target                 :: iodata() | undefined % = 4
        }).
-endif.

-ifndef('MATCHDECIDEREQ_PB_H').
-define('MATCHDECIDEREQ_PB_H', true).
-record('MatchDecideReq',
        {player                 :: iodata(),        % = 1
         actions = []           :: [shipgame_pb:'MatchDecideReq.Action'()] | undefined, % = 2
         matchid                :: non_neg_integer() % = 3, 32 bits
        }).
-endif.

-ifndef('MATCHDECIDERESP_PB_H').
-define('MATCHDECIDERESP_PB_H', true).
-record('MatchDecideResp',
        {resp                   :: shipgame_pb:'ResponseObject'() % = 1
        }).
-endif.

-ifndef('MATCHINTENTRESP.ACTION_PB_H').
-define('MATCHINTENTRESP.ACTION_PB_H', true).
-record('MatchIntentResp.Action',
        {type                   :: iodata(),        % = 1
         x                      :: integer() | undefined, % = 2, 32 bits
         y                      :: integer() | undefined, % = 3, 32 bits
         target                 :: iodata() | undefined % = 4
        }).
-endif.

-ifndef('MATCHINTENTRESP_PB_H').
-define('MATCHINTENTRESP_PB_H', true).
-record('MatchIntentResp',
        {player                 :: iodata(),        % = 1
         action                 :: shipgame_pb:'MatchIntentResp.Action'() % = 2
        }).
-endif.

-ifndef('SHIPVALIDATEREQ.COMPONENT_PB_H').
-define('SHIPVALIDATEREQ.COMPONENT_PB_H', true).
-record('ShipValidateReq.Component',
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer(),       % = 2, 32 bits
         id                     :: integer(),       % = 3, 32 bits
         rotation               :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('SHIPVALIDATEREQ_PB_H').
-define('SHIPVALIDATEREQ_PB_H', true).
-record('ShipValidateReq',
        {components = []        :: [shipgame_pb:'ShipValidateReq.Component'()] | undefined % = 1
        }).
-endif.

-ifndef('SHIPVALIDATERESP_PB_H').
-define('SHIPVALIDATERESP_PB_H', true).
-record('ShipValidateResp',
        {resp                   :: shipgame_pb:'ResponseObject'() % = 1
        }).
-endif.

-endif.
