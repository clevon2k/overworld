searchData={"items":[{"type":"module","title":"ow_app","doc":"Overworld Application","ref":"ow_app.html"},{"type":"function","title":"ow_app.start/2","doc":null,"ref":"ow_app.html#start/2"},{"type":"function","title":"ow_app.stop/1","doc":null,"ref":"ow_app.html#stop/1"},{"type":"module","title":"ow_beacon","doc":null,"ref":"ow_beacon.html"},{"type":"function","title":"ow_beacon.code_change/3","doc":null,"ref":"ow_beacon.html#code_change/3"},{"type":"function","title":"ow_beacon.dump/0","doc":null,"ref":"ow_beacon.html#dump/0"},{"type":"function","title":"ow_beacon.get_by_id/1","doc":null,"ref":"ow_beacon.html#get_by_id/1"},{"type":"function","title":"ow_beacon.handle_call/3","doc":null,"ref":"ow_beacon.html#handle_call/3"},{"type":"function","title":"ow_beacon.handle_cast/2","doc":null,"ref":"ow_beacon.html#handle_cast/2"},{"type":"function","title":"ow_beacon.handle_info/2","doc":null,"ref":"ow_beacon.html#handle_info/2"},{"type":"function","title":"ow_beacon.init/1","doc":null,"ref":"ow_beacon.html#init/1"},{"type":"function","title":"ow_beacon.last/0","doc":null,"ref":"ow_beacon.html#last/0"},{"type":"function","title":"ow_beacon.start/0","doc":null,"ref":"ow_beacon.html#start/0"},{"type":"function","title":"ow_beacon.stop/0","doc":null,"ref":"ow_beacon.html#stop/0"},{"type":"function","title":"ow_beacon.terminate/2","doc":null,"ref":"ow_beacon.html#terminate/2"},{"type":"module","title":"ow_binding","doc":"","ref":"ow_binding.html"},{"type":"function","title":"ow_binding.generate_enums/1","doc":"","ref":"ow_binding.html#generate_enums/1"},{"type":"function","title":"ow_binding.generate_marshall/0","doc":"","ref":"ow_binding.html#generate_marshall/0"},{"type":"function","title":"ow_binding.generate_marshall_submsgs/1","doc":"","ref":"ow_binding.html#generate_marshall_submsgs/1"},{"type":"function","title":"ow_binding.generate_prefixes/0","doc":"","ref":"ow_binding.html#generate_prefixes/0"},{"type":"function","title":"ow_binding.generate_router/0","doc":"","ref":"ow_binding.html#generate_router/0"},{"type":"function","title":"ow_binding.generate_signals/0","doc":"","ref":"ow_binding.html#generate_signals/0"},{"type":"function","title":"ow_binding.generate_submsgs/1","doc":"","ref":"ow_binding.html#generate_submsgs/1"},{"type":"function","title":"ow_binding.generate_unmarshall/0","doc":"","ref":"ow_binding.html#generate_unmarshall/0"},{"type":"function","title":"ow_binding.get_encoders/0","doc":"","ref":"ow_binding.html#get_encoders/0"},{"type":"function","title":"ow_binding.load_scripts/1","doc":"","ref":"ow_binding.html#load_scripts/1"},{"type":"function","title":"ow_binding.load_scripts_test/0","doc":"","ref":"ow_binding.html#load_scripts_test/0"},{"type":"function","title":"ow_binding.next_signal_test/0","doc":"","ref":"ow_binding.html#next_signal_test/0"},{"type":"function","title":"ow_binding.pb_to_godot_type/1","doc":"","ref":"ow_binding.html#pb_to_godot_type/1"},{"type":"function","title":"ow_binding.print/0","doc":"","ref":"ow_binding.html#print/0"},{"type":"function","title":"ow_binding.write/0","doc":"","ref":"ow_binding.html#write/0"},{"type":"module","title":"ow_dl_handler","doc":null,"ref":"ow_dl_handler.html"},{"type":"function","title":"ow_dl_handler.init/2","doc":"Initializes the handler and handles the request for the API package. Compiles the latest code, generates the client API and protocol files, creates a ZIP archive containing the files, and sends it as the response.","ref":"ow_dl_handler.html#init/2"},{"type":"module","title":"ow_dl_manifest","doc":null,"ref":"ow_dl_manifest.html"},{"type":"function","title":"ow_dl_manifest.init/2","doc":null,"ref":"ow_dl_manifest.html#init/2"},{"type":"module","title":"ow_ecs","doc":null,"ref":"ow_ecs.html"},{"type":"function","title":"ow_ecs.add_component/4","doc":null,"ref":"ow_ecs.html#add_component/4"},{"type":"function","title":"ow_ecs.add_components/3","doc":null,"ref":"ow_ecs.html#add_components/3"},{"type":"function","title":"ow_ecs.add_system/2","doc":null,"ref":"ow_ecs.html#add_system/2"},{"type":"function","title":"ow_ecs.add_system/3","doc":null,"ref":"ow_ecs.html#add_system/3"},{"type":"function","title":"ow_ecs.code_change/3","doc":null,"ref":"ow_ecs.html#code_change/3"},{"type":"function","title":"ow_ecs.del_component/3","doc":null,"ref":"ow_ecs.html#del_component/3"},{"type":"function","title":"ow_ecs.del_components/3","doc":null,"ref":"ow_ecs.html#del_components/3"},{"type":"function","title":"ow_ecs.del_system/2","doc":null,"ref":"ow_ecs.html#del_system/2"},{"type":"function","title":"ow_ecs.entities/1","doc":null,"ref":"ow_ecs.html#entities/1"},{"type":"function","title":"ow_ecs.entity/2","doc":null,"ref":"ow_ecs.html#entity/2"},{"type":"function","title":"ow_ecs.foreach_component/3","doc":null,"ref":"ow_ecs.html#foreach_component/3"},{"type":"function","title":"ow_ecs.get/2","doc":null,"ref":"ow_ecs.html#get/2"},{"type":"function","title":"ow_ecs.get/3","doc":null,"ref":"ow_ecs.html#get/3"},{"type":"function","title":"ow_ecs.handle_call/3","doc":null,"ref":"ow_ecs.html#handle_call/3"},{"type":"function","title":"ow_ecs.handle_cast/2","doc":null,"ref":"ow_ecs.html#handle_cast/2"},{"type":"function","title":"ow_ecs.handle_info/2","doc":null,"ref":"ow_ecs.html#handle_info/2"},{"type":"function","title":"ow_ecs.init/1","doc":null,"ref":"ow_ecs.html#init/1"},{"type":"function","title":"ow_ecs.match_component/2","doc":null,"ref":"ow_ecs.html#match_component/2"},{"type":"function","title":"ow_ecs.match_components/2","doc":null,"ref":"ow_ecs.html#match_components/2"},{"type":"function","title":"ow_ecs.new_entity/2","doc":null,"ref":"ow_ecs.html#new_entity/2"},{"type":"function","title":"ow_ecs.proc/1","doc":null,"ref":"ow_ecs.html#proc/1"},{"type":"function","title":"ow_ecs.proc/2","doc":null,"ref":"ow_ecs.html#proc/2"},{"type":"function","title":"ow_ecs.rm_entity/2","doc":null,"ref":"ow_ecs.html#rm_entity/2"},{"type":"function","title":"ow_ecs.start/1","doc":null,"ref":"ow_ecs.html#start/1"},{"type":"function","title":"ow_ecs.start_link/1","doc":null,"ref":"ow_ecs.html#start_link/1"},{"type":"function","title":"ow_ecs.stop/1","doc":null,"ref":"ow_ecs.html#stop/1"},{"type":"function","title":"ow_ecs.take/2","doc":null,"ref":"ow_ecs.html#take/2"},{"type":"function","title":"ow_ecs.take/3","doc":null,"ref":"ow_ecs.html#take/3"},{"type":"function","title":"ow_ecs.terminate/2","doc":null,"ref":"ow_ecs.html#terminate/2"},{"type":"function","title":"ow_ecs.to_map/1","doc":null,"ref":"ow_ecs.html#to_map/1"},{"type":"function","title":"ow_ecs.try_component/3","doc":null,"ref":"ow_ecs.html#try_component/3"},{"type":"type","title":"ow_ecs.component/0","doc":null,"ref":"ow_ecs.html#t:component/0"},{"type":"type","title":"ow_ecs.entity/0","doc":null,"ref":"ow_ecs.html#t:entity/0"},{"type":"type","title":"ow_ecs.id/0","doc":null,"ref":"ow_ecs.html#t:id/0"},{"type":"type","title":"ow_ecs.system/0","doc":null,"ref":"ow_ecs.html#t:system/0"},{"type":"type","title":"ow_ecs.world/0","doc":null,"ref":"ow_ecs.html#t:world/0"},{"type":"module","title":"ow_ecs2","doc":null,"ref":"ow_ecs2.html"},{"type":"function","title":"ow_ecs2.add_component/4","doc":null,"ref":"ow_ecs2.html#add_component/4"},{"type":"function","title":"ow_ecs2.add_components/3","doc":null,"ref":"ow_ecs2.html#add_components/3"},{"type":"function","title":"ow_ecs2.add_system/2","doc":null,"ref":"ow_ecs2.html#add_system/2"},{"type":"function","title":"ow_ecs2.add_system/3","doc":null,"ref":"ow_ecs2.html#add_system/3"},{"type":"function","title":"ow_ecs2.del_component/3","doc":null,"ref":"ow_ecs2.html#del_component/3"},{"type":"function","title":"ow_ecs2.del_components/3","doc":null,"ref":"ow_ecs2.html#del_components/3"},{"type":"function","title":"ow_ecs2.del_system/2","doc":null,"ref":"ow_ecs2.html#del_system/2"},{"type":"function","title":"ow_ecs2.entities/1","doc":null,"ref":"ow_ecs2.html#entities/1"},{"type":"function","title":"ow_ecs2.entity/2","doc":null,"ref":"ow_ecs2.html#entity/2"},{"type":"function","title":"ow_ecs2.foreach_component/3","doc":null,"ref":"ow_ecs2.html#foreach_component/3"},{"type":"function","title":"ow_ecs2.get/2","doc":null,"ref":"ow_ecs2.html#get/2"},{"type":"function","title":"ow_ecs2.get/3","doc":null,"ref":"ow_ecs2.html#get/3"},{"type":"function","title":"ow_ecs2.match_component/2","doc":null,"ref":"ow_ecs2.html#match_component/2"},{"type":"function","title":"ow_ecs2.match_components/2","doc":null,"ref":"ow_ecs2.html#match_components/2"},{"type":"function","title":"ow_ecs2.new_entity/2","doc":null,"ref":"ow_ecs2.html#new_entity/2"},{"type":"function","title":"ow_ecs2.proc/1","doc":null,"ref":"ow_ecs2.html#proc/1"},{"type":"function","title":"ow_ecs2.proc/2","doc":null,"ref":"ow_ecs2.html#proc/2"},{"type":"function","title":"ow_ecs2.rm_entity/2","doc":null,"ref":"ow_ecs2.html#rm_entity/2"},{"type":"function","title":"ow_ecs2.start/0","doc":null,"ref":"ow_ecs2.html#start/0"},{"type":"function","title":"ow_ecs2.stop/1","doc":null,"ref":"ow_ecs2.html#stop/1"},{"type":"function","title":"ow_ecs2.take/2","doc":null,"ref":"ow_ecs2.html#take/2"},{"type":"function","title":"ow_ecs2.take/3","doc":null,"ref":"ow_ecs2.html#take/3"},{"type":"function","title":"ow_ecs2.to_map/1","doc":null,"ref":"ow_ecs2.html#to_map/1"},{"type":"function","title":"ow_ecs2.try_component/3","doc":null,"ref":"ow_ecs2.html#try_component/3"},{"type":"type","title":"ow_ecs2.component/0","doc":null,"ref":"ow_ecs2.html#t:component/0"},{"type":"type","title":"ow_ecs2.entity/0","doc":null,"ref":"ow_ecs2.html#t:entity/0"},{"type":"type","title":"ow_ecs2.id/0","doc":null,"ref":"ow_ecs2.html#t:id/0"},{"type":"type","title":"ow_ecs2.system/0","doc":null,"ref":"ow_ecs2.html#t:system/0"},{"type":"opaque","title":"ow_ecs2.world/0","doc":null,"ref":"ow_ecs2.html#t:world/0"},{"type":"module","title":"ow_enet","doc":null,"ref":"ow_enet.html"},{"type":"function","title":"ow_enet.code_change/3","doc":null,"ref":"ow_enet.html#code_change/3"},{"type":"function","title":"ow_enet.handle_call/3","doc":null,"ref":"ow_enet.html#handle_call/3"},{"type":"function","title":"ow_enet.handle_cast/2","doc":null,"ref":"ow_enet.html#handle_cast/2"},{"type":"function","title":"ow_enet.handle_info/2","doc":null,"ref":"ow_enet.html#handle_info/2"},{"type":"function","title":"ow_enet.init/1","doc":"Handler is initialized for any new connection and logs the foreign IP","ref":"ow_enet.html#init/1"},{"type":"function","title":"ow_enet.start/1","doc":"Starts the ENet connection handler with any initial state","ref":"ow_enet.html#start/1"},{"type":"function","title":"ow_enet.terminate/2","doc":"Clean up the ENet handler by calling the session's disconnect callback","ref":"ow_enet.html#terminate/2"},{"type":"type","title":"ow_enet.peerinfo/0","doc":null,"ref":"ow_enet.html#t:peerinfo/0"},{"type":"type","title":"ow_enet.qos/0","doc":null,"ref":"ow_enet.html#t:qos/0"},{"type":"module","title":"ow_msg","doc":null,"ref":"ow_msg.html"},{"type":"function","title":"ow_msg.decode/2","doc":"Decodes a message using the Overworld-specific application decoder.","ref":"ow_msg.html#decode/2"},{"type":"function","title":"ow_msg.decode/4","doc":"Decodes a message using the specified encoder library and application. First, it decodes the larger message using the encoder library and application. Then, it looks up the appropriate server callback module based on the decoded call. Finally, it sends the sub-message to the sub-module for further processing and returns the result.","ref":"ow_msg.html#decode/4"},{"type":"function","title":"ow_msg.encode/2","doc":"Encodes a message using the Overworld-specific application encoder. If called from Overworld, the EncoderLib and Application are known.","ref":"ow_msg.html#encode/2"},{"type":"function","title":"ow_msg.encode/4","doc":"Encodes a message using the specified encoder library and application. It first retrieves the prefix for the application and prepends it to the encoded message.","ref":"ow_msg.html#encode/4"},{"type":"function","title":"ow_msg.raw_decode/1","doc":"Decodes a raw message and returns the decoded call and sub-message. This function is primarily used for debugging purposes.","ref":"ow_msg.html#raw_decode/1"},{"type":"module","title":"ow_protocol","doc":"","ref":"ow_protocol.html"},{"type":"function","title":"ow_protocol.app_names/0","doc":"","ref":"ow_protocol.html#app_names/0"},{"type":"function","title":"ow_protocol.apps/0","doc":"","ref":"ow_protocol.html#apps/0"},{"type":"function","title":"ow_protocol.code_change/3","doc":"","ref":"ow_protocol.html#code_change/3"},{"type":"function","title":"ow_protocol.deep_propmap_test/0","doc":"","ref":"ow_protocol.html#deep_propmap_test/0"},{"type":"function","title":"ow_protocol.handle_call/3","doc":"","ref":"ow_protocol.html#handle_call/3"},{"type":"function","title":"ow_protocol.handle_cast/2","doc":"","ref":"ow_protocol.html#handle_cast/2"},{"type":"function","title":"ow_protocol.handle_info/2","doc":"","ref":"ow_protocol.html#handle_info/2"},{"type":"function","title":"ow_protocol.init/1","doc":"","ref":"ow_protocol.html#init/1"},{"type":"function","title":"ow_protocol.inject_encoder_test/0","doc":"","ref":"ow_protocol.html#inject_encoder_test/0"},{"type":"function","title":"ow_protocol.inject_module_test/0","doc":"","ref":"ow_protocol.html#inject_module_test/0"},{"type":"function","title":"ow_protocol.prefix/1","doc":"","ref":"ow_protocol.html#prefix/1"},{"type":"function","title":"ow_protocol.reg_app_prefix_test/0","doc":"","ref":"ow_protocol.html#reg_app_prefix_test/0"},{"type":"function","title":"ow_protocol.reg_app_test/0","doc":"","ref":"ow_protocol.html#reg_app_test/0"},{"type":"function","title":"ow_protocol.register/1","doc":"","ref":"ow_protocol.html#register/1"},{"type":"function","title":"ow_protocol.route/2","doc":"","ref":"ow_protocol.html#route/2"},{"type":"function","title":"ow_protocol.router/1","doc":"","ref":"ow_protocol.html#router/1"},{"type":"function","title":"ow_protocol.rpc/2","doc":"","ref":"ow_protocol.html#rpc/2"},{"type":"function","title":"ow_protocol.rpcs/1","doc":"","ref":"ow_protocol.html#rpcs/1"},{"type":"function","title":"ow_protocol.start/0","doc":"","ref":"ow_protocol.html#start/0"},{"type":"function","title":"ow_protocol.stop/0","doc":"","ref":"ow_protocol.html#stop/0"},{"type":"function","title":"ow_protocol.terminate/2","doc":"","ref":"ow_protocol.html#terminate/2"},{"type":"module","title":"ow_session","doc":null,"ref":"ow_session.html"},{"type":"function","title":"ow_session.active/3","doc":null,"ref":"ow_session.html#active/3"},{"type":"function","title":"ow_session.callback_mode/0","doc":null,"ref":"ow_session.html#callback_mode/0"},{"type":"function","title":"ow_session.connect/1","doc":"Alias for proxy(PID, self())","ref":"ow_session.html#connect/1"},{"type":"function","title":"ow_session.connected/3","doc":null,"ref":"ow_session.html#connected/3"},{"type":"function","title":"ow_session.disconnect/1","doc":"Alias for proxy(PID, undefined)","ref":"ow_session.html#disconnect/1"},{"type":"function","title":"ow_session.disconnect_callback/1","doc":"Get the termination callback","ref":"ow_session.html#disconnect_callback/1"},{"type":"function","title":"ow_session.disconnect_callback/2","doc":"Set the termination callback","ref":"ow_session.html#disconnect_callback/2"},{"type":"function","title":"ow_session.disconnected/3","doc":null,"ref":"ow_session.html#disconnected/3"},{"type":"function","title":"ow_session.game_data/1","doc":"Get the game data","ref":"ow_session.html#game_data/1"},{"type":"function","title":"ow_session.game_data/2","doc":"Set the game data","ref":"ow_session.html#game_data/2"},{"type":"function","title":"ow_session.id/1","doc":"Get the session id of this session (network serializable)","ref":"ow_session.html#id/1"},{"type":"function","title":"ow_session.id/2","doc":"Set the session ID for this session (network serializable)","ref":"ow_session.html#id/2"},{"type":"function","title":"ow_session.init/1","doc":null,"ref":"ow_session.html#init/1"},{"type":"function","title":"ow_session.latency/1","doc":"Get the session latency","ref":"ow_session.html#latency/1"},{"type":"function","title":"ow_session.latency/2","doc":"Set the session latency","ref":"ow_session.html#latency/2"},{"type":"function","title":"ow_session.proxy/1","doc":"Get the pid of the session's proxy process.","ref":"ow_session.html#proxy/1"},{"type":"function","title":"ow_session.proxy/2","doc":"Set the pid of the session's proxy process, including ENet, WebSocket and internal handlers.","ref":"ow_session.html#proxy/2"},{"type":"function","title":"ow_session.serializer/1","doc":"Get the format for serializing data.","ref":"ow_session.html#serializer/1"},{"type":"function","title":"ow_session.serializer/2","doc":"Set the format for serializing data. If communication happens all within Erlang node(s), then there is no need to set a serializer.","ref":"ow_session.html#serializer/2"},{"type":"function","title":"ow_session.start/0","doc":"Start the session server and create a new session with this ID","ref":"ow_session.html#start/0"},{"type":"function","title":"ow_session.start/1","doc":null,"ref":"ow_session.html#start/1"},{"type":"function","title":"ow_session.stop/1","doc":"Stop the session server","ref":"ow_session.html#stop/1"},{"type":"function","title":"ow_session.terminate/3","doc":null,"ref":"ow_session.html#terminate/3"},{"type":"function","title":"ow_session.token/1","doc":"Get the session token.","ref":"ow_session.html#token/1"},{"type":"function","title":"ow_session.token/2","doc":"Sets the session token","ref":"ow_session.html#token/2"},{"type":"function","title":"ow_session.zone/1","doc":"Get the zone pid","ref":"ow_session.html#zone/1"},{"type":"function","title":"ow_session.zone/2","doc":"Sets the zone pid","ref":"ow_session.html#zone/2"},{"type":"type","title":"ow_session.id/0","doc":null,"ref":"ow_session.html#t:id/0"},{"type":"type","title":"ow_session.mfargs/0","doc":null,"ref":"ow_session.html#t:mfargs/0"},{"type":"type","title":"ow_session.proxy_pid/0","doc":null,"ref":"ow_session.html#t:proxy_pid/0"},{"type":"type","title":"ow_session.serializer/0","doc":null,"ref":"ow_session.html#t:serializer/0"},{"type":"type","title":"ow_session.token/0","doc":null,"ref":"ow_session.html#t:token/0"},{"type":"type","title":"ow_session.zone_pid/0","doc":null,"ref":"ow_session.html#t:zone_pid/0"},{"type":"module","title":"ow_session_sup","doc":"Overworld supervisor for client sessions","ref":"ow_session_sup.html"},{"type":"function","title":"ow_session_sup.delete/1","doc":null,"ref":"ow_session_sup.html#delete/1"},{"type":"function","title":"ow_session_sup.init/1","doc":null,"ref":"ow_session_sup.html#init/1"},{"type":"function","title":"ow_session_sup.new/1","doc":null,"ref":"ow_session_sup.html#new/1"},{"type":"function","title":"ow_session_sup.start_link/0","doc":null,"ref":"ow_session_sup.html#start_link/0"},{"type":"module","title":"ow_session_util","doc":null,"ref":"ow_session_util.html"},{"type":"function","title":"ow_session_util.disconnect/1","doc":"Set the session to disconnected state and run the appropriate callback handler","ref":"ow_session_util.html#disconnect/1"},{"type":"function","title":"ow_session_util.notify_clients/2","doc":"Send a message to a list of clients","ref":"ow_session_util.html#notify_clients/2"},{"type":"function","title":"ow_session_util.session_ping/2","doc":"Calculate the latency based on the RTT to the client","ref":"ow_session_util.html#session_ping/2"},{"type":"function","title":"ow_session_util.session_request/2","doc":"Request a new session, or rejoin an existing one","ref":"ow_session_util.html#session_request/2"},{"type":"module","title":"ow_sup","doc":"ow top level supervisor.","ref":"ow_sup.html"},{"type":"function","title":"ow_sup.init/1","doc":"Initializes the supervisor with child specifications.","ref":"ow_sup.html#init/1"},{"type":"function","title":"ow_sup.start_link/0","doc":"Starts the top-level supervisor.","ref":"ow_sup.html#start_link/0"},{"type":"module","title":"ow_token_serv","doc":null,"ref":"ow_token_serv.html"},{"type":"function","title":"ow_token_serv.code_change/3","doc":null,"ref":"ow_token_serv.html#code_change/3"},{"type":"function","title":"ow_token_serv.exchange/1","doc":"Exchanges a token for a new one if it matches an existing Session PID.","ref":"ow_token_serv.html#exchange/1"},{"type":"function","title":"ow_token_serv.handle_call/3","doc":null,"ref":"ow_token_serv.html#handle_call/3"},{"type":"function","title":"ow_token_serv.handle_cast/2","doc":null,"ref":"ow_token_serv.html#handle_cast/2"},{"type":"function","title":"ow_token_serv.handle_info/2","doc":null,"ref":"ow_token_serv.html#handle_info/2"},{"type":"function","title":"ow_token_serv.init/1","doc":null,"ref":"ow_token_serv.html#init/1"},{"type":"function","title":"ow_token_serv.new/1","doc":"Generates a new token for the given session PID.","ref":"ow_token_serv.html#new/1"},{"type":"function","title":"ow_token_serv.start_link/0","doc":"Starts the token server.","ref":"ow_token_serv.html#start_link/0"},{"type":"function","title":"ow_token_serv.terminate/2","doc":null,"ref":"ow_token_serv.html#terminate/2"},{"type":"type","title":"ow_token_serv.token/0","doc":null,"ref":"ow_token_serv.html#t:token/0"},{"type":"module","title":"ow_util","doc":null,"ref":"ow_util.html"},{"type":"function","title":"ow_util.any_in_list/2","doc":null,"ref":"ow_util.html#any_in_list/2"},{"type":"function","title":"ow_util.mapfind/3","doc":null,"ref":"ow_util.html#mapfind/3"},{"type":"function","title":"ow_util.maplistsort/2","doc":null,"ref":"ow_util.html#maplistsort/2"},{"type":"function","title":"ow_util.maplistsort/3","doc":null,"ref":"ow_util.html#maplistsort/3"},{"type":"function","title":"ow_util.mapstore/4","doc":null,"ref":"ow_util.html#mapstore/4"},{"type":"function","title":"ow_util.pipeline/2","doc":null,"ref":"ow_util.html#pipeline/2"},{"type":"function","title":"ow_util.remove_dups/1","doc":null,"ref":"ow_util.html#remove_dups/1"},{"type":"function","title":"ow_util.run_bchecks/1","doc":null,"ref":"ow_util.html#run_bchecks/1"},{"type":"function","title":"ow_util.run_checks/1","doc":null,"ref":"ow_util.html#run_checks/1"},{"type":"function","title":"ow_util.take_random/1","doc":"This function will take a list of items and return a random element Alternatively an integer number of items may be specified","ref":"ow_util.html#take_random/1"},{"type":"function","title":"ow_util.take_random/2","doc":null,"ref":"ow_util.html#take_random/2"},{"type":"function","title":"ow_util.weighted_random/1","doc":null,"ref":"ow_util.html#weighted_random/1"},{"type":"module","title":"ow_websocket","doc":null,"ref":"ow_websocket.html"},{"type":"function","title":"ow_websocket.init/2","doc":"Handler is initialized for any new connection and logs the foreign IP","ref":"ow_websocket.html#init/2"},{"type":"function","title":"ow_websocket.terminate/3","doc":"Terminate callback for cleanup processes","ref":"ow_websocket.html#terminate/3"},{"type":"function","title":"ow_websocket.websocket_handle/2","doc":"The websocket handler passes any binary message down to the protocol decoder for further processing. All other messages are discarded.","ref":"ow_websocket.html#websocket_handle/2"},{"type":"function","title":"ow_websocket.websocket_info/2","doc":"websocket_info is triggered when a message from another erlang process comes into this handler process.","ref":"ow_websocket.html#websocket_info/2"},{"type":"function","title":"ow_websocket.websocket_init/1","doc":"Set up the initial state of the websocket handler","ref":"ow_websocket.html#websocket_init/1"},{"type":"type","title":"ow_websocket.ws_result/0","doc":null,"ref":"ow_websocket.html#t:ws_result/0"},{"type":"behaviour","title":"ow_zone","doc":null,"ref":"ow_zone.html"},{"type":"function","title":"ow_zone.broadcast/2","doc":null,"ref":"ow_zone.html#broadcast/2"},{"type":"function","title":"ow_zone.call/2","doc":null,"ref":"ow_zone.html#call/2"},{"type":"function","title":"ow_zone.call/3","doc":null,"ref":"ow_zone.html#call/3"},{"type":"function","title":"ow_zone.cast/2","doc":null,"ref":"ow_zone.html#cast/2"},{"type":"function","title":"ow_zone.code_change/3","doc":null,"ref":"ow_zone.html#code_change/3"},{"type":"function","title":"ow_zone.disconnect/2","doc":null,"ref":"ow_zone.html#disconnect/2"},{"type":"function","title":"ow_zone.handle_call/3","doc":null,"ref":"ow_zone.html#handle_call/3"},{"type":"function","title":"ow_zone.handle_cast/2","doc":null,"ref":"ow_zone.html#handle_cast/2"},{"type":"callback","title":"ow_zone.handle_disconnect/3","doc":null,"ref":"ow_zone.html#c:handle_disconnect/3"},{"type":"function","title":"ow_zone.handle_info/2","doc":null,"ref":"ow_zone.html#handle_info/2"},{"type":"callback","title":"ow_zone.handle_info/2","doc":null,"ref":"ow_zone.html#c:handle_info/2"},{"type":"callback","title":"ow_zone.handle_join/4","doc":null,"ref":"ow_zone.html#c:handle_join/4"},{"type":"callback","title":"ow_zone.handle_part/4","doc":null,"ref":"ow_zone.html#c:handle_part/4"},{"type":"callback","title":"ow_zone.handle_reconnect/3","doc":null,"ref":"ow_zone.html#c:handle_reconnect/3"},{"type":"callback","title":"ow_zone.handle_tick/2","doc":null,"ref":"ow_zone.html#c:handle_tick/2"},{"type":"function","title":"ow_zone.init/1","doc":"Initialize the internal state of the zone, with timer","ref":"ow_zone.html#init/1"},{"type":"callback","title":"ow_zone.init/1","doc":null,"ref":"ow_zone.html#c:init/1"},{"type":"function","title":"ow_zone.join/3","doc":null,"ref":"ow_zone.html#join/3"},{"type":"function","title":"ow_zone.part/3","doc":null,"ref":"ow_zone.html#part/3"},{"type":"function","title":"ow_zone.reconnect/2","doc":null,"ref":"ow_zone.html#reconnect/2"},{"type":"function","title":"ow_zone.reply/2","doc":null,"ref":"ow_zone.html#reply/2"},{"type":"function","title":"ow_zone.rpc/4","doc":null,"ref":"ow_zone.html#rpc/4"},{"type":"function","title":"ow_zone.send/3","doc":null,"ref":"ow_zone.html#send/3"},{"type":"function","title":"ow_zone.start/3","doc":null,"ref":"ow_zone.html#start/3"},{"type":"function","title":"ow_zone.start/4","doc":null,"ref":"ow_zone.html#start/4"},{"type":"function","title":"ow_zone.start_link/3","doc":null,"ref":"ow_zone.html#start_link/3"},{"type":"function","title":"ow_zone.start_link/4","doc":null,"ref":"ow_zone.html#start_link/4"},{"type":"function","title":"ow_zone.start_monitor/3","doc":null,"ref":"ow_zone.html#start_monitor/3"},{"type":"function","title":"ow_zone.start_monitor/4","doc":null,"ref":"ow_zone.html#start_monitor/4"},{"type":"function","title":"ow_zone.stop/1","doc":null,"ref":"ow_zone.html#stop/1"},{"type":"function","title":"ow_zone.stop/3","doc":null,"ref":"ow_zone.html#stop/3"},{"type":"function","title":"ow_zone.terminate/2","doc":null,"ref":"ow_zone.html#terminate/2"},{"type":"type","title":"ow_zone.from/0","doc":null,"ref":"ow_zone.html#t:from/0"},{"type":"type","title":"ow_zone.server_name/0","doc":null,"ref":"ow_zone.html#t:server_name/0"},{"type":"type","title":"ow_zone.server_ref/0","doc":null,"ref":"ow_zone.html#t:server_ref/0"},{"type":"type","title":"ow_zone.session_pid/0","doc":null,"ref":"ow_zone.html#t:session_pid/0"},{"type":"type","title":"ow_zone.start_mon_ret/0","doc":null,"ref":"ow_zone.html#t:start_mon_ret/0"},{"type":"type","title":"ow_zone.start_opt/0","doc":null,"ref":"ow_zone.html#t:start_opt/0"},{"type":"type","title":"ow_zone.start_ret/0","doc":null,"ref":"ow_zone.html#t:start_ret/0"},{"type":"extras","title":"Overworld Game Server","doc":"Overworld Game Server\n=================================================\n\nOverworld is a multiplayer game server framework for Erlang and other BEAM\nlanguages, designed to seamlessly integrate with the [Godot Game\nEngine](https://godotengine.org/). \n\nDescription\n-------------------------------------------------\nOverworld provides developers with a toolkit to build robust multiplayer\ngames. Write your game server with an industry-proven, scalable,\nfunctional programming language!\n\nOverworld automatically manages several low-level aspects of network\ncommunication, including:\n\n1. Network connections via TCP (WebSocket) or UDP (ENet), or freely mix the two!\n2. Serialization and deserialization of data to and from wire format (via Protobuf)\n3. Client code generation for Godot from low-level packet handling to signaling\n   game events \n\nAbstracting the networking details, Overworld allows developers to concentrate\nmore on game logic and less on communication infrastructure. This framework is\nsuitable for various multiplayer game types, from small co-op experiences to\nlarger online games.\n\nOverworld aims to provide a solid foundation for multiplayer game development,\nstreamlining the process of creating networked games while leveraging the\nrobustness of Erlang/OTP.\n\nLicense\n-------------------------------------------------\nOverworld is released under the MPL 2.0 License. See the LICENSE file for more\ndetails.\n\nPrerequisites\n-------------------------------------------------\n* [Erlang/OTP 27](https://www.erlang.org/downloads) or greater\n* [rebar3](https://rebar3.org/)\n\nQuickstart\n-------------------------------------------------\nSee [here](docs/quickstart/intro.md)\n\nRoadmap\n-------------------------------------------------\n* Support for other BEAM languages, including Elxiir\n* Optional Lua-based game logic, via [Luerl](https://github.com/rvirding/luerl)\n* More docs and demos!","ref":"readme.html"},{"type":"extras","title":"LICENSE","doc":"Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.","ref":"license.html"},{"type":"extras","title":"Quickstart Intro","doc":"# Overworld Tutorials\nThese tutorials cover the basics of creating BEAM-powered game servers\nconnected with Godot-based game clients using the Overworld framework.\n\nTo proceed with the tutorials, you will need to have [Erlang/OTP\n27](https://www.erlang.org/downloads) (or greater) as well as\n[rebar3](https://rebar3.org/) installed on the system you plan to use as your\ngame server. For your client, we recommend the latest stable release of the\n[Godot](https://godotengine.com/) 4.x release series.","ref":"intro.html"},{"type":"extras","title":"Quickstart - Quickstart Intro","doc":"In the quickstart tutorial, you will build a Chat server in Erlang that will\nhandle clients joining, parting, abruptly disconnecting, and sending chat\nmessages over WebSockets. You will learn how to use Overworld's `ow_zone`\nErlang behaviour, \n\nOn the client side, we will assume some prior working knowledge of Godot and\nfocus on the Overworld integration. You will learn how to use the Overworld\nClient Add-on to automatically download and generate a protobuf library for\ncommunicating with the Overworld server. \n\n[Creating the server](server.md)\n\n[Creating the client](client.md)","ref":"intro.html#quickstart"},{"type":"extras","title":"Quickstart for Server","doc":"# Conceptual Overview\nOverworld is built around the concept of \"Zones\". A Zone is an Erlang process that manages a group of connected clients, handling tasks such as:\n\n* Connected clients \n* Message serialization and deserialization as needed (Protobuf for networked clients, tuples for Erlang clients) \n* Broadcasting messages to connected clients or specific lists of clients \n* Implementing game via periodic ticks with configurable tick rate\n\nOn the client side, Overworld generates Godot code that interfaces with the Erlang server, providing an easy-to-use API for sending and receiving messages.\n\n# Server Implementation Guide","ref":"server.html"},{"type":"extras","title":"Prerequisites - Quickstart for Server","doc":"*  [Erlang/OTP 27](https://www.erlang.org/downloads)\n*  [rebar3](https://rebar3.org/)","ref":"server.html#prerequisites"},{"type":"extras","title":"Creating the `chat` application - Quickstart for Server","doc":"```bash\nrebar3 new app chat\ncd chat\n```\n\nEdit `rebar.config` to include Overworld and the Protocol Buffers plugins:\n```erlang\ndeps, [\n    {overworld, {git, \"https://github.com/saltysystems/overworld.git\", {branch, \"master\"}}}\n]}.\n\n{plugins, [\n    {rebar3_gpb_plugin, \"2.23.2\"}\n]}.\n\n{erl_opts, [\n    {i, \"./_build/default/plugins/gpb/include\"}\n]}.\n\n{gpb_opts, [\n    {i, \"priv/proto\"},\n    {module_name_suffix, \"_pb\"},\n    {o_erl, \"src\"},\n    {o_hrl, \"src\"},\n    {strings_as_binaries, false},\n    {maps, true},\n    {msgs_as_maps, true},\n    {mapfields_as_maps, true},\n    type_specs\n]}.\n\n{provider_hooks, [\n    {pre, [\n        {compile, {protobuf, compile}},\n        {clean, {protobuf, clean}}\n    ]}\n]}.\n```\n\nRun `rebar3 upgrade` to fetch dependencies.","ref":"server.html#creating-the-chat-application"},{"type":"extras","title":"Implementing the chat zone module - Quickstart for Server","doc":"First, let's create the chat_zone. From the top-level directory of the chat application:\n\n```bash\ntouch src/chat_zone.erl\n```\n\nNow open the `chat_zone.erl` module and paste in the following. We'll go over it section-by-section afterwards. \n```erlang\n-module(chat_zone).\n-behaviour(ow_zone).\n\n-export([\n         start_link/0,\n         stop/0,\n         join/2,\n         part/2,\n         channel_msg/2\n        ]).\n\n-export([init/1,\n         handle_join/4,\n         handle_part/4,\n         handle_channel_msg/4,\n         handle_tick/2\n        ]).\n\n-define(SERVER, ?MODULE).\n\n-rpc_client([sync, channel_msg]).\n-rpc_server([join, part, channel_msg]).\n\nstart_link() ->\n    ow_zone:start_link({local, ?SERVER}, ?MODULE, [], []).\nstop() ->\n    ow_zone:stop(?SERVER).\njoin(Msg, Who) ->\n    ow_zone:join(?SERVER, Msg, Who).\npart(Msg, Who) ->\n    ow_zone:part(?SERVER, Msg, Who).\nchannel_msg(Msg, Who) ->\n    ow_zone:rpc(?SERVER, channel_msg, Msg, Who).\n\ninit([]) ->\n    State = #{},\n    Config = #{},\n    {ok, State, Config}.\n\nhandle_join(Msg, Who, _ZD, State) ->\n    SessionID = ow_session:id(Who),\n    Handle = maps:get(handle, Msg, \"Unknown\" ++ integer_to_list(SessionID)),\n    logger:notice(\"Player ~p (~p) has joined the chat.\", [Handle, Who]),\n    State1 = State#{ Who => Handle },\n    Handles = maps:values(State1),\n    BcastMsg = {sync, #{ handles => Handles }},\n    {broadcast, BcastMsg, State1}.\n\nhandle_part(_Msg, Who, _ZD, State) ->\n    #{ Who := Handle } = State,\n    logger:notice(\"Player ~p (~p) has left the chat.\", [Handle, Who]),\n    State1 = maps:remove(Who, State),\n    Handles = maps:values(State1),\n    BcastMsg = {sync, #{ handles => Handles }},\n    {broadcast, BcastMsg, State1}.\n\nhandle_channel_msg(Msg, Who, _ZD, State) ->\n    #{ Who := Handle } = State,\n    logger:notice(\"<~p>: ~p\", [Handle, Msg]),\n    Msg1 = Msg#{ handle => Handle },\n    ow_zone:broadcast(?SERVER, {channel_msg, Msg1}),\n    {noreply, State}.\nhandle_tick(_ZoneData, State) ->\n    {noreply, State}.\n```\n\nNext we'll explain each component in detail.","ref":"server.html#implementing-the-chat-zone-module"},{"type":"extras","title":"Module Structure - Quickstart for Server","doc":"Let's start by breaking down the structure of the `chat_zone` module. Here are the top-level annotations for the module:\n\n```erlang\n-module(chat_zone).\n-behaviour(ow_zone).\n\n% API exports\n-export([\n    start_link/0,\n    stop/0,\n    join/2,\n    part/2,\n    channel_msg/2\n]).\n\n% Callback exports\n-export([\n    init/1,\n    handle_join/4,\n    handle_part/4,\n    handle_channel_msg/4,\n    handle_tick/2\n]).\n\n% RPC annotations\n-rpc_client([sync, channel_msg]).\n-rpc_server([join, part, channel_msg]).\n```\n\n#### Behavior Declaration\n\nThe `-behaviour(ow_zone).` line declares that this module implements the `ow_zone` behavior. This is similar to implementing `gen_server`, but tailored for tick-based games in Overworld. \n\n#### API Functions\n\nThe first export list defines the public API for the chat zone. These functions will be called by other parts of your application to interact with the chat zone.\n\n#### Callback Functions\n\nThe second export list defines the callback functions required by the `ow_zone` behavior. These functions will be called by Overworld in response to various events.\n\n#### RPC Annotations\n\nThe `-rpc_client` and `-rpc_server` annotations are crucial for Overworld's code generation features:\n\n- `-rpc_client([sync, channel_msg]).` indicates that the server can send `sync` and `channel_msg` messages to clients.\n- `-rpc_server([join, part, channel_msg]).` indicates that clients can send `join`, `part`, and `channel_msg` messages to the server.\n\nThese annotations will generate appropriate Godot signals and functions in the client library. For example, the `sync` function will be available in Godot as a signal `server_sync` emitted in the `Overworld` module. Likewise, `join` will be available to call via `Overworld.join(handle: String)`. \n\n###  Implementing API Functions\n\nNow, let's implement the API functions:\n\n```erlang\n-define(SERVER, ?MODULE).\n\nstart_link() ->\n    ow_zone:start_link({local, ?SERVER}, ?MODULE, [], []).\n\nstop() ->\n    ow_zone:stop(?SERVER).\n\njoin(Msg, Who) ->\n    ow_zone:join(?SERVER, Msg, Who).\n\npart(Msg, Who) ->\n    ow_zone:part(?SERVER, Msg, Who).\n\nchannel_msg(Msg, Who) ->\n    ow_zone:rpc(?SERVER, channel_msg, Msg, Who).\n```\n\nThese functions mostly delegate to the `ow_zone` module, which handles the underlying mechanics of the zone behavior. The `?SERVER` macro is used to refer to the module name, which is a common pattern in Erlang for naming registered processes.","ref":"server.html#module-structure"},{"type":"extras","title":"Implementing Callback Functions - Quickstart for Server","doc":"Next, we'll implement the callback functions required by the `ow_zone` behavior:\n\n#### init/1\n\n```erlang\ninit([]) ->\n    State = #{},\n    Config = #{},\n    {ok, State, Config}.\n```\n\nThis function initializes the zone's state. In this simple chat application, we start with an empty map for both internal State and the `ow_zone` Config. You can add any initial state or configuration here as needed. For example, you might want to change the tick rate via `Config = #{ tick_ms => 100 }` for a 100ms tick rate. You can find further documentation [here](../architecture/ow_zone.md). \n\n#### handle_join/4\n\n```erlang\nhandle_join(Msg, Who, _ZD, State) ->\n    SessionID = ow_session:id(Who),\n    Handle = maps:get(handle, Msg, \"Unknown\" ++ integer_to_list(SessionID)),\n    logger:notice(\"Player ~p (~p) has joined the chat.\", [Handle, Who]),\n    State1 = State#{ Who => Handle },\n    Handles = maps:values(State1),\n    BcastMsg = {sync, #{ handles => Handles }},\n    {broadcast, BcastMsg, State1}.\n```\n\nThis function handles a client joining the chat. It:\n1. Extracts the client's handle from the join message or generates one.\n2. Logs the join event.\n3. Updates the state with the new client.\n4. Prepares a broadcast message with the updated list of handles.\n5. Returns a tuple instructing Overworld to broadcast the message and update the state.\n\n#### handle_part/4\n\n```erlang\nhandle_part(_Msg, Who, _ZD, State) ->\n    #{ Who := Handle } = State,\n    logger:notice(\"Player ~p (~p) has left the chat.\", [Handle, Who]),\n    State1 = maps:remove(Who, State),\n    Handles = maps:values(State1),\n    BcastMsg = {sync, #{ handles => Handles }},\n    {broadcast, BcastMsg, State1}.\n```\n\nThis function is similar to `handle_join/4`, but handles a client leaving the chat. It removes the client from the state and broadcasts an updated list of handles.\n\n#### handle_channel_msg/4\n\n```erlang\nhandle_channel_msg(Msg, Who, _ZD, State) ->\n    #{ Who := Handle } = State,\n    logger:notice(\"<~p>: ~p\", [Handle, Msg]),\n    Msg1 = Msg#{ handle => Handle },\n    ow_zone:broadcast(?SERVER, {channel_msg, Msg1}),\n    {noreply, State}.\n```\n\nThis function handles chat messages from clients. It logs the message, adds the sender's handle to the message, and broadcasts it to all clients.\n\n#### handle_tick/2\n\n```erlang\nhandle_tick(_ZoneData, State) ->\n    {noreply, State}.\n```\n\nThis function is called periodically by Overworld. In this simple chat application, we don't need to do anything on each tick, so we just return the unchanged state.","ref":"server.html#implementing-callback-functions"},{"type":"extras","title":"Chat Application Protocol Buffer Schema - Quickstart for Server","doc":"","ref":"server.html#chat-application-protocol-buffer-schema"},{"type":"extras","title":"Overview - Quickstart for Server","doc":"For our chat application, we use Protocol Buffers to define the structure of messages exchanged between the Erlang server and Godot clients. This schema defines four types of messages: join, part, channel_msg, and sync.","ref":"server.html#overview"},{"type":"extras","title":"Creating the Schema File - Quickstart for Server","doc":"Create a new file `chat.proto` in the `priv/proto` directory of your Erlang application:\n\n```bash\nmkdir -p priv/proto\ntouch priv/proto/chat.proto\n```","ref":"server.html#creating-the-schema-file"},{"type":"extras","title":"The Schema Definition - Quickstart for Server","doc":"Open `chat.proto` and add the following content:\n\n```protobuf\nsyntax = \"proto2\";\n\npackage chat;\n\nmessage chat {\n    oneof msg {\n        join        join        = 1;\n        part        part        = 2;\n        channel_msg channel_msg = 3;\n        sync        sync        = 4;\n    }\n}\n\nmessage join {\n    optional string handle = 1;\n}\n\nmessage part {\n}\n\nmessage channel_msg {\n    optional string handle = 1;\n    optional string text = 2;\n}\n\nmessage sync {\n    repeated string handles = 1;\n}\n```","ref":"server.html#the-schema-definition"},{"type":"extras","title":"Explanation of Message Types - Quickstart for Server","doc":"#### Main chat Message\n\nThe `chat` message is the wrapper for all other message types. It uses a `oneof` field, which means each `chat` message will contain exactly one of the submessage types.\n\n```protobuf\nmessage chat {\n    oneof msg {\n        join        join        = 1;\n        part        part        = 2;\n        channel_msg channel_msg = 3;\n        sync        sync        = 4;\n    }\n}\n```\n\n#### Join Message\n\nUsed when a client joins the chat.\n\n```protobuf\nmessage join {\n    optional string handle = 1;\n}\n```\n\n- `handle`: The user's chosen display name. It's optional, allowing the server to assign a default if none is provided.\n\n#### Part Message\n\nUsed when a client leaves the chat.\n\n```protobuf\nmessage part {\n}\n```\n\nThis message is empty because no additional information is needed when a user leaves.\n\n#### Channel Message\n\nUsed for sending chat messages.\n\n```protobuf\nmessage channel_msg {\n    optional string handle = 1;\n    optional string text = 2;\n}\n```\n\n- `handle`: The sender's display name.\n- `text`: The content of the message.\n\n#### Sync Message\n\nUsed to update clients with the current list of users in the chat.\n\n```protobuf\nmessage sync {\n    repeated string handles = 1;\n}\n```\n\n- `handles`: A list of all current user handles in the chat.","ref":"server.html#explanation-of-message-types"},{"type":"extras","title":"Usage in the Chat Application - Quickstart for Server","doc":"- When a user joins, the client sends a `join` message with their chosen handle.\n- The server responds with a `sync` message to all clients, updating the user list.\n- Users send chat messages using the `channel_msg` type.\n- When a user leaves, the client sends a `part` message, and the server again sends a `sync` to all remaining clients.\n\nThis schema provides a simple yet flexible structure for our chat application, allowing for easy extension if we need to add more features in the future.","ref":"server.html#usage-in-the-chat-application"},{"type":"extras","title":"Quickstart for Client","doc":"# Creating the client\n\nWith server in hand and running in a `rebar3 shell`, you can start hacking away\nat a client. Since we're more focused on the server-side programming, we will\nassume some Godot knowledge and provide a client template repo from which you\ncan start.","ref":"client.html"},{"type":"extras","title":"Downloading the Chat Client example repository - Quickstart for Client","doc":"Download the zip, or clone the Chat Client example repository to a location of\nyour choice, e.g.:\n\n```bash\ncd ~ # to cd to $HOME, for example\ngit clone https://github.com/saltysystems/chat-client-example\n```\n\nOpen Godot and click **Import**. Navigate to this project directory and select\nthe chat-client-example directory.","ref":"client.html#downloading-the-chat-client-example-repository"},{"type":"extras","title":"Installing the Overworld Client Add-on - Quickstart for Client","doc":"The [Overworld Client Add-on](https://github.com/saltysystems/overworld_client)\nis a Godot plugin that provides a new tab in your Godot editor to download and\ncompile Protobuf files using [Godobuf](https://github.com/oniksan/godobuf). \n\nYou'll want to clone or download a zip of this archive from GitHub, and then\ncopy/paste the Add-Ons directory into your `chat-client-example` directory from above.\n\nFrom a shell:\n```bash\ncd ~ # to cd to $HOME, for example\ngit clone https://github.com/saltysystems/overworld_client\ncp -a overworld_client/addons chat-client-example/addons\n```","ref":"client.html#installing-the-overworld-client-add-on"},{"type":"extras","title":"Enabling the Overworld Client - Quickstart for Client","doc":"In your Godot editor, click **Project**, then **Project Settings**, choose the\n**Plugins** tab. You should see the \"Overworld Client\" listed. Click the **On**\ncheckbox and then click **Close**.\n\nNow you should see an new tab in your editor called **Overworld**. This is how\nyou'll interact with the Overworld server, download protobuf files and generate\nthe client library on-the-fly.","ref":"client.html#enabling-the-overworld-client"},{"type":"extras","title":"Generating the Chat client library - Quickstart for Client","doc":"First, if you haven't read though the [Creating the server](server.md)\ndocumentation, please do that now. Before you continue, you'll want to have the\nOverworld server running in a `rebar3 shell` or otherwise. \n\nEnter your Overworld server address. If the server is running on the same\ncomputer as your client, the defaults should be fine. Otherwise you'll need to\nadjust the _Overworld Server Address_ field as appropriate.\n\nBy default, Overworld will download all files to `res://scripts` directory in\nyour Godot project. If this directory doesn't exist, create it now or choose a\ndirectory by clicking on the ellipsis (`...`) below _Output Directory_ in the\nOverworld tab of Godot.\n\nOnce you have set up the server address and created or chosen an appropriate\nscripts directory, click **Download & Compile!**. \n\nOn the server, you should see something like this in the logs:\n```\n=INFO REPORT==== 27-Sep-2024::10:20:51.299144 ===\nClient \"192.168.1.100\" GET manifest.json\n=INFO REPORT==== 27-Sep-2024::10:20:51.437124 ===\nClient \"192.168.1.100\" GET \"libow4.gd\"\n=INFO REPORT==== 27-Sep-2024::10:20:51.596506 ===\nClient \"192.168.1.100\" GET \"overworld.proto\"\n```\n\nOn the client, you should see the `scripts/` directory populated with 2 files:\n`libow4.gd` and `overworld_pb.gd`","ref":"client.html#generating-the-chat-client-library"},{"type":"extras","title":"Zone Behaviour","doc":"Overworld Zone Behaviour\n========================\n\nWhat is `ow_zone`? \n-------------------\n\n`ow_zone` is an OTP behavior that wraps around\n[`gen_server`](https://www.erlang.org/doc/man/gen_server.html) to implement\na few primitives that are used by tick-based game servers. \n\nThis module provides a number of convenience features for implementors of the\nbehaviour:\n * Automatic tracking of players as they join and depart\n * Client agnostic with data (de)serialization handled automatically for both\n   locally attached clients (Erlang processes such as NPCs) and network clients\n * Convenient reply format - send messages to single players, multiple players,\n   or broadcast zone-wide.\n\nInitial ConfigMap\n---------\n\nWhen creating a server with the ow_zone behaviour, you can specify a ConfigMap\nto configure various aspects of ow_zone. ow_zone understands the following keys:\n```\n#{ \n    require_auth :: boolean(),\n    tick_rate :: pos_integer()\n}\n```\n\nwhere:\n|    Callback     | Description | \n| --------------- | ----------- |\n| `require_auth`    | Check whether or not a client session has authenticated with Overworld (default `false`) |\n| `tick_rate`       | Set the rate at which the server processes a tick, in milliseconds (default `30`) |\n\n\nCallbacks\n---------\n\nAny server implementing the `ow_zone` behaviour needs to implement the\nfollowing callbacks:\n|    Callback     | Description | \n| --------------- | ----------- |\n| `handle_join`   | A user session connects to this zone | \n| `handle_part`   | A user session disconnects from this zone |\n| `handle_rpc`    | A user sends an action message |\n| `handle_tick`   | The server has updated the global state for the next tick |\n\nOptional callbacks:\n|    Callback     | Description | \n| --------------- | ----------- |\n| `handle_status` | Arbitrary term containing stat information | \n| `rpc_info`      | A list of Overworld RPCs (see the [Protocol documentation](../architecture/protocol.md))| \n\n\nOptional Callbacks\n---------\n\nYou can provide arbitrary stats about your ow_zone via the status/0 callback. \n\n\n`ow_zone` reply format\n--------------------------\nServers that implement the `ow_zone` callback functions will have a few\ndifferent response options.\n\n|  Response       | Description | \n| --------------- | ----------- |\n| `{'@zone', Msg}` | Send a zone-wide message *Msg* to all connected clients |\n| `{'@', [PlayerID, ...], Msg}` | Send a message, *Msg*, to players specified by *PlayerID*. |\n| `noreply` | Send no reply to any connected player |\n\nThe `ow_zone` gen_server keeps an internal record of connected players and\nwill add/remove players accordingly. Each callback handler for `ow_zone` will\ntake \"Players\" as an argument, where the Overworld will pass the best \nknowledge of connected players at that time to the handler. \n\n\nImplementing Handlers\n------------\n\nTo implement an Overworld Zone handler, you'll need to construct a tuple with 3 terms at the end of every function.\n```\n                              ok\n                        {ok, SessionUpdate}\n    { Reply,     {ok, SessionUpdate, PlayerUpdate},       GameState }.\n       |                       |                              |\n       |                       |                              |\n  A reply in the               |                      Your current, and   \n  form of the reply            |                      possibly updated game\n  format as seen in            |                      loop state at the \n  the previous                 |                      end of the handler.\n  section.                     |\n                               |\n                  Any updates to the player's session\n                  (SessionUpdate) plus any updates to\n                  the Player object in the Player\n                  Registry (PlayerUpdate). Updates are\n                  optional.\n```","ref":"ow_zone.html"},{"type":"extras","title":"Protocol Guide (Outdated)","doc":"Overworld Protocol Docs\n===============\n\n\nOverworld Packet Structure\n-----------------\nAn Overworld message is constructed as such:\n\n```\n    Framing (2-14 bytes)       OpCode (2 bytes)     Payload (N bytes)\n |--------------------------|------------------|--------------------------|\n     WebSocket Data                Overworld-specific Data\n```\n\nWebSocket is used as the transport mechanism thanks to easy firewall negotation, etc. Packets should probably not be much larger than 1000 bytes to avoid fragmentation on the wire. \n\n\nOverworld RPC structure\n------------------------\n| Key         | Type            | Description                                  |\n| ---         | -----            | ------------------------------------------   |\n| `opcode`      | `16#0000..16#FFFFF` | A 2-byte integer prefix indicating the type of message to be processed |\n| `c2s_call`    | `atom()`           | Name of a client-to-server calling function in the generated client library |\n| `c2s_handler` | `mfa()`            | A module and function to handle client. The function must either be arity 1 (handles messages from clients without established sessions) or arity 2 (message + client session state)  |\n| `s2c_call`    | `atom()`           | Name of a server-to-client calling function, which will generate a signal of the same name in the client library  |\n| `encoder`     | `atom()`           | Name of the module that will marshall/unmarshall data with [GPB](https://github.com/tomas-abrahamsson/gpb) | \n\n\nOpCodes `0x0` through `0x1000` are soft reserved for Overworld Core messages, while `0x1001` and above are free for applications to use. Overworld does not throw an error if a OpCode is reused.\n\n\nDefining a new RPC\n-----------------\nTo define a new message, simply write a module using the behaviour `ow_rpc`\nand implementing the required callbacks, `rpc_info/0` which should return a\nlist of maps with keys as above.\n\nMessages in Overworld can be synchronous or asynchronous. Synchronous messages\ninitiated by the client are defined by one key:\n - `c2s_handler`, which corresponds to some module and function to process the\n   message. Note that your handler's function must be either arity 1 (to\n   process messages without an established session, see `account_new` for an\n   example)  or arity 2.\n\n\nGenerating the client library\n---------------------\nOverworld can automatically generate a client library in GDScript usable by Godot v4.x.\n\nThis library should be dropped into your scripts folder, along with your\nprotobuf file. You will need to install the\n[Godobuf](https://github.com/oniksan/godobuf) plugin in order to generate code\nto marshall/unmarshall data from Protobuf from/to your Godot client. You'll\nwant to autoload it with some name, I suggest `NetworkClient`. \n\nOnce Erlang is running, you can invoke the following to write out a library:\n\n```\n1> ow_binding:write().\n```\n\nExamples\n--------------","ref":"protocol.html"},{"type":"extras","title":"A simple client message with no response from server. - Protocol Guide (Outdated)","doc":"First we write a protobuf file describing the module:\n\n``` \nsyntax = \"proto2\";\n\npackage my_game;\n\nmessage hello {\n    required string msg = 1;\n}\n```\n\nBy default, GPB will generate an Erlang file named ` _ _pb.erl`. \n\nAnd then write a module that can generate the client call library, and handle the message:\n\n```\n-module(my_module).\n\n-behaviour(ow_rpc).\n\n% Required callback for Overworld\n-export([rpc_info/0]).\n\n% A trivial example where the client can ask the server for buffs\n-export([hello/2]).\n\n-define(HELLO, 16#2000). % This makes the rpc info a bit more readable\n\n-spec rpc_info() -> ow_rpc:callbacks().\nrpc_info() -> \n    [\n        #{ \n            opcode => ?HELLO,\n            c2s_call => send_hello, % autogenerates a function of the same name\n            c2s_handler => {?MODULE, hello, 2},\n            encoder => my_game\n         }\n    ].\n    \n\n-spec client_hello(binary(), ow_session:session()) ->\nclient_hello(Data, Session) ->\n    Decoded = my_game_pb:decode_msg(Data, hello)\n    Msg = maps:get(Decoded, msg),\n    logger:notice(\"Client sends: ~p\", [Msg]),\n    {ok, Session}.\n  \n```\n\nA client using `libow.gd` will be able to simply call\n\n```\nNetworkClient.send_hello(\"Hello world!\")\n```\nwhich should be processed by your `my_module` handler after it is routed through Overworld Core.\n\n\nBuilt-in messages\n--------------------\nOverworld has a few built in messages that you can reuse in your own modules.","ref":"protocol.html#a-simple-client-message-with-no-response-from-server"},{"type":"extras","title":"gen_response - Protocol Guide (Outdated)","doc":"The general response message `gen_response` encodes an an enum of either 0=OK or 1=ERROR with optional string to describe the error.\n\n#### Example\nHere's an example of a handler that assumes you have a function that can decode the message called `decode` and a function with conditional results called `blahblah`. `gen_response` is invoked here with `ok` returning nothing other than acknowledgement back to the client, and `error` with a rather unhelpful error message.\n```\nmyfun(Msg, Session) -> \n    DecodedMsg = decode(Msg),\n    Reply = \n    case blahblah(DecodedMsg, Session) of \n        foo -> \n            ow_protocol:response(ok);\n        bar ->\n            ow_protocol:response(error, \"Blahblah failed somehow\")\n    end,\n    [<<?YOUR_OPCODE:16>>, Reply].\n```","ref":"protocol.html#gen_response"}],"content_type":"text/plain","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}